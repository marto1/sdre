["Linux Device Drivers, 2nd EditionBy Alessandro Rubini &amp; Jonathan Corbet2nd Edition June 20010-59600-008-1, Order Number: 0081586 pages, $39.95sample chapter beginsChapter 4Debugging TechniquesContents:Debugging by PrintingDebugging by QueryingDebugging by WatchingDebugging System FaultsDebuggers and Related ToolsOne of the most compelling problems for anyone writing kernel code is\nhow to approach debugging. Kernel code cannot be easily executed under\na debugger, nor can it be easily traced, because it is a set of\nfunctionalities not related to a specific process. Kernel code errors\ncan also be exceedingly hard to reproduce and can bring down the\nentire system with them, thus destroying much of the evidence that\ncould be used to track them down.This chapter introduces techniques you can use to monitor kernel code\nand trace errors under such trying circumstances.Debugging by PrintingThe most common debugging technique is monitoring, which in\napplications programming is done by callingprintfat suitable points. When you are debugging\nkernel code, you can accomplish the same goal withprintk.printkWe used theprintkfunction in earlier chapters\nwith the simplifying assumption that it works likeprintf. Now it's time to introduce some of the\ndifferences.One of the differences is thatprintklets you\nclassify messages according to their severity by associating differentloglevels, or priorities, with the messages. You\nusually indicate the loglevel with a macro. For example,KERN_INFO, which we saw prepended to some of the\nearlier print statements, is one of the possible loglevels of the\nmessage. The loglevel macro expands to a string, which is\nconcatenated to the message text at compile time; that's why there is\nno comma between the priority and the format string in the following\nexamples. Here are two examples ofprintkcommands, a debug message and a critical message:printk(KERN_DEBUG \"Here I am: %s:%i\\n\", __FILE__, __LINE_&amp;_);\nprintk(KERN_CRIT \"I'm trashed; giving up on %p\\n\", ptr);There are eight possible loglevel strings, defined in the header&lt;linux/kernel.h&gt;:KERN_EMERGUsed for emergency messages, usually those that precede \na crash.KERN_ALERTA situation requiring immediate action.KERN_CRITCritical conditions, often related to serious hardware or software\nfailures.KERN_ERRUsed to report error conditions; device drivers will often useKERN_ERRto report hardware difficulties.KERN_WARNINGWarnings about problematic situations that do not, in themselves,\ncreate serious problems with the system.KERN_NOTICESituations that are normal, but still worthy of note. A number of\nsecurity-related conditions are reported at this level.KERN_INFOInformational messages. Many drivers print information about the\nhardware they find at startup time at this level.KERN_DEBUGUsed for debugging messages.Each string (in the macro expansion) represents an integer in angle\nbrackets. Integers range from 0 to 7, with smaller values representing\nhigher priorities.Aprintkstatement with no specified priority\ndefaults toDEFAULT_MESSAGE_LOGLEVEL, specified inkernel/printk.cas an integer. The default\nloglevel value has changed several times during Linux development, so\nwe suggest that you always specify an explicit loglevel.Based on the loglevel, the kernel may print the message to the current\nconsole, be it a text-mode terminal, a serial line printer, or a\nparallel printer. If the priority is less than the integer variableconsole_loglevel, the message is displayed. If bothklogdandsyslogdare running on the system, kernel\nmessages are appended to/var/log/messages(or\notherwise treated depending on yoursyslogdconfiguration), independent ofconsole_loglevel. Ifklogdis not running, the message won't\nreach user space unless you read/proc/kmsg.The variableconsole_loglevelis initialized toDEFAULT_CONSOLE_LOGLEVELand can be modified\nthrough thesys_syslogsystem call. One way to\nchange it is by specifying the-cswitch\nwhen invokingklogd, as specified in theklogdmanpage. Note that to change the\ncurrent value, you must first killklogdand then restart it with the-coption.\nAlternatively, you can write a program to change the console\nloglevel. You'll find a version of such a program inmisc-progs/setlevel.cin the source files\nprovided on the O'Reilly FTP site. The new level is specified as an\ninteger value between 1 and 8, inclusive. If it is set to 1, only\nmessages of level 0 (KERN_EMERG) will reach the\nconsole; if it is set to 8, all messages, including debugging ones,\nwill be displayed.You'll probably want to lower the loglevel if you work on the console\nand you experience a kernel fault (see \"Debugging System Faults\"\nlater in this chapter), because the fault-handling code raises theconsole_loglevelto its maximum value, causing\nevery subsequent message to appear on the console. You'll want to\nraise the loglevel if you need to see your debugging messages; this is\nuseful if you are developing kernel code remotely and the text console\nis not being used for an interactive session.From version 2.1.31 on it is possible to read and modify the console\nloglevel using the text file/proc/sys/kernel/printk. The file hosts four\ninteger values. You may be interested in the first two: the current\nconsole loglevel and the default level for messages.\n\n\nWith recent kernels, for instance, you can cause all kernel messages\nto appear at the console by simply entering#echo 8 &gt; /proc/sys/kernel/printkIf you run 2.0, however, you still need thesetleveltool.It should now be apparent why thehello.csample\nhad the&lt;1&gt;markers; they are there to make\nsure that the messages appear on the console.Linux allows for some flexibility in console logging policies by\nletting you send messages to a specific virtual console (if your\nconsole lives on the text screen). By default, the \"console\" is the\ncurrent virtual terminal. To select a different virtual terminal to\nreceive messages, you can issueioctl(TIOCLINUX)on\nany console device. The following program,setconsole, can be used to choose which\nconsole receives kernel messages; it must be run by the superuser and\nis available in themisc-progsdirectory.This is how the program works:int main(int argc, char **argv)\n{\n    char bytes[2] = {11,0}; /* 11 is the TIOCLINUX cmd number */\n\n    if (argc==2) bytes[1] = atoi(argv[1]); /* the chosen console */\n    else {\n        fprintf(stderr, \"%s: need a single arg\\n\",argv[0]); exit(1);\n    }\n    if (ioctl(STDIN_FILENO, TIOCLINUX, bytes)&lt;0) {    /* use stdin */\n        fprintf(stderr,\"%s: ioctl(stdin, TIOCLINUX): %s\\n\",\n                argv[0], strerror(errno));\n        exit(1);\n    }\n    exit(0);\n}setconsoleuses the specialioctlcommandTIOCLINUX, which\nimplements Linux-specific functions. To useTIOCLINUX, you pass it an argument that is a\npointer to a byte array. The first byte of the array is a number that\nspecifies the requested subcommand, and the following bytes are\nsubcommand specific. Insetconsole,\nsubcommand 11 is used, and the next byte (stored inbytes[1]) identifies the virtual console. The\ncomplete description ofTIOCLINUXcan be found indrivers/char/tty_io.c, in the kernel sources.How Messages Get LoggedTheprintkfunction writes messages into a\ncircular buffer that isLOG_BUF_LEN(defined inkernel/printk.c) bytes long. It then wakes any\nprocess that is waiting for messages, that is, any process that is\nsleeping in thesyslogsystem call or that\nis reading/proc/kmsg. These two interfaces to\nthe logging engine are almost equivalent, but note that reading from/proc/kmsgconsumes the data from the log buffer,\nwhereas thesyslogsystem call can optionally\nreturn log data while leaving it for other processes as well. In\ngeneral, reading the/procfile is easier, which\nis why it is the default behavior forklogd.If you happen to read the kernel messages by hand, after stoppingklogdyou'll find that the/procfile looks like a FIFO, in that the reader\nblocks, waiting for more data. Obviously, you can't read messages this\nway ifklogdor another process is already\nreading the same data because you'll contend for it.If the circular buffer fills up,printkwraps\naround and starts adding new data to the beginning of the buffer,\noverwriting the oldest data. The logging process thus loses the\noldest data. This problem is negligible compared with the advantages\nof using such a circular buffer. For example, a circular buffer allows\nthe system to run even without a logging process, while minimizing\nmemory waste by overwriting old data should nobody read it. Another\nfeature of the Linux approach to messaging is thatprintkcan be invoked from anywhere, even from an\ninterrupt handler, with no limit on how much data can be printed. The\nonly disadvantage is the possibility of losing some data.If theklogdprocess is running, it\nretrieves kernel messages and dispatches them tosyslogd, which in turn checks/etc/syslog.confto find out how to deal with\nthem.syslogddifferentiates between\nmessages according to a facility and a priority; allowable values for\nboth the facility and the priority are defined in&lt;sys/syslog.h&gt;. Kernel messages are logged\nby theLOG_KERNfacility, at a priority\ncorresponding to the one used inprintk(for\nexample,LOG_ERRis used forKERN_ERRmessages). Ifklogdisn't running, data remains in the\ncircular buffer until someone reads it or the buffer overflows.If you want to avoid clobbering your system log with the monitoring\nmessages from your driver, you can either specify the-f(file) option toklogdto instruct it to save messages to a\nspecific file, or modify/etc/syslog.confto suit\nyour needs. Yet another possibility is to take the brute-force\napproach: killklogdand verbosely print\nmessages on an unused virtual terminal,[21] or issue the commandcat /proc/kmsgfrom an unusedxterm.[21]For example,\nusesetlevel 8; setconsole 10to set up terminal\n10 to display messages.Turning the Messages On and OffDuring the early stages of driver development,printkcan help considerably in debugging and\ntesting new code. When you officially release the driver, on the\nother hand, you should remove, or at least disable, such print\nstatements. Unfortunately, you're likely to find that as soon as you\nthink you no longer need the messages and remove them, you'll\nimplement a new feature in the driver (or somebody will find a bug)\nand you'll want to turn at least one of the messages back on. There\nare several ways to solve both issues, to globally enable or disable\nyour debug messages and to turn individual messages on or off.Here we show one way to codeprintkcalls so you\ncan turn them on and off individually or globally; the technique\ndepends on defining a macro that resolves to aprintk(orprintf) call when\nyou want it to.Each print statement can be enabled or disabled by removing or adding\na single letter to the macro's name.All the messages can be disabled at once by changing the value of theCFLAGSvariable before compiling.The same print statement can be used in kernel code and user-level\ncode, so that the driver and test programs can be managed in the same\nway with regard to extra messages.The following code fragment implements these features and comes\ndirectly from the headerscull.h.#undef PDEBUG             /* undef it, just in case */\n#ifdef SCULL_DEBUG\n#  ifdef __KERNEL__\n     /* This one if debugging is on, and kernel space */\n#    define PDEBUG(fmt, args...) printk( KERN_DEBUG \"scull: \" fmt, \n                                         ## args)\n#  else\n     /* This one for user space */\n#    define PDEBUG(fmt, args...) fprintf(stderr, fmt, ## args)\n#  endif\n#else\n#  define PDEBUG(fmt, args...) /* not debugging: nothing */\n#endif\n\n#undef PDEBUGG\n#define PDEBUGG(fmt, args...) /* nothing: it's a placeholder */The symbolPDEBUGdepends on whether or notSCULL_DEBUGis defined, and it displays information\nin whatever manner is appropriate to the environment where the code is\nrunning: it uses the kernel callprintkwhen it's\nin the kernel, and thelibccallfprintfto the standard error when run in user\nspace. ThePDEBUGGsymbol, on the other hand, does\nnothing; it can be used to easily \"comment\" print statements without\nremoving them entirely.To simplify the process further, add the following lines to your\nmakefile:# Comment/uncomment the following line to disable/enable debugging\nDEBUG = y\n\n# Add your debugging flag (or not) to CFLAGS\nifeq ($(DEBUG),y)\n  DEBFLAGS = -O -g -DSCULL_DEBUG # \"-O\" is needed to expand inlines\nelse\n  DEBFLAGS = -O2\nendif\n\nCFLAGS += $(DEBFLAGS)The macros shown in this section depend on agccextension to the ANSI C preprocessor\nthat supports macros with a variable number of arguments. Thisgccdependency shouldn't be a problem\nbecause the kernel proper depends heavily ongccfeatures anyway. In addition, the\nmakefile depends on GNU's version ofmake; once again, the kernel\nalready depends on GNUmake, so this\ndependency is not a problem.If you're familiar with the C preprocessor, you can expand on the\ngiven definitions to implement the concept of a \"debug level,\"\ndefining different levels and assigning an integer (or bit mask) value\nto each level to determine how verbose it should be.But every driver has its own features and monitoring needs. The art of\ngood programming is in choosing the best trade-off between flexibility\nand efficiency, and we can't tell what is the best for you. Remember\nthat preprocessor conditionals (as well as constant expressions in the\ncode) are executed at compile time, so you must recompile to turn\nmessages on or off. A possible alternative is to use C conditionals,\nwhich are executed at runtime and therefore permit you to turn\nmessaging on and off during program execution. This is a nice\nfeature, but it requires additional processing every time the code is\nexecuted, which can affect performance even when the messages are\ndisabled. Sometimes this performance hit is unacceptable.The macros shown in this section have proven themselves useful in a\nnumber of situations, with the only disadvantage being the requirement\nto recompile a module after any changes to its messages.Debugging by QueryingThe previous section described howprintkworks\nand how it can be used. What it didn't talk about are its\ndisadvantages.A massive use ofprintkcan slow down the system\nnoticeably, becausesyslogdkeeps syncing\nits output files; thus, every line that is printed causes a disk\noperation. This is the right implementation fromsyslogd's perspective. It tries to\nwrite everything to disk in case the system crashes right after\nprinting the message; however, you don't want to slow down your system\njust for the sake of debugging messages. This problem can be solved\nby prefixing the name of your log file as it appears in/etc/syslogd.confwith a\nminus.[22] The problem with\nchanging the configuration file is that the modification will likely\nremain there after you are done debugging, even though during normal\nsystem operation you do want messages to be flushed to disk as soon as\npossible. An alternative to such a permanent change is running a\nprogram other thanklogd(such ascat /proc/kmsg, as suggested earlier), but this\nmay not provide a suitable environment for normal system operation.[22]The minus is a \"magic\" marker to preventsyslogdfrom flushing the file to disk at\nevery new message, documented insyslog.conf(5),\na manual page worth reading.More often than not, the best way to get relevant information is to\nquery the system when you need the information, instead of continually\nproducing data. In fact, every Unix system provides many tools for\nobtaining system information:ps,netstat,vmstat,\nand so on.Two main techniques are available to driver developers for querying\nthe system: creating a file in the/procfilesystem and using theioctldriver method. You\nmay usedevfsas an alternative to/proc, but/procis an\neasier tool to use for information retrieval.Using the /proc FilesystemThe/procfilesystem is a special,\nsoftware-created filesystem that is used by the kernel to export\ninformation to the world. Each file under/procis tied to a kernel function that generates the file's \"contents\" on\nthe fly when the file is read. We have already seen some of these\nfiles in action;/proc/modules, for example,\nalways returns a list of the currently loaded modules./procis heavily used in the Linux system. Many\nutilities on a modern Linux distribution, such asps,top, anduptime, get their information from/proc. Some device drivers also export\ninformation via/proc, and yours can do so as\nwell. The/procfilesystem is dynamic, so your\nmodule can add or remove entries at any time.Fully featured/procentries can be complicated\nbeasts; among other things, they can be written to as well as read\nfrom. Most of the time, however,/procentries\nare read-only files. This section will concern itself with the simple\nread-only case. Those who are interested in implementing something\nmore complicated can look here for the basics; the kernel source may\nthen be consulted for the full picture.All modules that work with/procshould include&lt;linux/proc_fs.h&gt;to define the proper\nfunctions.To create a read-only/procfile, your driver\nmust implement a function to produce the data when the file is read.\nWhen some process reads the file (using thereadsystem call), the request will reach your module by means of one of\ntwo different interfaces, according to what you registered. We'll\nleave registration for later in this section and jump directly to the\ndescription of the reading interfaces.In both cases the kernel allocates a page of memory (i.e.,PAGE_SIZEbytes) where the driver can write data to\nbe returned to user space.The recommended interface isread_proc, but an\nolder interface namedget_infoalso exists.int (*read_proc)(char *page, char **start, off_t offset, int count, int *eof, void *data);Thepagepointer is the buffer where you'll write\nyour data;startis used by the function to say\nwhere the interesting data has been written inpage(more on this later);offsetandcounthave the same meaning as in thereadimplementation. Theeofargument points to an integer that must be set by the driver to signal\nthat it has no more data to return, whiledatais a\ndriver-specific data pointer you can use for internal\nbookkeeping.[23] The function is available in version 2.4 of the\nkernel, and 2.2 as well if you use oursysdep.hheader.[23]We'll find several of these pointers\nthroughout the book; they represent the \"object\" involved in this\naction and correspond somewhat tothisin\nC++.int (*get_info)(char *page, char **start, off_t offset, int count);get_infois an older interface used to read from\na/procfile. The arguments all have the same\nmeaning as forread_proc. What it lacks is the\npointer to report end-of-file and the object-oriented flavor brought\nin by thedatapointer. The function is available\nin all the kernel versions we are interested in (although it had an\nextra unused argument in its 2.0 implementation).Both functions should return the number of bytes of data actually\nplaced in thepagebuffer, just like thereadimplementation does for other files. Other\noutput values are*eofand*start.eofis a simple flag,\nbut the use of thestartvalue is somewhat more\ncomplicated.The main problem with the original implementation of user extensions\nto the/procfilesystem was use of a single\nmemory page for data transfer. This limited the total size of a user\nfile to 4 KB (or whatever was appropriate for the host platform). Thestartargument is there to implement large data\nfiles, but it can be ignored.If yourproc_readfunction does not set the*startpointer (it starts outNULL), the kernel assumes that theoffsetparameter has been ignored and that the data\npage contains the whole file you want to return to user space. If, on\nthe other hand, you need to build a bigger file from pieces, you can\nset*startto be equal topageso that the caller knows your new data is placed at the beginning of\nthe buffer. You should then, of course, skip the firstoffsetbytes of data, which will have already been\nreturned in a previous call.There has long been another major issue with/procfiles, whichstartis\nmeant to solve as well. Sometimes the ASCII representation of kernel\ndata structures changes between successive calls toread, so the reader process could find\ninconsistent data from one call to the next. If*startis set to a small integer value, the caller\nwill use it to incrementfilp-&gt;f_posindependently of the amount of data you return, thus makingf_posan internal record number of yourread_procorget_infoprocedure. If, for example, yourread_procfunction is returning information from a big array of structures, and\nfive of those structures were returned in the first call,startcould be set to 5. The next call will\nprovide that same value as the offset; the driver then knows to start\nreturning data from the sixth structure in the array. This is defined\nas a \"hack\" by its authors and can be seen infs/proc/generic.c.Time for an example. Here is a simpleread_procimplementation for thesculldevice:int scull_read_procmem(char *buf, char **start, off_t offset,\n                   int count, int *eof, void *data)\n{\n    int i, j, len = 0;\n    int limit = count - 80; /* Don't print more than this */\n\n    for (i = 0; i &lt; scull_nr_devs &amp;&amp; len &lt;= limit; i++) {\n        Scull_Dev *d = &amp;scull_devices[i];\n        if (down_interruptible(&amp;d-&gt;sem))\n                return -ERESTARTSYS;\n        len += sprintf(buf+len,\"\\nDevice %i: qset %i, q %i, sz %li\\n\",\n                       i, d-&gt;qset, d-&gt;quantum, d-&gt;size);\n        for (; d &amp;&amp; len &lt;= limit; d = d-&gt;next) { /* scan the list */\n            len += sprintf(buf+len, \"  item at %p, qset at %p\\n\", d, \n                                    d-&gt;data);\n            if (d-&gt;data &amp;&amp; !d-&gt;next) /* dump only the last item \n                                                    - save space */\n                for (j = 0; j &lt; d-&gt;qset; j++) {\n                    if (d-&gt;data[j])\n                        len += sprintf(buf+len,\"    % 4i: %8p\\n\",\n                                                    j,d-&gt;data[j]);\n                }\n        }\n        up(&amp;scull_devices[i].sem);\n    }\n    *eof = 1;\n    return len;\n}This is a fairly typicalread_procimplementation. It assumes that there will never be a need to\ngenerate more than one page of data, and so ignores thestartandoffsetvalues. It is,\nhowever, careful not to overrun its buffer, just in case.A/procfunction using theget_infointerface would look very similar to the\none just shown, with the exception that the last two arguments would be\nmissing. The end-of-file condition, in this case, is signaled by\nreturning less data than the caller expects (i.e., less thancount).Once you have aread_procfunction defined, you\nneed to connect it to an entry in the/prochierarchy. There are two ways of setting up this connection, depending\non what versions of the kernel you wish to support. The easiest\nmethod, only available in the 2.4 kernel (and 2.2 too if you use oursysdep.hheader), is to simply callcreate_proc_read_entry. Here is the call used byscullto make its/procfunction available as/proc/scullmem:create_proc_read_entry(\"scullmem\", \n                       0    /* default mode */,\n                       NULL /* parent dir */, \n                       scull_read_procmem, \n                       NULL /* client data */);The arguments to this function are, as shown, the name of the/procentry, the file permissions to apply to the\nentry (the value 0 is treated as a special case and is turned to a\ndefault, world-readable mask), theproc_dir_entrypointer to the parent directory for this file (we useNULLto make the driver appear directly under/proc), the pointer to theread_procfunction, and the data pointer that\nwill be passed back to theread_procfunction.The directory entry pointer can be used to create entire directory\nhierarchies under/proc. Note, however, that an\nentry may be more easily placed in a subdirectory of/procsimply by giving the directory name as part\nof the name of the entry -- as long as the directory itself already\nexists. For example, an emerging convention says that/procentries associated with device drivers\nshould go in the subdirectorydriver/;scullcould place its entry there simply by\ngiving its name asdriver/scullmem.Entries in/proc, of course, should be removed\nwhen the module is unloaded.remove_proc_entryis the function that undoes whatcreate_proc_read_entrydid:remove_proc_entry(\"scullmem\", NULL /* parent dir */);The alternative method for creating a/procentry\nis to create and initialize aproc_dir_entrystructure and pass it toproc_register_dynamic(version 2.0) orproc_register(version 2.2,\nwhich assumes a dynamic file if the inode number in the structure is\n0). As an example, consider the following code thatsculluses when compiled against 2.0\nheaders:static int scull_get_info(char *buf, char **start, off_t offset,\n                int len, int unused)\n{\n    int eof = 0;\n    return scull_read_procmem (buf, start, offset, len, &amp;eof, NULL);\n}\n\nstruct proc_dir_entry scull_proc_entry = {\n        namelen:    8,\n        name:       \"scullmem\",\n        mode:       S_IFREG | S_IRUGO,\n        nlink:      1,\n        get_info:   scull_get_info,\n};\n\nstatic void scull_create_proc()\n{\n    proc_register_dynamic(&amp;proc_root, &amp;scull_proc_entry);\n}\n\nstatic void scull_remove_proc()\n{\n    proc_unregister(&amp;proc_root, scull_proc_entry.low_ino);\n}The code declares a function using theget_infointerface and fills in aproc_dir_entrystructure\nthat is registered with the filesystem.This code provides compatibility across the 2.0 and 2.2 kernels, with\na little support from macro definitions insysdep.h. It uses theget_infointerface because the 2.0 kernel did not\nsupportread_proc. Some more work with#ifdefcould have made it useread_procwith Linux 2.2, but the benefits would\nbe minor.The ioctl Methodioctl, which we show you how to use in the next\nchapter, is a system call that acts on a file descriptor; it receives\na number that identifies a command to be performed and (optionally)\nanother argument, usually a pointer.As an alternative to using the/procfilesystem,\nyou can implement a fewioctlcommands tailored\nfor debugging. These commands can copy relevant data structures from\nthe driver to user space, where you can examine them.Usingioctlthis way to get information is\nsomewhat more difficult than using/proc, because\nyou need another program to issue theioctland\ndisplay the results. This program must be written, compiled, and kept\nin sync with the module you're testing. On the other hand, the\ndriver's code is easier than what is needed to implement a/procfileThere are times whenioctlis the best way to get\ninformation, because it runs faster than reading/proc. If some work must be performed on the data\nbefore it's written to the screen, retrieving the data in binary form\nis more efficient than reading a text file. In addition,ioctldoesn't require splitting data into\nfragments smaller than a page.Another interesting advantage of theioctlapproach is that information-retrieval commands can be left in the\ndriver even when debugging would otherwise be disabled. Unlike a/procfile, which is visible to anyone who looks\nin the directory (and too many people are likely to wonder \"what that\nstrange file is\"), undocumentedioctlcommands\nare likely to remain unnoticed. In addition, they will still be there\nshould something weird happen to the driver. The only drawback is that\nthe module will be slightly bigger.Debugging by WatchingSometimes minor problems can be tracked down by watching the behavior\nof an application in user space. Watching programs can also help in\nbuilding confidence that a driver is working correctly. For example,\nwe were able to feel confident aboutscullafter looking at how itsreadimplementation\nreacted to read requests for different amounts of data.There are various ways to watch a user-space program working. You can\nrun a debugger on it to step through its functions, add print\nstatements, or run the program understrace. Here we'll discuss just the last\ntechnique, which is most interesting when the real goal is examining\nkernel code.Thestracecommand is a powerful tool that\nshows all the system calls issued by a user-space program. Not only\ndoes it show the calls, but it can also show the arguments to the\ncalls, as well as return values in symbolic form. When a system call\nfails, both the symbolic value of the error (e.g.,ENOMEM) and the corresponding string (Out\nof memory) are displayed.stracehas many command-line options; the most useful of which are-tto display the timewheneach call is executed,-Tto display the timespent\ninthe call,-eto limit the\ntypes of calls traced, and-oto redirect\nthe output to a file. By default,straceprints tracing information onstderr.stracereceives information from the kernel\nitself. This means that a program can be traced regardless of whether\nor not it was compiled with debugging support (the-goption togcc) and whether or not it is stripped. You\ncan also attach tracing to a running process, similar to the way a\ndebugger can connect to a running process and control it.The trace information is often used to support bug reports sent to\napplication developers, but it's also invaluable to kernel\nprogrammers. We've seen how driver code executes by reacting to system\ncalls;straceallows us to check the\nconsistency of input and output data of each call.For example,the following screen dump shows the last lines of running\nthe commandstrace ls /dev &gt;\n/dev/scull0:[...]\nopen(\"/dev\", O_RDONLY|O_NONBLOCK)     = 4\nfcntl(4, F_SETFD, FD_CLOEXEC)         = 0\nbrk(0x8055000)                        = 0x8055000\nlseek(4, 0, SEEK_CUR)                 = 0\ngetdents(4, /* 70 entries */, 3933)   = 1260\n[...]\ngetdents(4, /* 0 entries */, 3933)    = 0\nclose(4)                              = 0\nfstat(1, {st_mode=S_IFCHR|0664, st_rdev=makedev(253, 0), ...}) = 0\nioctl(1, TCGETS, 0xbffffa5c)          = -1 ENOTTY (Inappropriate ioctl\n                                                     for device)\nwrite(1, \"MAKEDEV\\natibm\\naudio\\naudio1\\na\"..., 4096) = 4000\nwrite(1, \"d2\\nsdd3\\nsdd4\\nsdd5\\nsdd6\\nsdd7\"..., 96) = 96\nwrite(1, \"4\\nsde5\\nsde6\\nsde7\\nsde8\\nsde9\\n\"..., 3325) = 3325\nclose(1)                              = 0\n_exit(0)                              = ?It's apparent in the firstwritecall that afterlsfinished looking in the target\ndirectory, it tried to write 4 KB. Strangely (forls), only four thousand bytes were written,\nand the operation was retried. However, we know that thewriteimplementation inscullwrites a single quantum at a time, so\nwe could have expected the partial write. After a few steps,\neverything sweeps through, and the program exits successfully.As another example, let'sreadthesculldevice (using thewccommand):[...]\nopen(\"/dev/scull0\", O_RDONLY)           = 4\nfstat(4, {st_mode=S_IFCHR|0664, st_rdev=makedev(253, 0), ...}) = 0\nread(4, \"MAKEDEV\\natibm\\naudio\\naudio1\\na\"..., 16384) = 4000\nread(4, \"d2\\nsdd3\\nsdd4\\nsdd5\\nsdd6\\nsdd7\"..., 16384) = 3421\nread(4, \"\", 16384)                      = 0\nfstat(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(3, 7), ...}) = 0\nioctl(1, TCGETS, {B38400 opost isig icanon echo ...}) = 0\nwrite(1, \"   7421 /dev/scull0\\n\", 20)   = 20\nclose(4)                                = 0\n_exit(0)                                = ?As expected,readis able to retrieve only four\nthousand bytes at a time, but the total amount of data is the same\nthat was written in the previous example. It's interesting to note how\nretries are organized in this example, as opposed to the previous\ntrace.wcis optimized for fast reading\nand thus bypasses the standard library, trying to read more data with\na single system call. You can see from thereadlines in the trace howwctried to read 16\nKB at a time.Linux experts can find much useful information in the output ofstrace. If you're put off by all the\nsymbols, you can limit yourself to watching how the file methods\n(open,read, and so on)\nwork.Personally, we findstracemost useful for\npinpointing runtime errors from system calls. Often theperrorcall in the application or demo program\nisn't verbose enough to be useful for debugging, and being able to\ntell exactly which arguments to which system call triggered the error\ncan be a great help.Debugging System FaultsEven if you've used all the monitoring and debugging techniques,\nsometimes bugs remain in the driver, and the system faults when the\ndriver is executed. When this happens it's important to be able to\ncollect as much information as possible to solve the problem.Note that \"fault\" doesn't mean \"panic.\" The Linux code is robust\nenough to respond gracefully to most errors: a fault usually results\nin the destruction of the current process while the system goes on\nworking. The systemcanpanic, and it may if a\nfault happens outside of a process's context, or if some vital part of\nthe system is compromised. But when the problem is due to a driver\nerror, it usually results only in the sudden death of the process\nunlucky enough to be using the driver. The only unrecoverable damage\nwhen a process is destroyed is that some memory allocated to the\nprocess's context is lost; for instance, dynamic lists allocated by\nthe driver throughkmallocmight be lost.\nHowever, since the kernel calls thecloseoperation for any open device when a process dies, your driver can\nrelease what was allocated by theopenmethod.We've already said that when kernel code misbehaves, an informative\nmessage is printed on the console. The next section explains how to\ndecode and use such messages. Even though they appear rather obscure\nto the novice, processor dumps are full of interesting information,\noften sufficient to pinpoint a program bug without the need for\nadditional testing.Oops MessagesMost bugs show themselves inNULLpointer\ndereferences or by the use of other incorrect pointer values. The\nusual outcome of such bugs is an oops message.Any address used by the processor is a virtual address and is mapped\nto physical addresses through a complex structure of so-called page\ntables (see \"Page Tables\" in Chapter 13, \"mmap and DMA\"). When an invalid pointer is dereferenced, the paging\nmechanism fails to map the pointer to a physical address and the\nprocessor signals apage faultto the operating\nsystem. If the address is not valid, the kernel is not able to \"page\nin\" the missing address; it generates an oops if this happens while\nthe processor is in supervisor mode.It's worth noting that the first enhancement introduced after version\n2.0 was automatic handling of invalid address faults when moving data\nto and from user space. Linus chose to let the hardware catch\nerroneous memory references, so that the normal case (where the\naddresses are correct) is handled more efficiently.An oops displays the processor status at the time of the fault,\nincluding the contents of the CPU registers, the location of page\ndescriptor tables, and other seemingly incomprehensible\ninformation. The message is generated byprintkstatements in the fault handler\n(arch/*/kernel/traps.c) and is dispatched as\ndescribed earlier, in the section \"printk\".Let's look at one such message. Here's what results from dereferencing\naNULLpointer on a PC running version 2.4 of the\nkernel. The most relevant information here is the instruction pointer\n(EIP), the address of the faulty instruction.Unable to handle kernel NULL pointer dereference at virtual address \\\n     00000000\n printing eip:\nc48370c3\n*pde = 00000000\nOops: 0002\nCPU:    0\nEIP:    0010:[&lt;c48370c3&gt;]\nEFLAGS: 00010286\neax: ffffffea   ebx: c2281a20   ecx: c48370c0   edx: c2281a40\nesi: 4000c000   edi: 4000c000   ebp: c38adf8c   esp: c38adf8c\nds: 0018   es: 0018   ss: 0018\nProcess ls (pid: 23171, stackpage=c38ad000)\nStack: 0000010e c01356e6 c2281a20 4000c000 0000010e c2281a40 c38ac000 \\\n            0000010e \n       4000c000 bffffc1c 00000000 00000000 c38adfc4 c010b860 00000001 \\\n            4000c000 \n       0000010e 0000010e 4000c000 bffffc1c 00000004 0000002b 0000002b \\\n            00000004 \nCall Trace: [&lt;c01356e6&gt;] [&lt;c010b860&gt;] \nCode: c7 05 00 00 00 00 00 00 00 00 31 c0 89 ec 5d c3 8d b6 00 00This message was generated by writing to a device owned by thefaultymodule, a module built deliberately\nto demonstrate failures. The implementation of thewritemethod offaulty.cis\ntrivial:ssize_t faulty_write (struct file *filp, const char *buf, size_t count,\n\t\tloff_t *pos)\n{\n    /* make a simple fault by dereferencing a NULL pointer */\n    *(int *)0 = 0;\n    return 0;\n}As you can see, what we do here is dereference aNULLpointer. Since 0 is never a valid pointer\nvalue, a fault occurs, which the kernel turns into the oops message\nshown earlier. The calling process is then killed.Thefaultymodule has more interesting\nfault conditions in itsreadimplementation:char faulty_buf[1024];\n\nssize_t faulty_read (struct file *filp, char *buf, size_t count, \n                     loff_t *pos)\n{\n    int ret, ret2;\n    char stack_buf[4];\n\n    printk(KERN_DEBUG \"read: buf %p, count %li\\n\", buf, (long)count);\n    /* the next line oopses with 2.0, but not with 2.2 and later */\n    ret = copy_to_user(buf, faulty_buf, count);\n    if (!ret) return count; /* we survived */\n\n    printk(KERN_DEBUG \"didn't fail: retry\\n\");\n    /* For 2.2 and 2.4, let's try a buffer overflow  */\n    sprintf(stack_buf, \"1234567\\n\");\n    if (count &gt; 8) count = 8; /* copy 8 bytes to the user */\n    ret2 = copy_to_user(buf, stack_buf, count);\n    if (!ret2) return count;\n    return ret2;\n}It first reads from a global buffer without checking the size of the\ndata, and then performs a buffer overrun by writing to a local buffer.\nThe first situation results in an oops only in version 2.0 of the\nkernel, because later versions automatically deal with user copy\nfunctions. The buffer overflow results in an oops with all kernel\nversions; however, since thereturninstruction\nbrings the instruction pointer to nowhere land, this kind of fault is\nmuch harder to trace, and you can get something like the following:EIP:    0010:[&lt;00000000&gt;]\n[...]\nCall Trace: [&lt;c010b860&gt;] \nCode:  Bad EIP value.The main problem with users dealing with oops messages is in the\nlittle intrinsic meaning carried by hexadecimal values; to be\nmeaningful to the programmer they need to be resolved to symbols. A\ncouple of utilities are available to perform this resolution for\ndevelopers:klogdandksymoops. The former tool performs symbol\ndecoding by itself whenever it is running; the latter needs to be\npurposely invoked by the user. In the following discussion we use the\ndata generated in our first oops example by dereferencing aNULLpointer.Using klogdTheklogddaemon can decode oops messages\nbefore they reach the log files. In many situations,klogdcan provide all the information a\ndeveloper needs to track down a problem, though sometimes the\ndeveloper must give it a little help.A dump of the oops forfaulty, as it\nreaches the system log, looks like this (note the decoded symbols on\ntheEIPline and in the stack trace):Unable to handle kernel NULL pointer dereference at virtual address \\\n     00000000 \n printing eip: \nc48370c3 \n*pde = 00000000 \nOops: 0002 \nCPU:    0 \nEIP:    0010:[faulty:faulty_write+3/576] \nEFLAGS: 00010286 \neax: ffffffea   ebx: c2c55ae0   ecx: c48370c0   edx: c2c55b00 \nesi: 0804d038   edi: 0804d038   ebp: c2337f8c   esp: c2337f8c \nds: 0018   es: 0018   ss: 0018 \nProcess cat (pid: 23413, stackpage=c2337000) \nStack: 00000001 c01356e6 c2c55ae0 0804d038 00000001 c2c55b00 c2336000 \\\n            00000001\n       0804d038 bffffbd4 00000000 00000000 bffffbd4 c010b860 00000001 \\\n            0804d038\n       00000001 00000001 0804d038 bffffbd4 00000004 0000002b 0000002b \\\n            00000004\nCall Trace: [sys_write+214/256] [system_call+52/56]  \nCode: c7 05 00 00 00 00 00 00 00 00 31 c0 89 ec 5d c3 8d b6 00 00klogdprovides most of the necessary\ninformation to track down the problem. In this case we see that the\ninstruction pointer (EIP) was executing in the\nfunctionfaulty_write, so we know where to start\nlooking. The3/576string tells us that the\nprocessor was at byte 3 of a function that appears to be 576 bytes\nlong. Note that the values are decimal, not hex.The developer must exercise some care, however, to get useful\ninformation for errors that occur within loadable modules.klogdloads all of the available symbol\ninformation when it starts, and uses those symbols thereafter. If you\nload a module afterklogdhas initialized\nitself (usually at system boot),klogdwill\nnot have your module's symbol information. To forceklogdto go out and get that information,\nsend theklogdprocess aSIGUSR1signal after your module has been loaded\n(or reloaded), and before you do anything that could cause it to oops.It is also possible to runklogdwith the-p(\"paranoid\") option, which will cause\nit to reread symbol information anytime it sees an oops message. Theklogdmanpage recommends against this mode\nof operation, however, since it makesklogdquery the kernel for information after the problem has occurred.\nInformation obtained after an error could be plain wrong.Forklogdto work properly, it must have a\ncurrent copy of theSystem.mapsymbol table file.\nNormally this file is found in/boot; if you have\nbuilt and installed a kernel from a nonstandard location you may have\nto copySystem.mapinto/boot, or tellklogdto look elsewhere.klogdrefuses to decode\nsymbols if the symbol table doesn't match the current kernel. If a\nsymbol is decoded on the system log, you can be reasonably sure it is\ndecoded correctly.Using ksymoopsAt timesklogdmay not be enough for your\ntracing purposes. Usually, you need to get both the hexadecimal\naddress and the associated symbol, and you often need offsets printed\nas hex numbers. You may need more information than address decoding.\nAlso, it is common forklogdto get killed\nduring the fault.\n\n\nIn such situations, a stronger oops analyzer may be called for;ksymoopsis such a tool.Prior to the 2.3 development series,ksymoopswas distributed with the kernel\nsource, in thescriptsdirectory. It now lives\non its own FTP site and is maintained independently of the kernel.\nEven if you are working with an older kernel, you probably should go\ntoftp://ftp.ocs.com.au/pub/ksymoopsand get an\nupdated version of the tool.To operate at its best,ksymoopsneeds a\nlot of information in addition to the error message; you can use\ncommand-line options to tell it where to find the various items. The\nprogram needs the following items:troff .wcon_off?A System.map fileThis map must correspond to the kernel that was running at the time\nthe oops occurred. The default is/usr/src/linux/System.map.A list of modulesksymoopsneeds to know what modules were\nloaded when the oops occurred, in order to extract symbolic\ninformation from them. If you do not supply this list,ksymoopswill look at/proc/modules.A list of kernel symbols defined when the oops\noccurredThe default is to get this list from/proc/ksyms.A copy of the kernel image that was runningNote thatksymoopsneeds a straight kernel\nimage, not the compressed version (vmlinuz,zImage, orbzImage) that\nmost systems boot. The default is to use no kernel image because most\npeople don't keep it. If you have the exact image handy, you should\ntell the program where it is by using the-voption.The locations of the object files for any kernel modules\nthat were loadedksymoopswill look in the standard\ndirectories for modules, but during development you will almost\ncertainly have to tell it where your module lives using the-ooptionAlthoughksymoopswill go to files in/procfor some of its needed information, the\nresults can be unreliable. The system, of course, will almost\ncertainly have been rebooted between the time the oops occurs and whenksymoopsis run, and the information from/procmay not match the state of affairs when the\nfailure occurred. When possible, it is better to save copies of/proc/modulesand/proc/ksymsprior to causing the oops to\nhappen.We urge driver developers to read the manual page forksymoopsbecause it is a very informative\ndocument.The last argument on the tool's command line is the location of the\noops message; if it is missing, the tool will readstdinin the best Unix tradition. The message can\nbe recovered from the system logs with luck; in the case of a very bad\ncrash you may end up writing it down off the screen and typing it back\nin (unless you were using a serial console, a nice tool for kernel\ndevelopers).Note thatksymoopswill be confused by an\noops message that has already been processed byklogd. If you are runningklogd, and your system is still running after an\noops occurs, a clean oops message can often be obtained by invoking\nthedmesgcommand.If you do not provide all of the listed information explicitly,ksymoopswill issue warnings. It will also\nissue warnings about things like loaded modules that define no\nsymbols. A warning-free run ofksymoopsis\nrare.Output fromksymoopstends to look like the\nfollowing:&gt;&gt;EIP; c48370c3 &lt;[faulty]faulty_write+3/20&gt;   &lt;=====\nTrace; c01356e6 &lt;sys_write+d6/100&gt;\nTrace; c010b860 &lt;system_call+34/38&gt;\nCode;  c48370c3 &lt;[faulty]faulty_write+3/20&gt;\n00000000 &lt;_EIP&gt;:\nCode;  c48370c3 &lt;[faulty]faulty_write+3/20&gt;   &lt;=====\n   0:   c7 05 00 00 00    movl   $0x0,0x0   &lt;=====\nCode;  c48370c8 &lt;[faulty]faulty_write+8/20&gt;\n   5:   00 00 00 00 00 \nCode;  c48370cd &lt;[faulty]faulty_write+d/20&gt;\n   a:   31 c0             xorl   %eax,%eax\nCode;  c48370cf &lt;[faulty]faulty_write+f/20&gt;\n   c:   89 ec             movl   %ebp,%esp\nCode;  c48370d1 &lt;[faulty]faulty_write+11/20&gt;\n   e:   5d                popl   %ebp\nCode;  c48370d2 &lt;[faulty]faulty_write+12/20&gt;\n   f:   c3                ret    \nCode;  c48370d3 &lt;[faulty]faulty_write+13/20&gt;\n  10:   8d b6 00 00 00    leal   0x0(%esi),%esi\nCode;  c48370d8 &lt;[faulty]faulty_write+18/20&gt;\n  15:   00As you can see,ksymoopsprovidesEIPand kernel stack information much likeklogddoes, but more precisely and in\nhexadecimal. You'll note that thefaulty_writefunction is correctly reported to be 0x20 bytes long. This is becauseksymoopsreads the object file of your\nmodule and extracts all available information.In this case, moreover, you also get an assembly language dump of the\ncode where the fault occurred. This information can often be used to\nfigure out exactly what was happening; here it's clearly an\ninstruction that writes a 0 to address 0.One interesting feature ofksymoopsis that\nit is ported to nearly all the platforms where Linux runs and exploits\nthebfd(binary format description) library in\norder to support several computer architectures at the same time. To\nstep outside of the PC world, let's see how the same oops message\nappears on theSPARC64platform (several lines\nhave been broken for typographical needs):Unable to handle kernel NULL pointer dereference\ntsk-&gt;mm-&gt;context = 0000000000000734\ntsk-&gt;mm-&gt;pgd = fffff80003499000\n              \\|/ ____ \\|/\n              \"@'/ .. \\`@\"\n              /_| \\__/ |_\\\n                 \\__U_/\nls(16740): Oops\nTSTATE: 0000004400009601 TPC: 0000000001000128 TNPC: 0000000000457fbc \\\nY: 00800000\ng0: 000000007002ea88 g1: 0000000000000004 g2: 0000000070029fb0 \\\ng3: 0000000000000018\ng4: fffff80000000000 g5: 0000000000000001 g6: fffff8000119c000 \\\ng7: 0000000000000001\no0: 0000000000000000 o1: 000000007001a000 o2: 0000000000000178 \\\no3: fffff8001224f168\no4: 0000000001000120 o5: 0000000000000000 sp: fffff8000119f621 \\\nret_pc: 0000000000457fb4\nl0: fffff800122376c0 l1: ffffffffffffffea l2: 000000000002c400 \\\nl3: 000000000002c400\nl4: 0000000000000000 l5: 0000000000000000 l6: 0000000000019c00 \\\nl7: 0000000070028cbc\ni0: fffff8001224f140 i1: 000000007001a000 i2: 0000000000000178 \\\ni3: 000000000002c400\ni4: 000000000002c400 i5: 000000000002c000 i6: fffff8000119f6e1 \\\ni7: 0000000000410114\nCaller[0000000000410114]\nCaller[000000007007cba4]\nInstruction DUMP: 01000000 90102000 81c3e008 &lt;c0202000&gt; \\\n30680005 01000000 01000000 01000000 01000000Note how the instruction dump doesn't start from the instruction that\ncaused the fault but three instructions earlier: that's because the\nRISC platforms execute several instructions in parallel and may\ngenerate deferred exceptions, so one must be able to look back at the\nlast few instructions.This is whatksymoopsprints when fed with\ninput data starting at theTSTATEline:&gt;&gt;TPC; 0000000001000128 &lt;[faulty].text.start+88/a0&gt;   &lt;=====\n&gt;&gt;O7;  0000000000457fb4 &lt;sys_write+114/160&gt;\n&gt;&gt;I7;  0000000000410114 &lt;linux_sparc_syscall+34/40&gt;\nTrace; 0000000000410114 &lt;linux_sparc_syscall+34/40&gt;\nTrace; 000000007007cba4 &lt;END_OF_CODE+6f07c40d/????&gt;\nCode;  000000000100011c &lt;[faulty].text.start+7c/a0&gt;\n0000000000000000 &lt;_TPC&gt;:\nCode;  000000000100011c &lt;[faulty].text.start+7c/a0&gt;\n   0:   01 00 00 00       nop \nCode;  0000000001000120 &lt;[faulty].text.start+80/a0&gt;\n   4:   90 10 20 00       clr  %o0     ! 0 &lt;_TPC&gt;\nCode;  0000000001000124 &lt;[faulty].text.start+84/a0&gt;\n   8:   81 c3 e0 08       retl \nCode;  0000000001000128 &lt;[faulty].text.start+88/a0&gt;   &lt;=====\n   c:   c0 20 20 00       clr  [ %g0 ]   &lt;=====\nCode;  000000000100012c &lt;[faulty].text.start+8c/a0&gt;\n  10:   30 68 00 05       b,a   %xcc, 24 &lt;_TPC+0x24&gt; \\\n                        0000000001000140 &lt;[faulty]faulty_write+0/20&gt;\nCode;  0000000001000130 &lt;[faulty].text.start+90/a0&gt;\n  14:   01 00 00 00       nop \nCode;  0000000001000134 &lt;[faulty].text.start+94/a0&gt;\n  18:   01 00 00 00       nop \nCode;  0000000001000138 &lt;[faulty].text.start+98/a0&gt;\n  1c:   01 00 00 00       nop \nCode;  000000000100013c &lt;[faulty].text.start+9c/a0&gt;\n  20:   01 00 00 00       nopTo print the disassembled code shown we had to tellksymoopsthe target file format and\narchitecture (this is needed because the native architecture forSPARC64user space is 32 bit). In this case, the\noptions-t elf64-sparc -a sparc:v9did the job.You may complain that this call trace doesn't carry any interesting\ninformation; however, theSPARCprocessors don't\nsave all the call trace on the stack: theO7andI7registers hold the instruction pointers of the\nlast two calling functions, which is why they are shown near the call\ntrace. In this case, the faulty instruction was in a function invoked\nbysys_write.Note that, whatever the platform/architecture pair, the format used to\nshow disassembled code is the same as that used by theobjdumpprogram.objdumpis a powerful utility; if\nyou want to look at the whole function that failed, you can invoke the\ncommandobjdump -d faulty.o(once again, onSPARC64, you need special options:-- target elf64-sparc -- architecture\nsparc:v9).\n\n\n\n\nFor more information onobjdumpand its\ncommand-line options, see the manpage for the command.Learning to decode an oops message requires some practice\nand an understanding of the target processor you are using, as well as\nof the conventions used to represent assembly language, but it's worth\ndoing. The time spent learning will be quickly repaid. Even if you\nhave previous expertise with the PC assembly language under non-Unix\noperating systems, you may need to devote some time to learning,\nbecause the Unix syntax is different from Intel syntax. (A good\ndescription of the differences is in the Info documentation file foras, in the chapter called\n\"i386-specific.\")System HangsAlthough most bugs in kernel code end up as oops messages, sometimes\nthey can completely hang the system. If the system hangs, no message\nis printed. For example, if the code enters an endless loop, the\nkernel stops scheduling, and the system doesn't respond to any action,\nincluding the magicCTRL-ALT-DELcombination. You have two choices for dealing with system\nhangs -- either prevent them beforehand or be able to debug them\nafter the fact.You can prevent an endless loop by insertingscheduleinvocations at strategic points. Theschedulecall (as you might guess) invokes the\nscheduler and thus allows other processes to steal CPU time from the\ncurrent process. If a process is looping in kernel space due to a bug\nin your driver, theschedulecalls enable you to\nkill the process, after tracing what is happening.You should be aware, of course, that any call toschedulemay create an additional source of\nreentrant calls to your driver, since it allows other processes to\nrun. This reentrancy should not normally be a problem, assuming that\nyou have used suitable locking in your driver. Be sure, however, not\nto callscheduleany time that your driver is\nholding a spinlock.troff .wcon_off?If your driver really hangs the system, and you don't know where to\ninsertschedulecalls, the best way to go is to\nadd some print messages and write them to the console (by changing theconsole_loglevelvalue).Sometimes the system may appear to be hung, but it isn't. This can\nhappen, for example, if the keyboard remains locked in some strange\nway. These false hangs can be detected by looking at the output of a\nprogram you keep running for just this purpose. A clock or system\nload meter on your display is a good status monitor; as long as it\ncontinues to update, the scheduler is working. If you are not using a\ngraphic display, you can check the scheduler by running a program that\nflashes the keyboard LEDs, turns on the floppy motor every now and\nthen, or ticks the speaker -- conventional beeps are quite annoying\nand should be avoided; look for theKDMKTONEioctlcommand instead. A sample program\n(misc-progs/heartbeat.c) that flashes a keyboard\nLED in a heartbeat fashion is available in the sources on the O'Reilly\nFTP site.If the keyboard isn't accepting input, the best thing to do is log\ninto the system through your network and kill any offending processes,\nor reset the keyboard (withkbd_mode -a).\nHowever, discovering that the hang is only a keyboard lockup is of\nlittle use if you don't have a network available to help you recover.\nIf this is the case, you could set up alternative input devices to be\nable at least to reboot the system cleanly. A shutdown and reboot\ncycle is easier on your computer than hitting the so-called big red\nbutton, and it saves you from the lengthyfsckscanning of your disks.Such an alternative input device can be, for example, the\nmouse. Version 1.10 or newer of thegpmmouse server features a command-line option to enable a similar\ncapability, but it works only in text mode. If you don't have a\nnetwork connection and run in graphics mode, we suggest running some\ncustom solution, like a switch connected to the DCD pin of the serial\nline and a script that polls for status change.troff .wcon_off?An indispensable tool for these situations is the \"magic SysRq key,\"\nwhich is available on more architectures in 2.2 and later kernels.\nMagic SysRq is invoked with the combination of the ALT and SysRq keys\non the PC keyboard, or with the ALT and Stop keys on SPARC keyboards.\nA third key, pressed along with these two, performs one of a number of\nuseful actions, as follows:rTurns off keyboard raw mode in situations where you cannot runkbd_mode.kInvokes the \"secure attention\" (SAK) function. SAK will kill all\nprocesses running on the current console, leaving you with a clean\nterminal.sPerforms an emergency synchronization of all disks.uAttempts to remount all disks in a read-only mode. This operation,\nusually invoked immediately afters, can save a\nlot of filesystem checking time in cases where the system is in\nserious trouble.bImmediately reboots the system. Be sure to synchronize and remount\nthe disks first.pPrints the current register information.tPrints the current task list.mPrints memory information.Other magic SysRq functions exist; seesysrq.txtin theDocumentationdirectory of the kernel\nsource for the full list. Note that magic SysRq must be explicitly\nenabled in the kernel configuration, and that most distributions do\nnot enable it, for obvious security reasons. For a system used to\ndevelop drivers, however, enabling magic SysRq is worth the trouble of\nbuilding a new kernel in itself. Magic SysRq must be enabled at\nruntime with a command like the following:echo 1 &gt; /proc/sys/kernel/sysrqAnother precaution to use when reproducing system hangs is to mount\nall your disks as read-only (or unmount them). If the disks are\nread-only or unmounted, there's no risk of damaging the filesystem or\nleaving it in an inconsistent state. Another possibility is using a\ncomputer that mounts all of its filesystems via NFS, the network file\nsystem. The \"NFS-Root\" capability must be enabled in the kernel, and\nspecial parameters must be passed at boot time. In this case you'll\navoid any filesystem corruption without even resorting to SysRq,\nbecause filesystem coherence is managed by the NFS server, which is\nnot brought down by your device driver.Debuggers and Related ToolsThe last resort in debugging modules is using a debugger to step\nthrough the code, watching the value of variables and machine\nregisters. This approach is time-consuming and should be avoided\nwhenever possible. Nonetheless, the fine-grained perspective on the\ncode that is achieved through a debugger is sometimes invaluable.Using an interactive debugger on the kernel is a challenge. The\nkernel runs in its own address space on the behalf of all the\nprocesses on the system. As a result, a number of common capabilities\nprovided by user-space debuggers, such as breakpoints and\nsingle-stepping, are harder to come by in the kernel. In this section\nwe look at several ways of debugging the kernel; each of them has\nadvantages and disadvantages.Using gdbgdbcan be quite useful for looking at the\nsystem internals. Proficient use of the debugger at this level\nrequires some confidence withgdbcommands,\nsome understanding of assembly code for the target platform, and the\nability to match source code and optimized assembly.The debugger must be invoked as though the kernel were an application.\nIn addition to specifying the filename for the uncompressed kernel\nimage, you need to provide the name of a core file on the command\nline. For a running kernel, that core file is the kernel core image,/proc/kcore. A typical invocation ofgdblooks like the following:gdb /usr/src/linux/vmlinux /proc/kcoreThe first argument is the name of the uncompressed kernel executable,\nnot thezImageorbzImageor\nanything compressed.The second argument on thegdbcommand line\nis the name of the core file. Like any file in/proc,/proc/kcoreis\ngenerated when it is read. When thereadsystem\ncall executes in the/procfilesystem, it maps to\na data-generation function rather than a data-retrieval one; we've\nalready exploited this feature in \"Using the /proc Filesystem\"\nearlier in this chapter.kcoreis used to\nrepresent the kernel \"executable\" in the format of a core file; it\nis a huge file because it represents the whole kernel address space,\nwhich corresponds to all physical memory. From withingdb, you can look at kernel variables by\nissuing the standardgdbcommands. For\nexample,p jiffiesprints the number of clock\nticks from system boot to the current time.When you print data fromgdb, the kernel is\nstill running, and the various data items have different values at\ndifferent times;gdb, however, optimizes\naccess to the core file by caching data that has already been read. If\nyou try to look at thejiffiesvariable once again,\nyou'll get the same answer as before. Caching values to avoid extra\ndisk access is a correct behavior for conventional core files, but is\ninconvenient when a \"dynamic\" core image is used. The solution is to\nissue the commandcore-file /proc/kcorewhenever\nyou want to flush thegdbcache; the\ndebugger prepares to use a new core file and discards any old\ninformation. You won't, however, always need to issuecore-filewhen reading a new datum;gdbreads the core in chunks of a few\nkilobytes and caches only chunks it has already referenced.Numerous capabilities normally provided bygdbare not available when you are working\nwith the kernel. For example,gdbis not\nable to modify kernel data; it expects to be running a program to be\ndebugged under its own control before playing with its memory image.\nIt is also not possible to set breakpoints or watchpoints, or to\nsingle-step through kernel functions.If you compile the kernel with debugging support\n(-g), the resultingvmlinuxfile turns out to work better withgdbthan the same file compiled without-g. Note, however, that a large amount of\ndisk space is needed to compile the kernel with the-goption (each object file and the kernel\nitself are three or more times bigger than usual).On non-PC computers, the game is different. On the Alpha,make bootstrips the kernel before creating the\nbootable image, so you end up with both thevmlinuxand thevmlinux.gzfiles. The former is usable bygdb, and\nyou can boot from the latter. On the SPARC, the kernel (at least the\n2.0 kernel) is not stripped by default.When you compile the kernel with-gand run the debugger usingvmlinuxtogether with/proc/kcore,gdbcan\nreturn a lot of information about the kernel internals. You can, for\nexample, use commands such asp *module_list,p *module_list-&gt;next, andp\n*chrdevs[4]-&gt;fopsto dump structures. To get the best out\nofp, you'll need to keep a kernel map and the\nsource code handy.Another useful task thatgdbperforms on\nthe running kernel is disassembling functions, via thedisassemblecommand (which can be abbreviated todisass) or the \"examine instructions\"\n(x/i) command. Thedisassemblecommand can take as its argument\neither a function name or a memory range, whereasx/itakes a single memory address, also in the\nform of a symbol name. You can invoke, for example,x/20ito disassemble 20 instructions. Note that\nyou can't disassemble a module function, because the debugger is\nacting onvmlinux, which doesn't know about your\nmodule. If you try to disassemble a module by address,gdbis most likely to reply \"Cannot access\nmemory at xxxx.\" For the same reason, you can't look at data items\nbelonging to a module. They can be read from/dev/memif you know the address of your\nvariables, but it's hard to make sense out of raw data extracted from\nsystem RAM.If you want to disassemble a module function, you're better off\nrunning theobjdumputility on the module\nobject file. Unfortunately, the tool runs on the disk copy of the\nfile, not the running one; therefore, the addresses as shown byobjdumpwill be the addresses before\nrelocation, unrelated to the module's execution environment. Another\ndisadvantage of disassembling an unlinked object file is that function\ncalls are still unresolved, so you can't easily tell a call toprintkfrom a call tokmalloc.As you see,gdbis a useful tool when your\naim is to peek into the running kernel, but it lacks some features\nthat are vital to debugging device drivers.The kdb Kernel DebuggerMany readers may be wondering why the kernel does not have any more\nadvanced debugging features built into it. The answer, quite simply,\nis that Linus does not believe in interactive debuggers. He fears\nthat they lead to poor fixes, those which patch up symptoms rather\nthan addressing the real cause of problems. Thus, no built-in\ndebuggers.Other kernel developers, however, see an occasional use for\ninteractive debugging tools. One such tool is thekdbbuilt-in kernel debugger, available as\na nonofficial patch fromoss.sgi.com. To usekdb, you must obtain the patch (be sure to\nget a version that matches your kernel version), apply it, and rebuild\nand reinstall the kernel. Note that, as of this writing,kdbworks only on IA-32 (x86) systems\n(though a version for the IA-64 existed for a while in the mainline\nkernel source before being removed).Once you are running akdb-enabled kernel,\nthere are a couple of ways to enter the debugger. Hitting the Pause\n(or Break) key on the console will start up the debugger.kdbalso starts up when a kernel oops\nhappens, or when a breakpoint is hit. In any case, you will see a\nmessage that looks something like this:Entering kdb (0xc1278000) on processor 1 due to Keyboard Entry\n[1]kdb&gt;Note that just about everything the kernel does stops whenkdbis running. Nothing else should be\nrunning on a system where you invokekdb;\nin particular, you should not have networking turned on -- unless,\nof course, you are debugging a network driver. It is generally a good\nidea to boot the system in single-user mode if you will be usingkdb.As an example, consider a quicksculldebugging session. Assuming that the driver is already loaded, we can\ntellkdbto set a breakpoint inscull_readas follows:[1]kdb&gt; bp scull_read\nInstruction(i) BP #0 at 0xc8833514 (scull_read)\n    is enabled on cpu 1\n[1]kdb&gt; goThebpcommand tellskdbto stop the next time the kernel entersscull_read. We then typegoto continue execution. After\nputting something into one of thesculldevices, we can attempt to read it by runningcatunder a shell on another terminal,\nyielding the following:Entering kdb (0xc3108000) on processor 0 due to Breakpoint @ 0xc8833515\nInstruction(i) breakpoint #0 at 0xc8833514\nscull_read+0x1:   movl   %esp,%ebp\n[0]kdb&gt;We are now positioned at the beginning ofscull_read. To see how we got there, we can get\na stack trace:[0]kdb&gt; bt\n    EBP       EIP         Function(args)\n0xc3109c5c 0xc8833515  scull_read+0x1\n0xc3109fbc 0xfc458b10  scull_read+0x33c255fc( 0x3, 0x803ad78, 0x1000,troff .hw 0x1000?0x1000, 0x804ad78)\n0xbffffc88 0xc010bec0  system_call\n[0]kdb&gt;kdbattempts to print out the arguments to\nevery function in the call trace. It gets confused, however, by\noptimization tricks used by the compiler. Thus it prints five\narguments forscull_read, which only has four.Time to look at some data. Themdscommand\nmanipulates data; we can query the value of thescull_devicespointer with a command like:[0]kdb&gt; mds scull_devices 1\nc8836104: c4c125c0 ....Here we asked for one (four-byte) word of data starting at the\nlocation ofscull_devices; the answer tells us that\nour device array was allocated starting at the addressc4c125c0. To look at a device structure itself we\nneed to use that address:[0]kdb&gt; mds c4c125c0 \nc4c125c0: c3785000  ....\nc4c125c4: 00000000  ....\nc4c125c8: 00000fa0  ....\nc4c125cc: 000003e8  ....\nc4c125d0: 0000009a  ....\nc4c125d4: 00000000  ....\nc4c125d8: 00000000  ....\nc4c125dc: 00000001  ....The eight lines here correspond to the eight fields in theScull_Devstructure. Thus we see that the memory\nfor the first device is allocated at0xc3785000,\nthat there is no next item in the list, that the quantum is\n\n4000 (hex fa0) and the array size is 1000 (hex 3e8), that there are\n154 bytes of data in the device (hex 9a), and so on.kdbcan change data as well. Suppose we\nwanted to trim some of the data from the device:[0]kdb&gt; mm c4c125d0 0x50\n0xc4c125d0 = 0x50A subsequentcaton the device will now\nreturn less data than before.kdbhas a number of other capabilities,\nincluding single-stepping (by instructions, not lines of C source\ncode), setting breakpoints on data access, disassembling code,\nstepping through linked lists, accessing register data, and more.\nAfter you have applied thekdbpatch, a\nfull set of manual pages can be found in theDocumentation/kdbdirectory in your kernel source\ntree.The Integrated Kernel Debugger PatchA number of kernel developers have contributed to an unofficial patch\ncalled theintegrated kernel debugger, or IKD.\nIKD provides a number of interesting kernel debugging facilities. The\nx86 is the primary platform for this patch, but much of it works on\nother architectures as well. As of this writing, the IKD patch can be\nfound atftp://ftp.kernel.org/pub/linux/kernel/people/andrea/ikd.\nIt is a patch that must be applied to the source for your kernel; the\npatch is version specific, so be sure to download the one that matches\nthe kernel you are working with.One of the features of the IKD patch is a kernel stack debugger. If\nyou turn this feature on, the kernel will check the amount of free\nspace on the kernel stack at every function call, and force an oops if\nit gets too small.\n\n\n\nIf something in your kernel is causing stack corruption, this tool may\nhelp you to find it. There is also a \"stack meter\" feature that you\ncan use to see how close to filling up the stack you get at any\nparticular time.The IKD patch also includes some tools for finding kernel lockups. A\n\"soft lockup\" detector forces an oops if a kernel procedure goes for\ntoo long without scheduling.\n\nIt is implemented by simply counting the number of function calls that\nare made and shutting things down if that number exceeds a\npreconfigured threshold. Another feature can continuously print the\nprogram counter on a virtual console for truly last-resort lockup\ntracking. The semaphore deadlock detector forces an oops if a process\nspends too long waiting on adowncall.Other debugging capabilities in IKD include the kernel trace\ncapability, which can record the paths taken through the kernel\ncode. There are some memory debugging tools, including a leak detector\nand a couple of \"poisoners,\" that can be useful in tracking down\nmemory corruption problems.Finally, IKD also includes a version of thekdbdebugger discussed in the previous\nsection. As of this writing, however, the version ofkdbincluded in the IKD patch is somewhat\nold. If you needkdb, we recommend that you\ngo directly to the source at oss.sgi.com for the current version.The kgdb Patchkgdbis a patch that allows the full\nuse of thegdbdebugger on the Linux\nkernel, but only on x86 systems. It works by hooking into the system\nto be debugged via a serial line, withgdbrunning on the far end. You thus need two systems to usekgdb-- one to run the debugger and one\nto run the kernel of interest. Likekdb,kgdbis currently available from\noss.sgi.com.Setting upkgdbinvolves installing a\nkernel patch and booting the modified kernel. You need to connect the\ntwo systems with a serial cable (of the null modem variety) and to\ninstall some support files on thegdbside\nof the connection. The patch places detailed instructions in the fileDocumentation/i386/gdb-serial.txt; we won't\nreproduce them here. Be sure to read the instructions on debugging\nmodules: toward the end there are some nicegdbmacros that have been written for this\npurpose.Kernel Crash Dump AnalyzersCrash dump analyzers enable the system to record its state when an\noops occurs, so that it may be examined at leisure afterward. They can\nbe especially useful if you are supporting a driver for a user at a\ndifferent site. Users can be somewhat reluctant to copy down oops\nmessages for you so installing a crash dump system can let you get the\ninformation you need to track down a user's problem without requiring\nwork from him. It is thus not surprising that the available crash dump\nanalyzers have been written by companies in the business of supporting\nsystems for users.There are currently two crash dump analyzer patches available for\nLinux. Both were relatively new when this section was written, and\nboth were in a state of flux. Rather than provide detailed\ninformation that is likely to go out of date, we'll restrict ourselves\nto providing an overview and pointers to where more information can be\nfound.The first analyzer is LKCD (Linux Kernel Crash Dumps). It's\navailable, once again, fromoss.sgi.com. When a\nkernel oops occurs, LKCD will write a copy of the current system state\n(memory, primarily) into the dump device you specified in advance. The\ndump device must be a system swap area. A utility calledLCRASHis run on the next reboot (before swapping\nis enabled) to generate a summary of the crash, and optionally to save\na copy of the dump in a conventional file.LCRASHcan be run interactively and provides a\nnumber of debugger-like commands for querying the state of the\nsystem.LKCD is currently supported for the Intel 32-bit architecture only,\nand only works with swap partitions on SCSI disks.Another crash dump facility is available fromwww.missioncriticallinux.com. This crash dump\nsubsystem creates crash dump files directly in/var/dumpsand does not use the swap area. That\nmakes certain things easier, but it also means that the system will be\nmodifying the file system while in a state where things are known to\nhave gone wrong. The crash dumps generated are in a standard core\nfile format, so tools likegdbcan be used\nfor post-mortem analysis. This package also provides a separate\nanalyzer that is able to extract more information thangdbfrom the crash dump files.The User-Mode Linux PortUser-Mode Linux is an interesting concept. It is structured as a\nseparate port of the Linux kernel, with its ownarch/umsubdirectory. It does not run on a new\ntype of hardware, however; instead, it runs on a virtual machine\nimplemented on the Linux system call interface. Thus, User-Mode Linux\nallows the Linux kernel to run as a separate, user-mode process on a\nLinux system.Having a copy of the kernel running as a user-mode process brings a\nnumber of advantages. Because it is running on a constrained, virtual\nprocessor, a buggy kernel cannot damage the \"real\" system.\nDifferent hardware and software configurations can be tried easily on\nthe same box. And, perhaps most significantly for kernel developers,\nthe user-mode kernel can be easily manipulated withgdbor another debugger. After all, it is\njust another process. User-Mode Linux clearly has the potential to\naccelerate kernel development.As of this writing, User-Mode Linux is not distributed with the\nmainline kernel; it must be downloaded from its web site\n(http://user-mode-linux.sourceforge.net). The\nword is that it will be integrated into an early 2.4 release after\n2.4.0; it may well be there by the time this book is published.User-Mode Linux also has some significant limitations as of this\nwriting, most of which will likely be addressed soon. The virtual\nprocessor currently works in a uniprocessor mode only; the port runs\non SMP systems without a problem, but it can only emulate a\nuniprocessor host. The biggest problem for driver writers, though, is\nthat the user-mode kernel has no access to the host system's hardware.\nThus, while it can be useful for debugging most of the sample drivers\nin this book, User-Mode Linux is not yet useful for debugging drivers\nthat have to deal with real hardware. Finally, User-Mode Linux only\nruns on the IA-32 architecture.Because work is under way to fix all of these problems, User-Mode\nLinux will likely be an indispensable tool for Linux device driver\nprogrammers in the very near future.The Linux Trace ToolkitThe Linux Trace Toolkit (LTT) is a kernel patch and a set of related\nutilities that allow the tracing of events in the kernel. The trace\nincludes timing information and can create a reasonably complete\npicture of what happened over a given period of time. Thus, it can be\nused not only for debugging but also for tracking down performance\nproblems.LTT, along with extensive documentation, can be found on the Web atwww.opersys.com/LTT.Dynamic ProbesDynamic Probes (or DProbes) is a debugging tool released (under the\nGPL) by IBM for Linux on the IA-32 architecture. It allows the\nplacement of a \"probe\" at almost any place in the system, in both\nuser and kernel space. The probe consists of some code (written in a\nspecialized, stack-oriented language) that is executed when control\nhits the given point. This code can report information back to user\nspace, change registers, or do a number of other things. The useful\nfeature of DProbes is that once the capability has been built into the\nkernel, probes can be inserted anywhere within a running system\nwithout kernel builds or reboots. DProbes can also work with the\nLinux Trace Toolkit to insert new tracing events at arbitrary\nlocations.The DProbes tool can be downloaded from IBM's open source site:oss.software.ibm.com.End of sample chapterBack to:Table of ContentsBack to:Linux Device Drivers, 2nd EditionO'Reilly Footer Begins Hereoreilly.com Home|O'Reilly Bookstores|How to Order|O'Reilly ContactsInternational|About O'Reilly|Affiliated Companies|Privacy Policy&copy; 2001, O'Reilly &amp; Associates, Inc.O'Reilly Footer Ends Here", "LoginorRegisterfor free.The UHF of the film world.header(adsbygoogle = window.adsbygoogle || []).push({});Jack InFollow @quietearthusWant to write for Quiet Earth?Sun Sep 20 07:37:53 2015Article ad(adsbygoogle = window.adsbygoogle || []).push({});Latest CommentsChlo&euml; Grace Moretz Fights an Alien Apocalypse in THE 5th WAVEVIFF 2011: Review of sprawling Russian sci-fi TARGET (MISHEN)VIFF 2011: Review of sprawling Russian sci-fi TARGET (MISHEN)Stephen King's THE MIST to Television?DARK TOWER Update: It's Happening, People!SOME KID OF HATE is Some Kind of Bad [Review]Cory Doctorow's LITTLE BROTHER Nabbed by ParamountCory Doctorow's LITTLE BROTHER Nabbed by ParamountNew Look at THE LEFTOVERS Asks: Is Miracle Really a Miracle? [Trailer]ALIENS VS. TITANIC Looks So Bad It Might be GeniusLatest Forum PostsMore MAD MAX GIFSRe: Mad MaxRe: Mad MaxRe: Mad MaxRe: Mad MaxMAD MAX GifMad MaxRe: Lesson of the Evil (2012)Re: Lost Web Site :(Re: Lost Web Site :(PA NewsFirst Intense Footage from PA Flick MAN DOWN Starring Shia LaBeouf & Gary OldmanNew Look at THE LEFTOVERS Asks: Is Miracle Really a Miracle? [Trailer]First Teaser for Indie Apocalypse Thriller DRIFTERORION Director Talks Inspiration, Gut Instinct & How TV is Changing Movies [Interview]New on Blu-ray & DVD: Mad Max! Extinction! & More!Craig DiLouie Recommends: Fear the Walking DeadChlo\u00c3\u00ab Grace Moretz Fights an Alien Apocalypse in THE 5th WAVEHere's Five Clips from Z FOR ZACHARIAH!Z NATION Season 2 is Back with a Song [Trailer]THE SHANNARA CHRONICLES Looks Beautiful Scary [Trailer]Search for Cause of Apocalypse Gets Amusing in BUREAU OF PROTO SOCIETY [Full Short]Latest ReviewsEDEN is a Dose of Testosterone-Driven Machismo [Review]SOME KID OF HATE is Some Kind of Bad [Review]TIFF 2015: Ben Wheatley's HIGH RISE ReviewsL'ETRANGE 2015: CAT AND MOUSE is Exceptional [Review]Craig DiLouie Recommends: Fear the Walking DeadDA SWEET BLOOD OF JESUS is Strange, Nonsensical & Weirdly Watchable [Review]ORION is a Dreamlike Fantasy Take on the Apocalypse [Review]AIR Delivers Familiar But Compelling PA Drama [Review]Craig DiLouie Recommends: HBO's THE LEFTOVERSTANGERINE is Delicious Indie Entertainment Without Cheese [Review]Older NewsORION Director Talks Inspiration, Gut Instinct & How TV is Changing Movies [Interview]Boba Fett's Back in STAR WARS: THE NEW REPUBLIC ANTHOLOGY TrailerTHE PARTISAN Looks Like My New Favourite Movie [Trailer]Colin Farrell has 45 Days Until he Becomes THE LOBSTER [Trailer]New DEATHGASM Trailer Brings Metal, Demons & Teen AwkwardnessNew on Blu-ray & DVD: Mad Max! Extinction! & More!This 1990 Cyberpunk Documentary is a Fascinating Time CapsuleShane Abbess' Next Sci-Fi Thriller SFv1 Casts Up!Craig DiLouie Recommends: Fear the Walking DeadChlo\u00c3\u00ab Grace Moretz Fights an Alien Apocalypse in THE 5th WAVENicholas Hoult & Kristen Stewart Find Love in Dystopian EQUALSMACBETH Has Never Looked Quite This Good [Trailer]Edmonton's DEDFest Announces First Wave of 2015 TitlesHere's Five Clips from Z FOR ZACHARIAH!Bunker Blueprint: HAWK THE HUNTER Hunts for SupportZ NATION Season 2 is Back with a Song [Trailer]Terribly Good: Nicolas Cage in PAY THE GHOST [Trailer]Keanu Reeves Is Terrified of Girls in KNOCK KNOCK [Trailer]THE SHANNARA CHRONICLES Looks Beautiful Scary [Trailer]Search for Cause of Apocalypse Gets Amusing in BUREAU OF PROTO SOCIETY [Full Short]Mon May 25 23:39:46 2015CrewMarina AntunesEditor in ChiefVancouver, British ColumbiaChristopher WebsterManaging EditorEdmonton, AlbertaquietearthAsst. Managing EditorDenver, ColoradoSimon ReadUK CorrespondentEdinburgh, ScotlandRick McGrathToronto CorrespondentToronto, OntarioManuel de LayetFrance CorrespondentParis, FrancerochefortAustin CorrespondentAustin, TexasDaniel OlmosCorrispondente in ItaliaItalyGriffith Maloney aka Griffith MaloneyNew York CorrespondentNew York, NYStephanie OFloating CorrespondentQuiet Earth BunkerJason WidgingtonMontreal CorrespondentMontreal, Quebecend headerLatest newsUSB Snoop in linuxquietearth[General News 10.16.06]Tweet!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');br 127br 398in br 3This is intended to be a howto to debug usb transactions under linux, or simply to reverse engineer propietary usb stuff.If you need to reverse engineer a windows only usb driver, you can do it easily using vmware. We can snoop the usb traffic from windows using usbmon which is part of the linux kernel since version 2.6.11 (I think). Previous to that you had to use patches.<!--\ngoogle_ad_client = \"ca-pub-4540668249175587\";\ngoogle_ad_slot = \"3626378043\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->1. Compile and install the kernelFirst off we need to compile the \"Debug filesystem\" and the usbmon module into the kernel. Under your source directory, run:# make menuconfigEnable the debug filesystem which is located under Kernel hacking -> Kernel Debugging. Unfortunately this cannot be compiled as a module.Then enable usb monitoring under Device Drivers -> USB support. It should be around the USB Multimedia adapters or before port drivers.You will then need to compile the newly configured kernel and install it. This will be distribution dependent, so consult your documentation. If you are looking for instructions for ubuntu, you can read my post about ithere.2. SetupOnce you're booted into your new kernel, we need to mount the debug filesystem and load usbmon (which should be a module):# mount -t debugfs none_debugs /sys/kernel/debug# modprobe usbmon# ls -l /sys/kernel/debugtotal 0-rw------- 1 root root 0 2006-10-16 12:53 1s-rw------- 1 root root 0 2006-10-16 12:53 1t-rw------- 1 root root 0 2006-10-16 12:53 2s-rw------- 1 root root 0 2006-10-16 12:53 2tYou should already have vmware setup with your necessary version of windows installed. At this point we can use the usbmon package (note the package name is the same as the kernel module, but not the same thing) which makes reading the debug output much easier, or you could read the usbmon documentation located in Docuemtation/usb/usbmon.txt in the linux kernel source.I'm going to use the usbmon package (0.4) so let's grab it fromhttp://people.redhat.com/zaitcev/linux/. This is a java program, and I couldn't use the pre-installed blackdown java on ubuntu, I had to grab the Sun jre and jdk from the repositories. To compile you will probably need to modify the USBMon Makefile to change the JAVAC (java compiler) location. Run make and you should be able to start it up with \"java USBMon\". Let's leave this for later as it will need to be loaded after we've inserted our device.3. ExecutionStartup vmware and boot your windows virtual machine, once loaded make sure you have loaded the device driver and software for the usb thing you wish to watch. Insert the usb device, both windows and linux should recognize the device, and it should function fine without any special modifications required. Now we can load up the java USBMon program and find our usb device, it will be listed under whatever usb bus # you plugged it into. It might be listed as \"generic\" or something else which is non-intuitive, so you can take a look at /proc/bus/usb/devices to help out.Once you've found the device in USBMon, set the primary control pipe and all the interfaces under the Configuration tab to \"Full Data Monitoring\", then go ahead and run a transaction to it under windows. To see the data, go to the Endpoints tab and under whatever Endpoint Data section, just click on \"Data not shown\" and it will open a new window with a text/hex/binary dump of the data.At this point I would reccomend doing one transaction to your device at a time, then looking at the debug output to figure out how it works. The USBMon interface leaves a lot to be desired, so if anyone knows of any better program, please post a comment here.Then again it might just be easier to do it by hand as described in the kernel documentation.UPDATE: 10/17/06I got linked off Make, woohoo! Make rules, it's one of the few sites I read. Thanks to all who visited, and special thanks to Pete for the update on the impending binary api goodness..PingbacksPingback fromhttp://zedomax.com/blog/2006/10/17/diy-hack-howto-snoop-doggy-usb/on October 17th, 2006 17:10:29 GMTPingback fromhttp://hax0r.schleppingsquid.net/?p=29on October 17th, 2006 23:38:37 GMTTrackbacksUSB Snooping in linuxRad, Quiet Earth has a good how-to on listening in to what's going on over USB, great for reverse engineering weird USB doo-dads... - &quot;This is intended to be a ho...Trackback from:MAKE: Blog| October 17th, 2006 15:28:11 GMTYou might also likePete Zaitcev(8 years ago)ReplyJust like you said, forget the USBmon. It's the  old program which Dave Harding wrote, but he never completed it.Currently (for 2.6.18), I simply read the raw output for the text format API.Last week one guy sent me a patch to introduce a binary API, which plugs into libpcap, and thus into Wireshark. We're hashing this out, so it's not quite there.Anonymous(8 years ago)Replyur hotdanielstaple(8 years ago)ReplyThe cool thing I have spotted is that the debugfs and usbmon module is already present under ubuntu. You will not need to compile or configure the kernel, just mount the debugfs, load the usbmon module, and the usbmon directory should appear under the /sys/kernel/debug directory.Happy hacking - I am going to try to get some multimedia keys working on my new shiny keyboard...Giro(7 years ago)ReplyThere is an even better way to sniff on USB Traffic:the svn version of libpcap is able to sniff on USB Traffic. In combination with Wireshark it is very easy to see whats going on on the USBhttp://wiki.wireshark.org/USBCeDeROM(7 years ago)Replypingback frompoland: http://www.tomek.cedro.info/content/view/202/72/lang,pl/Anonymous(6 years ago)ReplypingLeave a commentYour Commentvar _CI = _CI || {};\n(function() {\n_CI.counter = (_CI.counter) ? _CI.counter + 1 : 1;\ndocument.write('<div id=\"_CI_widget_'+_CI.counter+'\"></div>');\nvar script = document.createElement('script'); script.type = 'text/javascript';\nscript.src = 'http://widget.crowdignite.com/widgets/1033?_ci_wid=_CI_widget_'+_CI.counter;\nscript.async = true; document.getElementsByTagName('body')[0].appendChild(script);\n})();begin footercontact|advertising|write for us|rss|subscribe via email|mobile&copy; 2006-2014 QE Media, LLC (except where applicable)_uacct = \"UA-993329-1\";\nurchinTracker();", "BEGIN HEADERPartnersSupportCommunityUbuntu.comUbuntu WikiSearch:<!--// Initialize search form\nvar f = document.getElementById('searchform');\nf.getElementsByTagName('label')[0].style.display = 'none';\nvar e = document.getElementById('searchinput');\nsearchChange(e);\nsearchBlur(e);\n//-->Immutable PageInfoAttachmentsMore Actions:Raw TextPrint ViewDelete Cache------------------------Check SpellingLike PagesLocal Site Map------------------------Rename PageCopy PageDelete Page------------------------Subscribe User------------------------Remove SpamRevert to this revisionPackage PagesSync Pages------------------------LoadSaveSlideShow<!--// Init menu\nactionsMenuInit('More Actions:');\n//-->Ubuntu WikiLoginHelpDebuggingRemovableDevicesEND HEADERDebugging CentralThis page is part of the debugging series \u2014 pages with debugging details for a variety of Ubuntu packages.ContentsIntroductionThings to try firstHow to reportDebugging procedureKnown bugsNon-bugsIntroductionHelp on debugging removable device issues.Things to try firstRun fsck (dosfsck?) on the disk to make sure it does not have any configuration errors.  Sometimes a misconfigured drive will work fine in Windows but not in Linux.In Hardy or later, remove the \"usefree\" option with gconf-editor (Applications --&gt; System Tools --&gt; Configuration Editor).  This can prevent drives from auto-mounting.https://bugs.launchpad.net/ubuntu/+source/gnome-mount/+bug/151025The \"usefree\" option should be removed from system --&gt; storage --&gt; default_options --&gt; vfat --&gt; mount_optionsHow to reportWhen reporting a problem with removable devices, such as USB storage devices (\"keys\", hard drives, card readers, music players, digital cameras, etc.), please do the following steps:disconnect the devicein a terminal, start \"udevadm\"  in monitor mode and capture outputsudo udevadm monitor -e | tee udev.logconnect the deviceopen a second Terminal and capture lshal, dmesg and lslshal &gt; lshal.txtdmesg &gt; dmesg.txtls -l /dev/sd* &gt; devices.txtpress Control-C in the first terminal with the \"udevadm\".attachlshal.txt,devices.txt,dmesg.txtandudev.logto the bug reportcopy/paste into the report the output ofck-list-sessionscopy/paste into the report the output ofid haldaemoncopy/paste into the report the output ofuname -aIn easy cases this is everything that is needed. However, you might be asked for a \"hal debug output\"; please do the following steps to get it:disconnect the devicestop haldsudo killall haldstart hald while capturing its outputsudo hald --daemon=no --verbose=yes 2&gt;&amp;1 | tee hal.logwait until the flood of messages settledconnect the devicewait again until no more messages appearpress Control-C to stop the foreground halrestore the background halsudo /etc/init.d/hal restartattachhal.logto the bug reportrestart your desktop sessionDebugging procedureTBD.Known bugsDescription of known issues, how to recognise them and stock responses/actions.OpenBug#DescriptionActionTBD.TBD.TBD.ClosedBug#DescriptionActionTBD.TBD.TBD.Non-bugsTBD.CategoryBugSquadCategoryDebuggingBEGIN FOOTERDebuggingRemovableDevices  (last edited 2011-01-07 14:06:15 bycharlie-tca).post#content#container#main#wrapper .hfeedThe material on this wiki is available under a free license, seeCopyright / Licensefor details.#siteinfo#footer", "current communitychatblogUnix &amp; LinuxUnix &amp; Linux Metayour communitiesSign uporlog into customize your list.more stack exchange communitiesStack ExchangeInboxReputation and Badgessign uplog intourhelpTourStart here for a quick overview of the siteHelp CenterDetailed answers to any questions you might haveMetaDiscuss the workings and policies of this siteStackExchange.ready(function() { StackExchange.topbar.init(); });Unix &amp; LinuxQuestionsTagsUsersBadgesUnansweredAsk Questiongoogleoff: allSign up&times;Unix &amp; Linux Stack Exchange is a question and answer site for users of Linux, FreeBSD and other Un*x-like operating systems. It&#39;s 100% free, no registration required.StackExchange.ready(function() {\r\n            var clickSource = $(\"body\").attr(\"class\") + '-mini';\r\n            var location = 0;\r\n            if ($(\"body\").hasClass(\"questions-page\")) {\r\n                clickSource = 'questionpagemini';\r\n                location = 2;\r\n            } else if ($(\"body\").hasClass(\"question-page\")) {\r\n                clickSource = 'questionpagemini';\r\n                location = 2;\r\n            } else if ($(\"body\").hasClass(\"home-page\")) {\r\n                clickSource = 'homepagemini';\r\n                location = 4;\r\n            }\r\n\r\n            $('#tell-me-more').click(function () {\r\n                StackExchange.using(\"gps\", function () {\r\n                    StackExchange.gps.track(\"hero.action\", { hero_action_type: 'cta', location: location }, true);\r\n                });\r\n            });\r\n            $('#herobox-mini #close').click(function () {\r\n                StackExchange.using(\"gps\", function () {\r\n                    StackExchange.gps.track(\"hero.action\", { hero_action_type: \"close\", location: location }, true);\r\n                });\r\n                $.cookie(\"hero\", \"none\", { path: \"/\", expires: 365 });\r\n                var $hero = $(\"#herobox-mini\");\r\n                $hero.slideUp('fast', function () { $hero.remove(); });\r\n                return false;\r\n            });\r\n        });googleon: allFind out which modules are associated with a usb device?var ados = ados || {}; ados.run = ados.run || [];\r\n                ados.run.push(function () { ados_add_placement(22,0,\"adzerk1097310490\",4).enableDynamicSiteSelection().setZone(29); });up vote13down votefavorite7Could you recommend a way to figure out which driver is being used for a USB device.\nSort of a usb equivalent oflspci -kcommand.driverskernel-modulesshare|improve this questioneditedJul 22 '14 at 11:34Kiwy3,0021437askedJan 2 '13 at 13:03Alan1,207934add a comment&nbsp;|&nbsp;2 Answers2activeoldestvotesup vote19down voteacceptedFinding the Kernel Driver(s)The victim device$ lsusb \nBus 010 Device 002: ID 046d:c01e Logitech, Inc. MX518 Optical Mouse\nBus 010 Device 003: ID 051d:0002 American Power Conversion Uninterruptible Power SupplyWe're going to try to find out what driver is used for the APC UPS. Note that there are two answers to this question: The driver that the kernel would use, and the driver that is currently in use. Userspace can instruct the kernel to use a different driver (and in the case of my APC UPS,nuthas).Method 1: Using usbutils (easy)Theusbutilspackage (on Debian, at least) includes a script calledusb-devices. If you run it, it outputs information about the devices on the system, including which driver is used:$ usb-devices\n\u22ee\nT:  Bus=10 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  3 Spd=1.5 MxCh= 0\nD:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1\nP:  Vendor=051d ProdID=0002 Rev=01.06\nS:  Manufacturer=American Power Conversion\nS:  Product=Back-UPS RS 1500 FW:8.g9 .D USB FW:g9 \nS:  SerialNumber=XXXXXXXXXXXX  \nC:  #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=24mA\nI:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbfs\n\u22eeNote that this lists the current driver, not the default one. There isn't a way to find the default one.Method 2: Using debugfs (requires root)If you have debugfs mounted, the kernel maintains a file in the same format asusb-devicesprints out at/sys/kernel/debug/usb/devices; you can view withless, etc. Note that debugfs interfaces are not stable, so different kernel versions may print in a different format, or be missing the file entirely.Once again, this only shows the current driver, not the default.Method 3: Using only basic utilities to read /sys directly (best for scripting or recovery)You can get the information out of/sys, thought its more painful thanlspci. These/sysinterfaces should be reasonably stable, so if you're writing a shell script, this is probably how you want to do it.Initially,lsusbseems to count devices from 1,/sysfrom 0. So 10-2 is a good guess for where to find the APC UPS lsusb gives as bus 10, device 3. Unfortunately, over time that mapping breaks down\u2014sysfs re-uses numbers even when device numbers aren't. Thedevnumfile's contents will match the device number given by lsusb, so you can do something like this:$ grep -l '^3$' /sys/bus/usb/devices/10-*/devnum     # the ^ and $ to prevent also matching 13, 31, etc.\n/sys/bus/usb/devices/10-2/devnumSo, in this case, it's definitely10-2.$ cd /sys/bus/usb/devices/10-2\n$ ls\n10-2:1.0             bDeviceClass     bMaxPower           descriptors  ep_00         maxchild   remove     urbnum\nauthorized           bDeviceProtocol  bNumConfigurations  dev          idProduct     power      serial     version\navoid_reset_quirk    bDeviceSubClass  bNumInterfaces      devnum       idVendor      product    speed\nbcdDevice            bmAttributes     busnum              devpath      ltm_capable   quirks     subsystem\nbConfigurationValue  bMaxPacketSize0  configuration       driver       manufacturer  removable  ueventWe can be sure this is the right device bycating a few of the files:$ cat idVendor idProduct manufacturer product \n051d\n0002\nAmerican Power Conversion\nBack-UPS RS 1500 FW:8.g9 .D USB FW:g9If you look in 10-2:1.0 (:1is the \"configuration\",.0the interface\u2014a single USB device can do multiple things, and have multiple drivers;lsusb -vwill show these), there is a modalias file and a driver symlink:$ cat 10-2\\:1.0/modalias \nusb:v051Dp0002d0106dc00dsc00dp00ic03isc00ip00in00\n$ readlink driver\n../../../../../../bus/usb/drivers/usbfsSo, the current driver isusbfs. You can find the default driver by askingmodinfoabout the modalias:$ /sbin/modinfo `cat 10-2\\:1.0/modalias`\nfilename:       /lib/modules/3.6-trunk-amd64/kernel/drivers/hid/usbhid/usbhid.ko\nlicense:        GPL\ndescription:    USB HID core driver\nauthor:         Jiri Kosina\nauthor:         Vojtech Pavlik\nauthor:         Andreas Gal\nalias:          usb:v*p*d*dc*dsc*dp*ic03isc*ip*in*\ndepends:        hid,usbcore\nintree:         Y\nvermagic:       3.6-trunk-amd64 SMP mod_unload modversions \nparm:           mousepoll:Polling interval of mice (uint)\nparm:           ignoreled:Autosuspend with active leds (uint)\nparm:           quirks:Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)So, the APC UPS defaults to thehiddriver, which is indeed correct. And its currently using usbfs, which is correct sincenut'susbhid-upsis monitoring it.What about userspace (usbfs) drivers?When the driver isusbfs, it basically means a userspace (non-kernel) program is functioning as the driver. Finding which program it is requires root (unless the program is running as your user) and is fairly easy: whichever program has the device file open.We know that our \"victim\" device is bus 10, device 3. So the device file is/dev/bus/usb/010/003(at least on a modern Debian), andlsofprovides the answer:# lsof /dev/bus/usb/010/003 \nCOMMAND    PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME\nusbhid-up 4951  nut    4u   CHR 189,1154      0t0 8332 /dev/bus/usb/010/003And indeed, itsusbhid-upsas expected (lsof truncated the command name to make the layout fit, if you need the full name, you can useps 4951to get it, or probably some lsof output formatting options).share|improve this answereditedApr 16 at 16:12answeredJan 2 '13 at 13:20derobert33.3k459106&nbsp;&nbsp;&nbsp;I&#39;m definitely gonna loose in my ever going debate with my friend of Windows vs Linux with this one :) . Will give it a few days to see if a simpler solution pops out. Thanks for the effort.&ndash;&nbsp;AlanJan 2 '13 at 13:37&nbsp;&nbsp;&nbsp;@Alan OK, I&#39;ve found two more ways, one of them is quite simple. Also, I&#39;ve clarified which of two possible answers to &quot;which driver?&quot; each method provides.&ndash;&nbsp;derobertJan 2 '13 at 15:48&nbsp;&nbsp;&nbsp;I don&#39;t think your claim about locating the device in&#47;sys&#47;bus&#47;usb&#47;devicesis correct. I have a device on bus 1 thatusb-devicessays is device 12, but there&#39;s no&#47;sys&#47;bus&#47;usb&#47;devices&#47;1-11on my system.&ndash;&nbsp;CerinApr 15 at 19:44&nbsp;&nbsp;&nbsp;@Cerin indeed it isn&#39;t. I&#39;ll put in a better one. Thank you.&ndash;&nbsp;derobertApr 16 at 16:04add a comment&nbsp;|&nbsp;var ados = ados || {}; ados.run = ados.run || [];\r\n                ados.run.push(function () { ados_add_placement(22,0,\"adzerk1142700045\",4).enableDynamicSiteSelection().setZone(30); });up vote3down votelsusbitself can get you good results.  For compact output I uselsusb -t, where-tshows the devices as a tree; this format reports the driver as well.Example output:$ lsusb -t\n/:  Bus 04.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/2p, 5000M\n/:  Bus 03.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/2p, 480M\n/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/3p, 480M\n    |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/8p, 480M\n...If no driver is used, the line will look like this (the device in my example is a camera for which I did remove the driver from the kernel):|__ Port 6: Dev 4, If 1, Class=Video, Driver=, 480Mshare|improve this answeransweredJul 22 '14 at 11:33nert312add a comment&nbsp;|&nbsp;Your AnswerStackExchange.ready(function() {\r\n        initTagRenderer(\"\".split(\" \"), \"\".split(\" \"));\r\n       \r\n        StackExchange.using(\"externalEditor\", function() {\r\n            // Have to fire editor after snippets, if snippets enabled\r\n            if (StackExchange.options.snippets.enabled) {\r\n                StackExchange.using(\"snippets\", function() {\r\n                    createEditor();\r\n                });\r\n            }\r\n            else {\r\n                createEditor();\r\n            }\r\n        });\r\n\r\n        function createEditor() {\r\n            prepareEditor({\r\n                heartbeatType: 'answer',\r\n                bindNavPrevention: true,\r\n                postfix: \"\",\r\n                    onDemand: true,\r\n                    discardSelector: \".discard-answer\"\r\n                ,immediatelyShowMarkdownHelp:true\r\n                });\r\n                \r\n\r\n        }\r\n    });&nbsp;draft saveddraft discardedSign up orlog inStackExchange.ready(function () {\r\n                                StackExchange.helpers.onClickDraftSave('#login-link');\r\n                            });Sign up using GoogleSign up using FacebookSign up using Stack ExchangePost as a guestNameEmailStackExchange.ready(\r\n                    function () {\r\n                        StackExchange.openid.initPostLogin('.new-post-login', 'http%3a%2f%2funix.stackexchange.com%2fquestions%2f60078%2ffind-out-which-modules-are-associated-with-a-usb-device%23new-answer', 'question_page');\r\n                    }\r\n                );Post as a guestNameEmaildiscardBy posting your answer, you agree to theprivacy policyandterms of service.Not the answer you&#39;re looking for?\t\t\t\t\t\t\tBrowse other questions taggeddriverskernel-modulesorask your own question.asked2 years agoviewed8961 timesactive5 months agovar ados = ados || {}; ados.run = ados.run || [];\r\n                ados.run.push(function () { ados_add_placement(22,0,\"adzerk1489894556\",17).enableDynamicSiteSelection().setZone(56016); });Linked0Network Manager Connected - No wifi1How to get the name of USB driver in use in linuxRelated21How to assign USB driver to device0Silicon Wave USB Bluetooth Adapter doesn&#39;t work0Xorg.conf, which modules should be loaded for better performance?2(Solved) Linux cdc_acm device - unexpected characters sent to USB device1How to find out which devices require manually installing a specific driver?1Easiest way to upgrade my onboard NIC drivers on a machine without connectivity?25How to find the driver (module) associated with a device on Linux?0Rmmod module reappeared after plugging back device3Using multiple layer of kernel modules for interfacing a hardware device?1NVIDIA drivers as LKMs in Unix: Module nvidia not foundHot Network QuestionsCan an F1 student working on OPT with a STEM extension earn unrelated self employed income from a foreign employer?Proof on Infinite LimitsIs memory barrier or atomic operation required in a busy-wait loop?Careless smokersBasic Javascript AlgorithmDo pilots really wear &quot;pilot&#39;s watches&quot;?Handwriting is to illegible as drawing is to what?What good are herbivores in an animal army?Why is a cross \u2020 used as footnote marker for people?Why fast eye movement splits a white LED into the RGB components?Why do people recommend copying the entire Canon SD card folder structure?Are any standard function that applys list of predicates on single value until success?Add a vector to a list of vectorsIs there a diplomatic way to explain to a manager that they&#39;re pushing without any leverage?Where did Sulu get the money for the helicopter?When I boil a kettle, what stops all the water from turning (exploding!) in to steam in one go once it reaches 100&#176;C?Elderly man in futuristic city, living different lives in different timesTrack listings to time tablesFour Letter WordIs it possible to camp in a tent in FinlandIs += operation thread safe in JavaRelative Path in MathematicaDraw a progress circle around textPlaying with closure and interior to get the maximum number of setsmore hot questionsquestion feedStackExchange.ready(function(){$.get('/posts/60078/ivc/be12');});tourhelpblogchatdatalegalprivacy policywork hereadvertising infomobilecontact usfeedbackTechnologyLife / ArtsCulture / RecreationScienceOtherStack OverflowServer FaultSuper UserWeb ApplicationsAsk UbuntuWebmastersGame DevelopmentTeX - LaTeXProgrammersUnix &amp; LinuxAsk Different (Apple)WordPress DevelopmentGeographic Information SystemsElectrical EngineeringAndroid EnthusiastsInformation SecurityDatabase AdministratorsDrupal AnswersSharePointUser ExperienceMathematicaSalesforceExpressionEngine&#174; Answersmore (13)PhotographyScience Fiction &amp; FantasyGraphic DesignMovies &amp; TVSeasoned Advice (cooking)Home ImprovementPersonal Finance &amp; MoneyAcademiamore (9)English Language &amp; UsageSkepticsMi Yodeya (Judaism)TravelChristianityArqade (gaming)BicyclesRole-playing Gamesmore (21)MathematicsCross Validated (stats)Theoretical Computer SciencePhysicsMathOverflowChemistryBiologymore (5)Stack AppsMeta Stack ExchangeArea 51Stack Overflow Careerssite design / logo &#169; 2015 Stack Exchange Inc; user contributions licensed undercc by-sa 3.0withattribution requiredrev 2015.9.18.2833Linux is a registered trademark of Linus Torvalds. UNIX is a registered trademark of The Open Group.This site is not affiliated with Linus Torvalds or The Open Group in any way.Unix &amp; Linux Stack Exchange works best with JavaScript enabledvar p = \"http\", d = \"static\"; if (document.location.protocol == \"https:\") { p += \"s\"; d = \"engine\"; } var z = document.createElement(\"script\"); z.type = \"text/javascript\"; z.async = true; z.src = p + \"://\" + d + \".adzerk.net/ados.js\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(z, s);var ados = ados || {};\r\n    ados.run = ados.run || [];\r\n    ados.run.push(function () { ados_setKeywords('drivers,kernel-modules,x-community,x-host-unix.stackexchange.com');; ados_load(); });(function (i, s, o, g, r, a, m) {\r\n            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),\r\n            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);\r\n        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\r\n        ga('create', 'UA-5620270-24', {'cookieDomain': 'stackexchange.com'});\r\n                        ga('set', 'dimension2', '|drivers|kernel-modules|');         ga('send', 'pageview');\r\n        var _qevents = _qevents || [],\r\n            _comscore = _comscore || [];\r\n        (function () {\r\n            var ssl='https:'==document.location.protocol,\r\n                s=document.getElementsByTagName('script')[0],\r\n                qc=document.createElement('script');\r\n            qc.async=true;\r\n            qc.src=(ssl?'https://secure':'http://edge')+'.quantserve.com/quant.js';\r\n            s.parentNode.insertBefore(qc, s);\r\n            var sc=document.createElement('script');\r\n            sc.async=true;\r\n            sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';\r\n            s.parentNode.insertBefore(sc, s);\r\n        })();\r\n        _comscore.push({ c1: \"2\", c2: \"17440561\" });\r\n        _qevents.push({ qacct: \"p-c1rF4kxgLUzNc\" });", "SearchImagesMapsPlayYouTubeGmailDriveCalendarMore&raquo;Sign inwindow._OC_autoDir &&window._OC_autoDir('vheadq', 'tia-vheadq');Advanced Book SearchBooksbooks.google.dk - Learn to design, develop, and validate USB systems with ease, using this valuable resource that provides a detailed bootstrap session on the Linux-USB design and implementation. BOOTSTRAP YOURSELF WITH LINUX-USB STACK offers a tour of the Linux-USB stack,...https://books.google.dk/books/about/Bootstrap_Yourself_with_Linux_USB_Stack.html?id=7YALAAAAQBAJ&amp;utm_source=gb-gplus-shareBootstrap Yourself with Linux-USB Stack:My libraryHelpAdvanced Book SearchGet print bookNo eBook availableCengageBrain.comAmazon.co.ukAmazon.comGADG.dkSaxo.comFind in a libraryAll sellers&nbsp;&raquo;0ReviewsWrite reviewhttps://books.google.dk/books/about/Bootstrap_Yourself_with_Linux_USB_Stack.html?id=7YALAAAAQBAJBootstrap Yourself with Linux-USB Stack:: Design, Develop, Debug, and ...&nbsp;By Rajaram Regupathy&nbsp;if (window['_OC_autoDir']) {_OC_autoDir('search_form_input');}About this bookShop for Books on Google PlayBrowse the world&#39;s largest eBookstore and start reading today on the web, tablet, phone, or ereader.Go to Google Play Now &raquo;_OC_InitNavbar({\"child_node\":[{\"title\":\"My library\",\"url\":\"https://books.google.dk/books?uid=114584440181414684107\\u0026ie=ISO-8859-1\\u0026source=gbs_lp_bookshelf_list\",\"id\":\"my_library\",\"collapsed\":true},{\"title\":\"My History\",\"url\":\"\",\"id\":\"my_history\",\"collapsed\":true},{\"title\":\"Books on Google Play\",\"url\":\"https://play.google.com/store/books\",\"id\":\"ebookstore\",\"collapsed\":true}],\"highlighted_node_id\":\"\"});Pages displayed by permission ofCengage Learning.&nbsp;Copyright.&nbsp;Page 256&nbsp;&nbsp;.imgg { width:575px;height:813px;background:#eee;padding-bottom:25px}&nbsp;Restricted PageYou have reached your viewing limit for this book (why?)._OC_addFlags({LockSrc:\"/books/javascript/lock_75afaa8363765fa60a618e51852ddd27.js\", Host:\"https://books.google.dk/\", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsGiftingEnabled:0, IsWebReaderUniversalPaginatorEnabled:0, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsIframePageDisplayEnabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsPreOrdersEnabled:0, IsDisabledRandomBookshelves:0, WebstoreDisplayCasePosition:3});_OC_Run({\"page\":[{\"pid\":\"PP1\",\"flags\":32,\"order\":0,\"h\":712},{\"pid\":\"PR2\",\"order\":2,\"title\":\"ii\"},{\"pid\":\"PR6\",\"order\":6,\"title\":\"vi\"},{\"pid\":\"PR7\",\"order\":7,\"title\":\"vii\"},{\"pid\":\"PR8\",\"order\":8,\"title\":\"viii\"},{\"pid\":\"PR9\",\"order\":9,\"title\":\"ix\"},{\"pid\":\"PR10\",\"order\":10,\"title\":\"x\"},{\"pid\":\"PR11\",\"order\":11,\"title\":\"xi\"},{\"pid\":\"PR12\",\"order\":12,\"title\":\"xii\"},{\"pid\":\"PR13\",\"order\":13,\"title\":\"xiii\"},{\"pid\":\"PR14\",\"order\":14,\"title\":\"xiv\"},{\"pid\":\"PR15\",\"order\":15,\"title\":\"xv\"},{\"pid\":\"PR16\",\"order\":16,\"title\":\"xvi\"},{\"pid\":\"PA1\",\"order\":17,\"title\":\"1\"},{\"pid\":\"PA2\",\"order\":18,\"title\":\"2\"},{\"pid\":\"PA3\",\"order\":19,\"title\":\"3\"},{\"pid\":\"PA4\",\"order\":20,\"title\":\"4\"},{\"pid\":\"PA5\",\"order\":21,\"title\":\"5\"},{\"pid\":\"PA6\",\"order\":22,\"title\":\"6\"},{\"pid\":\"PA7\",\"order\":23,\"title\":\"7\"},{\"pid\":\"PA8\",\"order\":24,\"title\":\"8\"},{\"pid\":\"PA9\",\"order\":25,\"title\":\"9\"},{\"pid\":\"PA10\",\"order\":26,\"title\":\"10\"},{\"pid\":\"PA11\",\"order\":27,\"title\":\"11\"},{\"pid\":\"PA12\",\"order\":28,\"title\":\"12\"},{\"pid\":\"PA13\",\"order\":29,\"title\":\"13\"},{\"pid\":\"PA14\",\"order\":30,\"title\":\"14\"},{\"pid\":\"PA15\",\"order\":31,\"title\":\"15\"},{\"pid\":\"PA16\",\"order\":32,\"title\":\"16\"},{\"pid\":\"PA17\",\"order\":33,\"title\":\"17\"},{\"pid\":\"PA18\",\"order\":34,\"title\":\"18\"},{\"pid\":\"PA19\",\"order\":35,\"title\":\"19\"},{\"pid\":\"PA20\",\"order\":36,\"title\":\"20\"},{\"pid\":\"PA21\",\"order\":37,\"title\":\"21\"},{\"pid\":\"PA22\",\"order\":38,\"title\":\"22\"},{\"pid\":\"PA23\",\"order\":39,\"title\":\"23\"},{\"pid\":\"PA24\",\"order\":40,\"title\":\"24\"},{\"pid\":\"PA25\",\"order\":41,\"title\":\"25\"},{\"pid\":\"PA26\",\"order\":42,\"title\":\"26\"},{\"pid\":\"PA27\",\"order\":43,\"title\":\"27\"},{\"pid\":\"PA28\",\"order\":44,\"title\":\"28\"},{\"pid\":\"PA29\",\"order\":45,\"title\":\"29\"},{\"pid\":\"PA30\",\"order\":46,\"title\":\"30\"},{\"pid\":\"PA31\",\"order\":47,\"title\":\"31\"},{\"pid\":\"PA32\",\"order\":48,\"title\":\"32\"},{\"pid\":\"PA33\",\"order\":49,\"title\":\"33\"},{\"pid\":\"PA34\",\"order\":50,\"title\":\"34\"},{\"pid\":\"PA35\",\"order\":51,\"title\":\"35\"},{\"pid\":\"PA36\",\"order\":52,\"title\":\"36\"},{\"pid\":\"PA37\",\"order\":53,\"title\":\"37\"},{\"pid\":\"PA38\",\"order\":54,\"title\":\"38\"},{\"pid\":\"PA39\",\"order\":55,\"title\":\"39\"},{\"pid\":\"PA40\",\"order\":56,\"title\":\"40\"},{\"pid\":\"PA41\",\"order\":57,\"title\":\"41\"},{\"pid\":\"PA42\",\"order\":58,\"title\":\"42\"},{\"pid\":\"PA43\",\"order\":59,\"title\":\"43\"},{\"pid\":\"PA44\",\"order\":60,\"title\":\"44\"},{\"pid\":\"PA45\",\"order\":61,\"title\":\"45\"},{\"pid\":\"PA46\",\"order\":62,\"title\":\"46\"},{\"pid\":\"PA47\",\"order\":63,\"title\":\"47\"},{\"pid\":\"PA48\",\"order\":64,\"title\":\"48\"},{\"pid\":\"PA49\",\"order\":65,\"title\":\"49\"},{\"pid\":\"PA50\",\"order\":66,\"title\":\"50\"},{\"pid\":\"PA51\",\"order\":67,\"title\":\"51\"},{\"pid\":\"PA52\",\"order\":68,\"title\":\"52\"},{\"pid\":\"PA53\",\"order\":69,\"title\":\"53\"},{\"pid\":\"PA54\",\"order\":70,\"title\":\"54\"},{\"pid\":\"PA55\",\"order\":71,\"title\":\"55\"},{\"pid\":\"PA56\",\"order\":72,\"title\":\"56\"},{\"pid\":\"PA57\",\"order\":73,\"title\":\"57\"},{\"pid\":\"PA58\",\"order\":74,\"title\":\"58\"},{\"pid\":\"PA59\",\"order\":75,\"title\":\"59\"},{\"pid\":\"PA60\",\"order\":76,\"title\":\"60\"},{\"pid\":\"PA61\",\"order\":77,\"title\":\"61\"},{\"pid\":\"PA62\",\"order\":78,\"title\":\"62\"},{\"pid\":\"PA63\",\"order\":79,\"title\":\"63\"},{\"pid\":\"PA64\",\"order\":80,\"title\":\"64\"},{\"pid\":\"PA65\",\"order\":81,\"title\":\"65\"},{\"pid\":\"PA66\",\"order\":82,\"title\":\"66\"},{\"pid\":\"PA67\",\"order\":83,\"title\":\"67\"},{\"pid\":\"PA68\",\"order\":84,\"title\":\"68\"},{\"pid\":\"PA69\",\"order\":85,\"title\":\"69\"},{\"pid\":\"PA70\",\"order\":86,\"title\":\"70\"},{\"pid\":\"PA71\",\"order\":87,\"title\":\"71\"},{\"pid\":\"PA72\",\"order\":88,\"title\":\"72\"},{\"pid\":\"PA73\",\"order\":89,\"title\":\"73\"},{\"pid\":\"PA74\",\"order\":90,\"title\":\"74\"},{\"pid\":\"PA75\",\"order\":91,\"title\":\"75\"},{\"pid\":\"PA76\",\"order\":92,\"title\":\"76\"},{\"pid\":\"PA77\",\"order\":93,\"title\":\"77\"},{\"pid\":\"PA78\",\"order\":94,\"title\":\"78\"},{\"pid\":\"PA79\",\"order\":95,\"title\":\"79\",\"h\":407},{\"pid\":\"PA80\",\"order\":96,\"title\":\"80\"},{\"pid\":\"PA81\",\"order\":97,\"title\":\"81\",\"h\":407},{\"pid\":\"PA82\",\"order\":98,\"title\":\"82\"},{\"pid\":\"PA83\",\"order\":99,\"title\":\"83\"},{\"pid\":\"PA84\",\"order\":100,\"title\":\"84\"},{\"pid\":\"PA85\",\"order\":101,\"title\":\"85\"},{\"pid\":\"PA86\",\"order\":102,\"title\":\"86\"},{\"pid\":\"PA87\",\"order\":103,\"title\":\"87\"},{\"pid\":\"PA88\",\"order\":104,\"title\":\"88\"},{\"pid\":\"PA89\",\"order\":105,\"title\":\"89\"},{\"pid\":\"PA90\",\"order\":106,\"title\":\"90\"},{\"pid\":\"PA91\",\"order\":107,\"title\":\"91\"},{\"pid\":\"PA92\",\"order\":108,\"title\":\"92\"},{\"pid\":\"PA93\",\"order\":109,\"title\":\"93\"},{\"pid\":\"PA94\",\"order\":110,\"title\":\"94\"},{\"pid\":\"PA95\",\"order\":111,\"title\":\"95\"},{\"pid\":\"PA96\",\"order\":112,\"title\":\"96\"},{\"pid\":\"PA97\",\"order\":113,\"title\":\"97\"},{\"pid\":\"PA98\",\"order\":114,\"title\":\"98\"},{\"pid\":\"PA99\",\"order\":115,\"title\":\"99\"},{\"pid\":\"PA100\",\"order\":116,\"title\":\"100\"},{\"pid\":\"PA101\",\"order\":117,\"title\":\"101\"},{\"pid\":\"PA102\",\"order\":118,\"title\":\"102\"},{\"pid\":\"PA103\",\"order\":119,\"title\":\"103\"},{\"pid\":\"PA104\",\"order\":120,\"title\":\"104\"},{\"pid\":\"PA105\",\"order\":121,\"title\":\"105\"},{\"pid\":\"PA106\",\"order\":122,\"title\":\"106\"},{\"pid\":\"PA107\",\"order\":123,\"title\":\"107\"},{\"pid\":\"PA108\",\"order\":124,\"title\":\"108\"},{\"pid\":\"PA109\",\"order\":125,\"title\":\"109\"},{\"pid\":\"PA110\",\"order\":126,\"title\":\"110\"},{\"pid\":\"PA111\",\"order\":127,\"title\":\"111\"},{\"pid\":\"PA112\",\"order\":128,\"title\":\"112\"},{\"pid\":\"PA113\",\"order\":129,\"title\":\"113\"},{\"pid\":\"PA114\",\"order\":130,\"title\":\"114\"},{\"pid\":\"PA115\",\"order\":131,\"title\":\"115\"},{\"pid\":\"PA116\",\"order\":132,\"title\":\"116\"},{\"pid\":\"PA117\",\"order\":133,\"title\":\"117\"},{\"pid\":\"PA118\",\"order\":134,\"title\":\"118\"},{\"pid\":\"PA119\",\"order\":135,\"title\":\"119\"},{\"pid\":\"PA120\",\"order\":136,\"title\":\"120\"},{\"pid\":\"PA121\",\"order\":137,\"title\":\"121\"},{\"pid\":\"PA122\",\"order\":138,\"title\":\"122\"},{\"pid\":\"PA123\",\"order\":139,\"title\":\"123\"},{\"pid\":\"PA124\",\"order\":140,\"title\":\"124\"},{\"pid\":\"PA125\",\"order\":141,\"title\":\"125\"},{\"pid\":\"PA126\",\"order\":142,\"title\":\"126\"},{\"pid\":\"PA127\",\"order\":143,\"title\":\"127\"},{\"pid\":\"PA128\",\"order\":144,\"title\":\"128\"},{\"pid\":\"PA129\",\"order\":145,\"title\":\"129\"},{\"pid\":\"PA130\",\"order\":146,\"title\":\"130\"},{\"pid\":\"PA131\",\"order\":147,\"title\":\"131\"},{\"pid\":\"PA132\",\"order\":148,\"title\":\"132\"},{\"pid\":\"PA133\",\"order\":149,\"title\":\"133\"},{\"pid\":\"PA134\",\"order\":150,\"title\":\"134\"},{\"pid\":\"PA135\",\"order\":151,\"title\":\"135\"},{\"pid\":\"PA136\",\"order\":152,\"title\":\"136\"},{\"pid\":\"PA137\",\"order\":153,\"title\":\"137\"},{\"pid\":\"PA138\",\"order\":154,\"title\":\"138\"},{\"pid\":\"PA139\",\"order\":155,\"title\":\"139\"},{\"pid\":\"PA140\",\"order\":156,\"title\":\"140\"},{\"pid\":\"PA141\",\"order\":157,\"title\":\"141\"},{\"pid\":\"PA142\",\"order\":158,\"title\":\"142\"},{\"pid\":\"PA143\",\"order\":159,\"title\":\"143\"},{\"pid\":\"PA144\",\"order\":160,\"title\":\"144\"},{\"pid\":\"PA147\",\"order\":163,\"title\":\"147\"},{\"pid\":\"PA148\",\"order\":164,\"title\":\"148\"},{\"pid\":\"PA149\",\"order\":165,\"title\":\"149\"},{\"pid\":\"PA152\",\"order\":168,\"title\":\"152\"},{\"pid\":\"PA153\",\"order\":169,\"title\":\"153\"},{\"pid\":\"PA154\",\"order\":170,\"title\":\"154\"},{\"pid\":\"PA155\",\"order\":171,\"title\":\"155\"},{\"pid\":\"PA156\",\"order\":172,\"title\":\"156\"},{\"pid\":\"PA157\",\"order\":173,\"title\":\"157\"},{\"pid\":\"PA158\",\"order\":174,\"title\":\"158\"},{\"pid\":\"PA160\",\"order\":176,\"title\":\"160\"},{\"pid\":\"PA161\",\"order\":177,\"title\":\"161\"},{\"pid\":\"PA162\",\"order\":178,\"title\":\"162\"},{\"pid\":\"PA163\",\"order\":179,\"title\":\"163\"},{\"pid\":\"PA164\",\"order\":180,\"title\":\"164\"},{\"pid\":\"PA165\",\"order\":181,\"title\":\"165\"},{\"pid\":\"PA166\",\"order\":182,\"title\":\"166\"},{\"pid\":\"PA168\",\"order\":184,\"title\":\"168\"},{\"pid\":\"PA170\",\"order\":186,\"title\":\"170\"},{\"pid\":\"PA171\",\"order\":187,\"title\":\"171\"},{\"pid\":\"PA172\",\"order\":188,\"title\":\"172\"},{\"pid\":\"PA173\",\"order\":189,\"title\":\"173\"},{\"pid\":\"PA174\",\"order\":190,\"title\":\"174\"},{\"pid\":\"PA176\",\"order\":192,\"title\":\"176\"},{\"pid\":\"PA177\",\"order\":193,\"title\":\"177\"},{\"pid\":\"PA178\",\"order\":194,\"title\":\"178\"},{\"pid\":\"PA182\",\"order\":198,\"title\":\"182\"},{\"pid\":\"PA184\",\"order\":200,\"title\":\"184\"},{\"pid\":\"PA186\",\"order\":202,\"title\":\"186\"},{\"pid\":\"PA187\",\"order\":203,\"title\":\"187\"},{\"pid\":\"PA188\",\"order\":204,\"title\":\"188\"},{\"pid\":\"PA189\",\"order\":205,\"title\":\"189\"},{\"pid\":\"PA192\",\"order\":208,\"title\":\"192\"},{\"pid\":\"PA193\",\"order\":209,\"title\":\"193\"},{\"pid\":\"PA194\",\"order\":210,\"title\":\"194\"},{\"pid\":\"PA195\",\"order\":211,\"title\":\"195\"},{\"pid\":\"PA196\",\"order\":212,\"title\":\"196\"},{\"pid\":\"PA197\",\"order\":213,\"title\":\"197\"},{\"pid\":\"PA198\",\"order\":214,\"title\":\"198\"},{\"pid\":\"PA199\",\"order\":215,\"title\":\"199\"},{\"pid\":\"PA200\",\"order\":216,\"title\":\"200\"},{\"pid\":\"PA202\",\"order\":218,\"title\":\"202\"},{\"pid\":\"PA203\",\"order\":219,\"title\":\"203\"},{\"pid\":\"PA204\",\"order\":220,\"title\":\"204\"},{\"pid\":\"PA205\",\"order\":221,\"title\":\"205\"},{\"pid\":\"PA207\",\"order\":223,\"title\":\"207\"},{\"pid\":\"PA208\",\"order\":224,\"title\":\"208\"},{\"pid\":\"PA209\",\"order\":225,\"title\":\"209\"},{\"pid\":\"PA210\",\"order\":226,\"title\":\"210\"},{\"pid\":\"PA211\",\"order\":227,\"title\":\"211\"},{\"pid\":\"PA212\",\"order\":228,\"title\":\"212\"},{\"pid\":\"PA213\",\"order\":229,\"title\":\"213\"},{\"pid\":\"PA214\",\"order\":230,\"title\":\"214\"},{\"pid\":\"PA216\",\"order\":232,\"title\":\"216\"},{\"pid\":\"PA217\",\"order\":233,\"title\":\"217\"},{\"pid\":\"PA219\",\"order\":235,\"title\":\"219\"},{\"pid\":\"PA220\",\"order\":236,\"title\":\"220\"},{\"pid\":\"PA221\",\"order\":237,\"title\":\"221\"},{\"pid\":\"PA222\",\"order\":238,\"title\":\"222\"},{\"pid\":\"PA223\",\"order\":239,\"title\":\"223\"},{\"pid\":\"PA224\",\"order\":240,\"title\":\"224\"},{\"pid\":\"PA227\",\"order\":243,\"title\":\"227\"},{\"pid\":\"PA228\",\"order\":244,\"title\":\"228\"},{\"pid\":\"PA229\",\"order\":245,\"title\":\"229\"},{\"pid\":\"PA230\",\"order\":246,\"title\":\"230\"},{\"pid\":\"PA232\",\"order\":248,\"title\":\"232\"},{\"pid\":\"PA236\",\"order\":252,\"title\":\"236\"},{\"pid\":\"PA237\",\"order\":253,\"title\":\"237\"},{\"pid\":\"PA238\",\"order\":254,\"title\":\"238\"},{\"pid\":\"PA239\",\"order\":255,\"title\":\"239\"},{\"pid\":\"PA240\",\"order\":256,\"title\":\"240\"},{\"pid\":\"PA241\",\"order\":257,\"title\":\"241\"},{\"pid\":\"PA243\",\"order\":259,\"title\":\"243\"},{\"pid\":\"PA246\",\"order\":262,\"title\":\"246\"},{\"pid\":\"PA248\",\"order\":264,\"title\":\"248\"},{\"pid\":\"PA249\",\"order\":265,\"title\":\"249\"},{\"pid\":\"PA250\",\"order\":266,\"title\":\"250\"},{\"pid\":\"PA252\",\"order\":268,\"title\":\"252\"},{\"pid\":\"PA254\",\"order\":270,\"title\":\"254\"},{\"pid\":\"PA255\",\"flags\":8,\"order\":271,\"title\":\"255\"},{\"pid\":\"PA256\",\"flags\":8,\"order\":272,\"title\":\"256\"},{\"pid\":\"PA257\",\"flags\":8,\"order\":273,\"title\":\"257\"},{\"pid\":\"PA258\",\"flags\":8,\"order\":274,\"title\":\"258\"},{\"pid\":\"PA264\",\"order\":280,\"title\":\"264\"},{\"pid\":\"PA268\",\"order\":284,\"title\":\"268\"},{\"pid\":\"PA270\",\"order\":286,\"title\":\"270\"},{\"pid\":\"PA273\",\"order\":289,\"title\":\"273\"},{\"pid\":\"PA275\",\"order\":291,\"title\":\"275\"},{\"pid\":\"PA276\",\"order\":292,\"title\":\"276\"},{\"pid\":\"PA281\",\"order\":297,\"title\":\"281\"},{\"pid\":\"PA282\",\"order\":298,\"title\":\"282\"},{\"pid\":\"PA283\",\"order\":299,\"title\":\"283\"},{\"pid\":\"PA284\",\"order\":300,\"title\":\"284\"},{\"pid\":\"PA286\",\"order\":302,\"title\":\"286\"},{\"pid\":\"PA287\",\"order\":303,\"title\":\"287\"},{\"pid\":\"PA288\",\"order\":304,\"title\":\"288\"},{\"pid\":\"PA289\",\"order\":305,\"title\":\"289\"},{\"pid\":\"PA290\",\"order\":306,\"title\":\"290\"},{\"pid\":\"PA291\",\"order\":307,\"title\":\"291\"},{\"pid\":\"PA293\",\"order\":309,\"title\":\"293\"},{\"pid\":\"PA294\",\"order\":310,\"title\":\"294\"},{\"pid\":\"PA295\",\"order\":311,\"title\":\"295\"},{\"pid\":\"PA296\",\"order\":312,\"title\":\"296\"},{\"pid\":\"PA297\",\"order\":313,\"title\":\"297\"},{\"pid\":\"PA298\",\"order\":314,\"title\":\"298\"},{\"pid\":\"PA299\",\"order\":315,\"title\":\"299\"},{\"pid\":\"PA300\",\"order\":316,\"title\":\"300\"},{\"pid\":\"PA301\",\"order\":317,\"title\":\"301\"},{\"pid\":\"PA302\",\"order\":318,\"title\":\"302\"},{\"pid\":\"PA303\",\"order\":319,\"title\":\"303\"}],\"prefix\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026lpg=PA256\\u0026ots=k4duXTXLa6\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"fullview\":false,\"page_width\":575,\"page_height\":813,\"font_height\":14,\"first_content_page\":17,\"disable_twopage\":true,\"initial_zoom_width_override\":685,\"show_print_pages_button\":false,\"title\":\"Bootstrap Yourself with Linux-USB Stack:\",\"subtitle\":\"Design, Develop, Debug, and Validate Embedded USB\",\"attribution\":\"By Rajaram Regupathy\",\"additional_info\":{\"[JsonBookInfo]\":{\"BuyLinks\":[{\"Seller\":\"CengageBrain.com\",\"Url\":\"http://www.cengage.com/search/totalsearchresults.do?keyword_all=143545832x\\u0026N=0\\u0026image.x=23\\u0026image.y=8\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.cengage.com/search/totalsearchresults.do%3Fkeyword_all%3D143545832x%26N%3D0%26image.x%3D23%26image.y%3D8\\u0026usg=AFQjCNF-VSPtkX2uEUB4CvCZ9b3-giXCWQ\",\"IsPublisher\":true},{\"Seller\":\"Amazon.co.uk\",\"Url\":\"http://www.amazon.co.uk/gp/search?index=books\\u0026linkCode=qs\\u0026keywords=9781435457874\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.amazon.co.uk/gp/search%3Findex%3Dbooks%26linkCode%3Dqs%26keywords%3D9781435457874\\u0026usg=AFQjCNG-fLCmMKTDJfpBfw3Bpsd2zRg9Gw\"},{\"Seller\":\"Amazon.com\",\"Url\":\"http://www.amazon.com/gp/search?index=books\\u0026linkCode=qs\\u0026keywords=9781435457874\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.amazon.com/gp/search%3Findex%3Dbooks%26linkCode%3Dqs%26keywords%3D9781435457874\\u0026usg=AFQjCNHTWk7sVBnO-TaFdQVGZxcdWM1ANA\"},{\"Seller\":\"GAD\",\"Url\":\"http://www.gad.dk/find.asp?find=9781435457874\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.gad.dk/find.asp%3Ffind%3D9781435457874\\u0026usg=AFQjCNGMFPg39VsNa8awHcHVHDk89RMJlA\"},{\"Seller\":\"G.dk\",\"Url\":\"http://www.g.dk/bog/isbn_9781435457874\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.g.dk/bog/isbn_9781435457874\\u0026usg=AFQjCNHkkJObxuFEBdCIQgdY8qeEyLNzag\"},{\"Seller\":\"Saxo.com\",\"Url\":\"http://www.saxo.com/isbn/1435457870\",\"TrackingUrl\":\"/url?client=ca-google-print\\u0026format=googleprint\\u0026num=0\\u0026id=7YALAAAAQBAJ\\u0026q=http://www.saxo.com/isbn/1435457870\\u0026usg=AFQjCNGHaeSFGAeTXERQO97gx5nyJcwmiw\"}],\"AboutUrl\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026ie=ISO-8859-1\",\"PreviewUrl\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\",\"allowed_syndication_flags\":{\"allow_disabling_chrome\":true},\"TocLine\":[{\"Title\":\"Introduction\",\"Pid\":\"PA1\",\"PgNum\":\"1\"},{\"Title\":\"An Overview\",\"Pid\":\"PA13\",\"PgNum\":\"13\"},{\"Title\":\"Chapter 3 Overview of the Linux USB Subsystem\",\"Pid\":\"PA29\",\"PgNum\":\"29\"},{\"Title\":\"USB HOST\",\"Pid\":\"PA49\",\"PgNum\":\"49\"},{\"Title\":\"USB DEVICE\",\"Pid\":\"PA141\",\"PgNum\":\"141\"},{\"Title\":\"USB OTG\",\"Pid\":\"PA199\",\"PgNum\":\"199\"},{\"Title\":\"MISCELLANEOUS LINUX USB SUBSYSTEMS\",\"Pid\":\"PA213\",\"PgNum\":\"213\"},{\"Title\":\"USB Regression Tool\",\"Pid\":\"PA287\",\"PgNum\":\"287\"}]}},\"table_of_contents_page_id\":\"PR6\",\"max_resolution_image_width\":1280,\"max_resolution_image_height\":1809,\"num_toc_pages\":6,\"quality_info\":\"We know this book has good quality.\",\"volume_id\":\"7YALAAAAQBAJ\",\"permission_info\":\"Pages displayed by permission of \\u003ca class=link_aux href=\\\"https://books.google.dk/url?id=7YALAAAAQBAJ\\u0026pg=PA256\\u0026q=http://www.cengage.com\\u0026linkid=1\\u0026usg=AFQjCNEXdJa9cBblQhnx7LXZ4BXwGD_gLA\\u0026source=gbs_pub_info_r\\\"\\u003eCengage Learning\\u003c/a\\u003e\",\"is_ebook\":false,\"volumeresult\":{\"has_flowing_text\":true,\"has_scanned_text\":true,\"can_download_pdf\":false,\"can_download_epub\":false,\"is_pdf_drm_enabled\":false,\"is_epub_drm_enabled\":false},\"rating\":0,\"num_reviews\":0,\"publisher\":\"Cengage Learning\",\"publication_date\":\"2011\",\"subject\":\"Electronic books\",\"num_pages\":320,\"sample_url\":\"https://books.google.dk/books/reader?id=7YALAAAAQBAJ\\u0026ie=ISO-8859-1\\u0026printsec=frontcover\\u0026output=reader\\u0026source=gbs_vpt_hover\",\"synposis\":\"Learn to design, develop, and validate USB systems with ease, using this valuable resource that provides a detailed bootstrap session on the Linux-USB design and implementation. BOOTSTRAP YOURSELF WITH LINUX-USB STACK offers a tour of the Linux-USB stack,\",\"my_library_url\":\"https://www.google.com/accounts/Login?service=print\\u0026continue=https://books.google.dk/books%3Fop%3Dlibrary%26ie%3DISO-8859-1\\u0026hl=en\",\"is_magazine\":false,\"is_public_domain\":false},{\"enableUserFeedbackUI\":true,\"pseudocontinuous\":true,\"asyncAdsEnabled\":true,\"currentVersion\":\"_75afaa8363765fa60a618e51852ddd27\",\"maxPrintablePages\":20,\"enableEmbedding\":true,\"addVol2CollectionBaseUrl\":\"https://books.google.dk/books?op=add\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U1BMKP7qhWkpnghqsa13iFn8xDjOA\\u0026id=7YALAAAAQBAJ\",\"removeVolFromCollectionBaseUrl\":\"https://books.google.dk/books?op=remove\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U01_Y_CPmvZqpX_BdEPpyI2ALB1Mg\\u0026id=7YALAAAAQBAJ\",\"enableFeedbackQuality\":false,\"enableP13n\":true,\"enablePlusOne\":true,\"purchaseHelpUrl\":\"https://support.google.com/googleplay/answer/179845\",\"logged_in\":false,\"p13n_save_user_settings_url\":\"https://books.google.dk/books?op=edit_user_settings\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U0LNj1xDlcCn1zZ1qDkuE-5rLKY2A\",\"is_cobrand\":false,\"sign_in_url\":\"https://www.google.com/accounts/Login?service=print\\u0026continue=https://books.google.dk/books%3Fid%3D7YALAAAAQBAJ%26pg%3DPA256%26lpg%3DPA256%26dq%3Dlinux%2Busb%2Bdevice%2Bdebug%26source%3Dbl%26ots%3Dk4duXTXLa6%26sig%3DINo6CbIY2ugJ2PkNG-2HnPast20%26hl%3Den%26sa%3DX\\u0026hl=en\"},{\"page\":[{\"pid\":\"PA256\",\"highlights\":[{\"X\":47,\"Y\":90,\"W\":35,\"H\":10},{\"X\":296,\"Y\":108,\"W\":36,\"H\":15},{\"X\":353,\"Y\":109,\"W\":26,\"H\":10},{\"X\":437,\"Y\":109,\"W\":35,\"H\":10},{\"X\":144,\"Y\":145,\"W\":26,\"H\":10},{\"X\":383,\"Y\":145,\"W\":26,\"H\":10},{\"X\":238,\"Y\":163,\"W\":26,\"H\":10},{\"X\":124,\"Y\":181,\"W\":35,\"H\":10},{\"X\":164,\"Y\":180,\"W\":36,\"H\":15},{\"X\":310,\"Y\":207,\"W\":35,\"H\":10},{\"X\":503,\"Y\":207,\"W\":26,\"H\":10},{\"X\":344,\"Y\":225,\"W\":26,\"H\":10},{\"X\":47,\"Y\":243,\"W\":35,\"H\":10},{\"X\":68,\"Y\":279,\"W\":35,\"H\":10},{\"X\":214,\"Y\":279,\"W\":26,\"H\":10},{\"X\":434,\"Y\":315,\"W\":36,\"H\":15},{\"X\":117,\"Y\":334,\"W\":35,\"H\":10},{\"X\":157,\"Y\":334,\"W\":26,\"H\":10},{\"X\":48,\"Y\":372,\"W\":43,\"H\":13},{\"X\":47,\"Y\":488,\"W\":26,\"H\":12},{\"X\":362,\"Y\":488,\"W\":26,\"H\":10},{\"X\":121,\"Y\":506,\"W\":26,\"H\":10},{\"X\":104,\"Y\":550,\"W\":26,\"H\":10},{\"X\":286,\"Y\":550,\"W\":26,\"H\":10},{\"X\":68,\"Y\":703,\"W\":26,\"H\":10},{\"X\":117,\"Y\":703,\"W\":35,\"H\":10},{\"X\":220,\"Y\":703,\"W\":26,\"H\":10},{\"X\":381,\"Y\":703,\"W\":26,\"H\":10},{\"X\":489,\"Y\":702,\"W\":37,\"H\":11},{\"X\":345,\"Y\":721,\"W\":26,\"H\":10},{\"X\":495,\"Y\":721,\"W\":35,\"H\":10},{\"X\":248,\"Y\":45,\"W\":30,\"H\":9},{\"X\":283,\"Y\":46,\"W\":21,\"H\":9}],\"flags\":8,\"order\":272,\"vq\":\"linux usb device debug\"}]},null,{\"number_of_results\":85,\"search_results\":[{\"page_id\":\"PP1\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\ndevelop user space USB drivers and \\u003cb\\u003edebug\\u003c/b\\u003e and test \\u003cb\\u003eUSB devices\\u003c/b\\u003e using the \\u003cbr\\u003e\\n\\u003cb\\u003eLinux\\u003c/b\\u003e-U53 framework I The accompanying CD-ROM provides all the sample \\u003cbr\\u003e\\npregrams\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PP1\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PR7\",\"page_number\":\"vii\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nChapter 3 PART I Chapter 4 Chapter 5 Chapter ... 27 Overview of the \\u003cb\\u003eLinux\\u003c/b\\u003e USB \\u003cbr\\u003e\\nSubsystem . . . . . . . . . . . . . . 29 \\u003cb\\u003eLinux\\u003c/b\\u003e USB Host ... 72 \\u003cb\\u003eLinux USB Device\\u003c/b\\u003e File \\u003cbr\\u003e\\nSystem .\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PR7\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PR8\",\"page_number\":\"viii\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nChapter 7 Chapter 8 Chapter 9 ... 90 Setting Up \\u003cb\\u003eLinux\\u003c/b\\u003e-USB Power Management . \\u003cbr\\u003e\\n. . . . . . . . . . . . . . . . . . 96 Summary . ... 119 Developing a \\u003cb\\u003eUSB Device\\u003c/b\\u003e Driver .\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PR8\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PR12\",\"page_number\":\"xii\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nThis book discusses how the \\u003cb\\u003eLinux USB\\u003c/b\\u003e host and \\u003cb\\u003edevice\\u003c/b\\u003e stacks are designed \\u003cbr\\u003e\\nand how different \\u003cb\\u003eLinux USB\\u003c/b\\u003e modules export interfaces to pass on information.\"},{\"page_id\":\"PR13\",\"page_number\":\"xiii\",\"snippet_text\":\"I You will find topics that enhance your understanding of user mode programming \\u003cbr\\u003e\\nof the \\u003cb\\u003eLinux\\u003c/b\\u003e USB framework and easy methods to use it with \\u003cb\\u003eUSB devices\\u003c/b\\u003e. I This \\u003cbr\\u003e\\nbook also explores methods to test and \\u003cb\\u003edebug USB devices\\u003c/b\\u003e using \\u003cb\\u003eLinux\\u003c/b\\u003e USE.\"},{\"page_id\":\"PR14\",\"page_number\":\"xiv\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nChapter 3 ... The \\u003cb\\u003eLinux\\u003c/b\\u003e driver model represents \\u003cb\\u003edevices\\u003c/b\\u003e as VFS files, and the \\u003cbr\\u003e\\n\\u003cb\\u003eLinux USB\\u003c/b\\u003e host subsystem creates VFS files for the \\u003cb\\u003edevices\\u003c/b\\u003e connected to it. \\u003cbr\\u003e\\nChapter 7\\u0026nbsp;...\"},{\"page_id\":\"PA3\",\"page_number\":\"3\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nNote Low speed. \\u003cb\\u003eDevices\\u003c/b\\u003e that do not transfer large amount of data fall into this \\u003cbr\\u003e\\ncategory. These include interactive \\u003cb\\u003edevices\\u003c/b\\u003e such as keyboards and joysticks.\"},{\"page_id\":\"PA8\",\"page_number\":\"8\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... is \\u003cbr\\u003e\\nNET 2280 PCI to Hi&#8212;Speed \\u003cb\\u003eUSB\\u003c/b\\u003e, O O NAND Flash NOR Flash SRAM Compact \\u003cbr\\u003e\\nFlash/CF ATA \\u003cb\\u003eDevice\\u003c/b\\u003e Low-Power ... Chapter 1 I \\u003cb\\u003eUSB\\u003c/b\\u003e and \\u003cb\\u003eLinux\\u003c/b\\u003e: Introduction.\"},{\"page_id\":\"PA9\",\"page_number\":\"9\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\n\\u003cb\\u003eLinux\\u003c/b\\u003e has a stable USB host stack and device drivers for most of the \\u003cb\\u003eUSB devices\\u003c/b\\u003e\\u003cbr\\u003e\\n, enabling end users to connect their \\u003cb\\u003eUSB devices\\u003c/b\\u003e to a \\u003cb\\u003eLinux\\u003c/b\\u003e&#8212;based PC. Later\\u0026nbsp;...\"},{\"page_id\":\"PA15\",\"page_number\":\"15\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nUSB SYSTEM ARDHITEDTURE A USB system can be divided into three major \\u003cbr\\u003e\\nareas: the \\u003cb\\u003eUSB device\\u003c/b\\u003e, the USB host, and the USB interconnect. The \\u003cb\\u003eUSB device\\u003c/b\\u003e\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA16\",\"page_number\":\"16\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. and \\u003cbr\\u003e\\nthe \\u003cb\\u003eUSB device\\u003c/b\\u003e. These layers establish a logical connection between these \\u003cbr\\u003e\\nlayers across the host and the device through the pipes at the functional level \\u003cbr\\u003e\\nand\\u0026nbsp;...\"},{\"page_id\":\"PA18\",\"page_number\":\"18\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\n\\u003cb\\u003eUSB Device\\u003c/b\\u003e A \\u003cb\\u003eUSB device\\u003c/b\\u003e to an end user provides additional capability, such as \\u003cbr\\u003e\\nWeb camera or printer, to a host computer through a USB interface. In fact, a USB\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA19\",\"page_number\":\"19\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nfunction layer\\u0026#39;s data is ... The function layer decides the config&#8212; uration of the \\u003cbr\\u003e\\n\\u003cb\\u003eUSB device\\u003c/b\\u003e that is passed on to the USB host through the layers below. The \\u003cbr\\u003e\\nfunctional\\u0026nbsp;...\"},{\"page_id\":\"PA21\",\"page_number\":\"21\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nClient Software Communication Flows \\u003cb\\u003eUSB\\u003c/b\\u003e Logical \\u003cb\\u003eDevice\\u003c/b\\u003e EndPOImS Interface \\u003cbr\\u003e\\nFigure 2.6 \\u003cb\\u003eUSB\\u003c/b\\u003e communication flow illustrating the endpoint, pipe, and client\\u0026nbsp;...\"},{\"page_id\":\"PA22\",\"page_number\":\"22\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. 4. \\u003cbr\\u003e\\nAfter a successful reset, the \\u003cb\\u003eUSB device\\u003c/b\\u003e is in a default state and can draw power \\u003cbr\\u003e\\nto a range of 100 mA from VBUS pin. 5. Once the device is in a default state, the\\u0026nbsp;...\"},{\"page_id\":\"PA30\",\"page_number\":\"30\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nTable 3.1 \\u003cb\\u003eLinux\\u003c/b\\u003e USB ... The \\u003cb\\u003eUSB device\\u003c/b\\u003e part of the class implementation and the \\u003cbr\\u003e\\nrelated framework are also available in this folder. Otg Contains source code that\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA36\",\"page_number\":\"36\",\"snippet_text\":\"\\u0026lt;H\\u0026gt; USB Mass Storage support _ v [ 1 USB Mass Storage verbose \\u003cb\\u003edebug\\u003c/b\\u003e \\u0026lt;H\\u0026gt; \\u003cbr\\u003e\\nDatafao Compact Flash Reader support ... Mass Storage Class The \\u003cb\\u003eUSB Device\\u003c/b\\u003e \\u003cbr\\u003e\\nWorking Group defines the class specification for storage devices such as flash\\u0026nbsp;...\"},{\"page_id\":\"PA38\",\"page_number\":\"38\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nSerial Class The serial class provides a driver for \\u003cb\\u003eUSB\\u003c/b\\u003e-to-serial converters and \\u003cbr\\u003e\\nfor \\u003cb\\u003edevices\\u003c/b\\u003e that use a serial interface from user space to interact with the \\u003cb\\u003edevices\\u003c/b\\u003e.\"},{\"page_id\":\"PA39\",\"page_number\":\"39\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. *m\\u0026#39; \\u003cbr\\u003e\\n\\u003cb\\u003eUSB DEViCE\\u003c/b\\u003e CLGSS ... Sometimes you need to add serial console support to \\u003cbr\\u003e\\nyour device to emulate a terminal console over serial port. The following option\\u0026nbsp;...\"},{\"page_id\":\"PA40\",\"page_number\":\"40\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u0026quot;\\u003cbr\\u003e\\nCDC Ethernet support (smart \\u003cb\\u003edevices\\u003c/b\\u003e such as cable modems)\\u0026quot; depends on \\u003cbr\\u003e\\n\\u003cb\\u003eUSB_USBNET\\u003c/b\\u003e Miscellaneous Host Drivers The \\u003cb\\u003eLinux USB\\u003c/b\\u003e host subsystem \\u003cbr\\u003e\\nprovides\\u0026nbsp;...\"},{\"page_id\":\"PA41\",\"page_number\":\"41\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\ndepends on USB default y Power Management A USB host system can suspend \\u003cbr\\u003e\\nthe \\u003cb\\u003eUSB devices\\u003c/b\\u003e when the bus has no activity. The \\u003cb\\u003eLinux\\u003c/b\\u003e USB host system \\u003cbr\\u003e\\nprovides\\u0026nbsp;...\"},{\"page_id\":\"PA42\",\"page_number\":\"42\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\n\\u003cb\\u003eLinux\\u003c/b\\u003e Platform USB Gadget Driver Class Driver Hardware Kernal Infrastructure \\u003cbr\\u003e\\nGadget Driver \\u003cb\\u003eUSB Device\\u003c/b\\u003e Controller Hardware Platform Hardware (PCI) USB\\u0026nbsp;...\"},{\"page_id\":\"PA43\",\"page_number\":\"43\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nThe first step in configuring the gadget driver framework is to select the driver for \\u003cbr\\u003e\\nthe \\u003cb\\u003edevice\\u003c/b\\u003e controller that the platform supports. ... \\u003cb\\u003eLinux USB\\u003c/b\\u003e Gadget Subsystem \\u003cbr\\u003e\\n43.\"},{\"page_id\":\"PA44\",\"page_number\":\"44\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. E\\u0026#39;iu \\u003cbr\\u003e\\nso: ... Selecting this menu option sets the \\u003cb\\u003eUSB device\\u003c/b\\u003e controller driver for the \\u003cbr\\u003e\\nplatform-supported controller. ... Chapter 3 I Overview of the \\u003cb\\u003eLinux\\u003c/b\\u003e USB \\u003cbr\\u003e\\nSubsystem.\"},{\"page_id\":\"PA45\",\"page_number\":\"45\",\"snippet_text\":\"Certain \\u003cb\\u003eUSB device\\u003c/b\\u003e controller drivers use the PROC_FS to export \\u003cb\\u003edebug\\u003c/b\\u003e \\u003cbr\\u003e\\ninformation to the user for \\u003cb\\u003edebugging\\u003c/b\\u003e purposes. If your device controller driver \\u003cbr\\u003e\\nuses a PROC_FS-based \\u003cb\\u003edebug\\u003c/b\\u003e solution, try the following option. config\\u0026nbsp;...\"},{\"page_id\":\"PA53\",\"page_number\":\"53\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nDevice Management As part of device management, the \\u003cb\\u003eLinux\\u003c/b\\u003e USB subsystem \\u003cbr\\u003e\\nimplements functionalities that help manage \\u003cb\\u003eUSB devices\\u003c/b\\u003e connected to the host.\"},{\"page_id\":\"PA55\",\"page_number\":\"55\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nSUMMARY The \\u003cb\\u003eUSB\\u003c/b\\u003e host system software stack is complex compared to the \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e counterpart, because \\u003cb\\u003eUSB\\u003c/b\\u003e is a host&#8212;driven system. This chapter \\u003cbr\\u003e\\nprovided a\\u0026nbsp;...\"},{\"page_id\":\"PA57\",\"page_number\":\"57\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nCHAPTER. 5. \\u003cb\\u003eUSB\\u003c/b\\u003e. \\u003cb\\u003eDEVICE\\u003c/b\\u003e. NOTIFICATION. In This Chapter I Bootstrap: Notifier \\u003cbr\\u003e\\nChain I \\u003cb\\u003eLinux USB\\u003c/b\\u003e Notification Request-reply (synchronous) and polling methods\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA58\",\"page_number\":\"58\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nThis chapter focuses on how the \\u003cb\\u003eLinux\\u003c/b\\u003e USB subsystem passes on information \\u003cbr\\u003e\\nwith notifier chains to indicate addition or removal of a \\u003cb\\u003eUSB device\\u003c/b\\u003e. The first part \\u003cbr\\u003e\\nof\\u0026nbsp;...\"},{\"page_id\":\"PA61\",\"page_number\":\"61\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nManagement Handler |_I_I | I I I I Register Unregister Notify Notify Notify Notify \\u003cbr\\u003e\\n\\u003cb\\u003eUSB USB\\u003c/b\\u003e Add Remove Add Remove Notify Notify \\u003cb\\u003eDevice Device\\u003c/b\\u003e Bus Bus Figure \\u003cbr\\u003e\\n5.1\\u0026nbsp;...\"},{\"page_id\":\"PA63\",\"page_number\":\"63\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... In \\u003cbr\\u003e\\nthe \\u003cb\\u003eLinux USB\\u003c/b\\u003e subsystem, the subscribers of these events are \\u003cb\\u003edevice\\u003c/b\\u003e file system, \\u003cbr\\u003e\\nclass file system, and \\u003cb\\u003eUSB\\u003c/b\\u003e monitor modules. More detail on how the modules\\u0026nbsp;...\"},{\"page_id\":\"PA64\",\"page_number\":\"64\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nSubscribers I _ \\u003cb\\u003edevice\\u003c/b\\u003e class I \\u003cb\\u003eusb_generic\\u003c/b\\u003e \\u0026lt;\\u0026lt;\\u0026#39;nle\\u0026quot;_l\\u0026quot;_ice_\\u0026gt;\\u0026gt; file \\u003cb\\u003edevice\\u003c/b\\u003e usbmon I \\u003cbr\\u003e\\n\\u003cb\\u003eusb\\u003c/b\\u003e-notification System subsystem I I . . . . I i i i i i I Subscribe to USBInotification \\u003cbr\\u003e\\nI I I\\u0026nbsp;...\"},{\"page_id\":\"PA65\",\"page_number\":\"65\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. I \\u003cbr\\u003e\\nSubscribers I I I \\u003cb\\u003edevice\\u003c/b\\u003e class I \\u003cb\\u003eusb\\u003c/b\\u003e-generic \\u0026lt;\\u0026lt;\\u0026#39;\\u0026quot;\\u0026#39;er_\\u0026#39;?\uc9f8e_\\u0026gt;\\u0026gt; file \\u003cb\\u003edEVice\\u003c/b\\u003e usbmon I \\u003cbr\\u003e\\n\\u003cb\\u003eusb\\u003c/b\\u003e-notification Sys\\u0026#39;em subsystem : . . . ; . . : i : Removal of a \\u003cb\\u003eUSB\\u003c/b\\u003e deviceI from the\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA66\",\"page_number\":\"66\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nSubscribers \\u003cb\\u003eusb\\u003c/b\\u003e-generic \\u0026lt;\\u0026lt;inte rface\\u0026gt;\\u0026gt; \\u003cb\\u003eusb\\u003c/b\\u003e-notification \\u003cb\\u003edevice\\u003c/b\\u003e file system class \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e subsystem usbmon I I WIIIen the subscription for notification to be \\u003cbr\\u003e\\nremoved\\u0026nbsp;...\"},{\"page_id\":\"PA68\",\"page_number\":\"68\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. /* * \\u003cbr\\u003e\\nRemove the notifier ... When a \\u003cb\\u003eUSB device\\u003c/b\\u003e is attached to the kernel, the USB \\u003cbr\\u003e\\nsubsystem receives the information. It then uses usb_noti f y_add_devi ce to call \\u003cbr\\u003e\\nthe\\u0026nbsp;...\"},{\"page_id\":\"PA69\",\"page_number\":\"69\",\"snippet_text\":\"Add a \\u003cb\\u003eUSB device\\u003c/b\\u003e to the computer to see a \\u003cb\\u003eUSB device\\u003c/b\\u003e added \\u003cb\\u003edebug\\u003c/b\\u003e message. \\u003cbr\\u003e\\nSUMMARY Although the USB notification framework is a simple part of the usbco \\u003cbr\\u003e\\nre, it is vital to pass on USB events. The USB notification module effectively uses\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA71\",\"page_number\":\"71\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nCHAPTER. 6. DEVlcE. FILE. SYSTEM. In This Chapter I Bootstrap Essentials: \\u003cbr\\u003e\\nVirtual File System I \\u003cb\\u003eLinux USB Device\\u003c/b\\u003e File System I Creating the \\u003cb\\u003eLinux\\u003c/b\\u003e USB File\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA76\",\"page_number\":\"76\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. The \\u003cbr\\u003e\\nun regi ster_f i l es ys ... \\u003cb\\u003eLINUX\\u003c/b\\u003e USB DEV|c:E FILE SYSTEM The \\u003cb\\u003eLinux USB\\u003c/b\\u003e \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e file system framework is part of the usbcore module. Its key functionality is \\u003cbr\\u003e\\nto\\u0026nbsp;...\"},{\"page_id\":\"PA77\",\"page_number\":\"77\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\n\\u003cb\\u003eLinux USB Device\\u003c/b\\u003e File ... The following section explores key functions and the \\u003cbr\\u003e\\nsequence of activity in the \\u003cb\\u003eLinux USB device\\u003c/b\\u003e file framework. The \\u003cb\\u003eLinux USB\\u003c/b\\u003e \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e file\\u0026nbsp;...\"},{\"page_id\":\"PA78\",\"page_number\":\"78\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nDuring initialization, the framework registers with the USB notification to get \\u003cbr\\u003e\\nevents when new USB bus and \\u003cb\\u003eUSB devices\\u003c/b\\u003e are added to the system. The \\u003cbr\\u003e\\nusbfs_nb\\u0026nbsp;...\"},{\"page_id\":\"PA80\",\"page_number\":\"80\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. The \\u003cbr\\u003e\\n\\u003cb\\u003eUSB\\u003c/b\\u003e VFS framework creates a special \\u003cb\\u003edevices\\u003c/b\\u003e file in the root directory of the usbf \\u003cbr\\u003e\\ns mount path. Figure 6.4 captures the set of activities in the \\u003cb\\u003edevices\\u003c/b\\u003e file life\\u0026nbsp;...\"},{\"page_id\":\"PA85\",\"page_number\":\"85\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nThe USB specification defines power management methodologies for both uni&#8212; \\u003cbr\\u003e\\nversal serial bus (\\u003cb\\u003eUSB\\u003c/b\\u003e) \\u003cb\\u003edevices\\u003c/b\\u003e and the USB host. A \\u003cb\\u003eUSB device\\u003c/b\\u003e saves power by\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA92\",\"page_number\":\"92\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nusb_dev_poweroff, .restore = usb_dev_restore, I; The \\u003cb\\u003eUSB\\u003c/b\\u003e power management \\u003cbr\\u003e\\nframework supports the automatic suspend and resume feature of idle \\u003cb\\u003edevices\\u003c/b\\u003e.\"},{\"page_id\":\"PA95\",\"page_number\":\"95\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\n\\u003cb\\u003eUSB Device\\u003c/b\\u003e Hub Driver USB Host Generic power PM usbcore Management Core \\u003cbr\\u003e\\nUSB sysfs Class Driver User Space Figure 7.4 L sb_port_resum I 4 \\u003cbr\\u003e\\nusb_disable__\\u0026nbsp;...\"},{\"page_id\":\"PA96\",\"page_number\":\"96\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nactivity, the suspend operation powers down the host controllers using host \\u003cbr\\u003e\\ncontroller driver power management operations along with the \\u003cb\\u003eUSB\\u003c/b\\u003e connected \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e.\"},{\"page_id\":\"PA97\",\"page_number\":\"97\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. I \\u003cbr\\u003e\\nlevel. This file indicates ... When the file contains \\u0026quot;on\\u0026quot;, it indicates that the \\u003cb\\u003edevice\\u003c/b\\u003e \\u003cbr\\u003e\\nshould be resumed and further auto suspend is not allowed. The other value auto\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA102\",\"page_number\":\"102\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nRoot Hub Compound \\u003cb\\u003eDevice Device Device Device Device\\u003c/b\\u003e I I I \\u003cb\\u003eDevice\\u003c/b\\u003e I I Figure \\u003cbr\\u003e\\n8.1 A \\u003cb\\u003eUSB\\u003c/b\\u003e host, hub, and \\u003cb\\u003edevice\\u003c/b\\u003e relationship at the physical level. (REF Figure 5-\\u003cbr\\u003e\\n5\\u0026nbsp;...\"},{\"page_id\":\"PA105\",\"page_number\":\"105\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nstate. The function receives the new state and pointer to the \\u003cb\\u003edevice\\u003c/b\\u003e for which the \\u003cbr\\u003e\\nstate has to be applied. You must perform the state change with lock protection \\u003cbr\\u003e\\nany\\u0026nbsp;...\"},{\"page_id\":\"PA107\",\"page_number\":\"107\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nAnother important feature often used at the application level is the \\u003cb\\u003eUSB device\\u003c/b\\u003e \\u003cbr\\u003e\\nreset, which is managed in the hub framework. ... \\u003cb\\u003eLinux\\u003c/b\\u003e USB Hub Framework 107\\u003cbr\\u003e\\n.\"},{\"page_id\":\"PA110\",\"page_number\":\"110\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nhubithread ... SUMMARY The hub is one of the key functionalities in the USB \\u003cbr\\u003e\\ntopology, providing the electrical interface between a \\u003cb\\u003eUSB device\\u003c/b\\u003e and a USB \\u003cbr\\u003e\\nhost.\"},{\"page_id\":\"PA112\",\"page_number\":\"112\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. [ \\u003cbr\\u003e\\n\\u003cb\\u003eUSB Device\\u003c/b\\u003e Drivers J A V I sbcore- ene \\u0026#39;c I\\u0026lt;&#8212;\\u0026gt; u g n Others 1\\u0026#39; (Power, usbcore v \\u003cbr\\u003e\\nDevice File I Host Controller Driver Interface SyStem) A V [ Host Controller Driver\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA113\",\"page_number\":\"113\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. The \\u003cbr\\u003e\\nprobe routine of the struct usb_device_driver identifies whether a particular driver \\u003cbr\\u003e\\nis ready to associate and manage a \\u003cb\\u003eUSB device\\u003c/b\\u003e. The routine returns 0 on\\u0026nbsp;...\"},{\"page_id\":\"PA117\",\"page_number\":\"117\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nThis method registers a \\u003cb\\u003eUSB device\\u003c/b\\u003e driver with the USB core. This method \\u003cbr\\u003e\\nreturns 0 when successful and a negative value on failure.\"},{\"page_id\":\"PA120\",\"page_number\":\"120\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nusbcoregenenc URB Management Interface Driver \\u003cb\\u003eUSB Device\\u003c/b\\u003e Roufines \\u003cbr\\u003e\\nManagement Management Figure 9.2 A simple breakdown of the usbcore-\\u003cbr\\u003e\\ngeneric\\u0026nbsp;...\"},{\"page_id\":\"PA124\",\"page_number\":\"124\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nNote Don\\u0026#39;t sleep ... DEVELOPING A USB DEVIOE DRIVER Many \\u003cb\\u003eUSB device\\u003c/b\\u003e \\u003cbr\\u003e\\ndriver implementations are available in the \\u003cb\\u003eLinux\\u003c/b\\u003e USB framework. The usbfs, \\u003cbr\\u003e\\nusbtest\\u0026nbsp;...\"},{\"page_id\":\"PA127\",\"page_number\":\"127\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. All \\u003cbr\\u003e\\nother callback methods of the struct usb_dri ver are optional and specific to the \\u003cbr\\u003e\\nfunctionality and the \\u003cb\\u003edevice\\u003c/b\\u003e they support. SUMMARY The \\u003cb\\u003eLinux USB\\u003c/b\\u003e\\u0026nbsp;...\"},{\"page_id\":\"PA141\",\"page_number\":\"141\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nPARTII USB DEVIOE This page intentionally left blank CHAPTER 11 \\u003cb\\u003eLINUX\\u003c/b\\u003e USB \\u003cbr\\u003e\\nGADSET. PART II: \\u003cb\\u003eUSB DEVICE\\u003c/b\\u003e.\"},{\"page_id\":\"PA143\",\"page_number\":\"143\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... In \\u003cbr\\u003e\\nThis Chapter I Overview of \\u003cb\\u003eUSB Device\\u003c/b\\u003e Stack Architecture I Overview of \\u003cb\\u003eLinux\\u003c/b\\u003e \\u003cbr\\u003e\\nUSB Gadget Driver Architecture The universal serial bus (USB) host&#8212;device\\u0026nbsp;...\"},{\"page_id\":\"PA144\",\"page_number\":\"144\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. 1. l. \\u003cbr\\u003e\\n1. \\u003cb\\u003eUSB Device\\u003c/b\\u003e Controller Figure 11.1 A generic \\u003cb\\u003eUSB device\\u003c/b\\u003e software architecture\\u003cbr\\u003e\\n. Figure 11.1 illustrates a typical USB software stack architecture. It consists of\\u0026nbsp;...\"},{\"page_id\":\"PA147\",\"page_number\":\"147\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nSUMMARY The \\u003cb\\u003eLinux\\u003c/b\\u003e USB gadget subsystem is a simple three&#8212;layer \\u003cbr\\u003e\\narchitecture imple&#8212; menting the \\u003cb\\u003eUSB device\\u003c/b\\u003e specification. This chapter provided \\u003cbr\\u003e\\na brief\\u0026nbsp;...\"},{\"page_id\":\"PA149\",\"page_number\":\"149\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... In \\u003cbr\\u003e\\nThis Chapter I Bootstrap Essentials: Platform Driver I \\u003cb\\u003eLinux\\u003c/b\\u003e USB Peripheral \\u003cbr\\u003e\\nController Driver I \\u003cb\\u003eUSB Device\\u003c/b\\u003e Controller Driver On the \\u003cb\\u003eLinux\\u003c/b\\u003e USB gadget \\u003cbr\\u003e\\nsubsystem\\u0026nbsp;...\"},{\"page_id\":\"PA153\",\"page_number\":\"153\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nThe PDC driver contains four major functionalities: platform initialization/exit, \\u003cb\\u003eUSB\\u003c/b\\u003e \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e controller setup, device controller management, and interrupt\\u0026nbsp;...\"},{\"page_id\":\"PA155\",\"page_number\":\"155\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nGrab Remap and set up memory space the memory Set up the controller \\u003cbr\\u003e\\nRegister the interrupt handler Register the gadget driver Create \\u003cb\\u003edevice\\u003c/b\\u003e files \\u003cbr\\u003e\\nFigure 12.3\\u0026nbsp;...\"},{\"page_id\":\"PA162\",\"page_number\":\"162\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\ndriver relies on four major data structures: struct usb_gadget to represent a \\u003cbr\\u003e\\ngadget \\u003cb\\u003edevice\\u003c/b\\u003e, struct \\u003cb\\u003eusb_ep\\u003c/b\\u003e to manage the \\u003cb\\u003edevice\\u003c/b\\u003e hardware, struct \\u003cbr\\u003e\\nusb_gadget_driver\\u0026nbsp;...\"},{\"page_id\":\"PA211\",\"page_number\":\"211\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nYou can further ... the Targeted Peripherals List in drivers/\\u003cb\\u003eusb\\u003c/b\\u003e/core/0tg_whitelist.h \\u003cbr\\u003e\\nto ensure that the \\u003cb\\u003eLinux USB\\u003c/b\\u003e framework allows the \\u003cb\\u003edevice\\u003c/b\\u003e you\\u0026#39;re interested in.\"},{\"page_id\":\"PA217\",\"page_number\":\"217\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nUsing usbfs, a key VFS file of the \\u003cb\\u003eLinux\\u003c/b\\u003e USB subsystem, usbcore exports \\u003cb\\u003eUSB\\u003c/b\\u003e \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e access to the user space. In the subsequent sections, you will learn about \\u003cbr\\u003e\\nthe\\u0026nbsp;...\"},{\"page_id\":\"PA220\",\"page_number\":\"220\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\npacket size of 512 bytes. It is a bulk ... To better present information in the \\u003cb\\u003edevices\\u003c/b\\u003e \\u003cbr\\u003e\\nfile to the user, interactive applications are available on \\u003cb\\u003eLinux\\u003c/b\\u003e. There is a \\u003cbr\\u003e\\ngraphical\\u0026nbsp;...\"},{\"page_id\":\"PA222\",\"page_number\":\"222\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. \\u003cbr\\u003e\\nFrom the output, you can infer that the thumb drive is assigned with \\u003cb\\u003edevice\\u003c/b\\u003e \\u003cbr\\u003e\\nnumber 2 and is connected to port 3 of the \\u003cb\\u003eUSB\\u003c/b\\u003e with bus number 7. The output \\u003cbr\\u003e\\nalso\\u0026nbsp;...\"},{\"page_id\":\"PA232\",\"page_number\":\"232\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nThe host side of the \\u003cb\\u003eLinux\\u003c/b\\u003e USB framework exports different files to the sysfs and /\\u003cbr\\u003e\\nproc file systems that enable you to control a \\u003cb\\u003eUSB device\\u003c/b\\u003e from the user space.\"},{\"page_id\":\"PA238\",\"page_number\":\"238\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nThe usb_open API returns a handle to the device of interest. ... A \\u003cb\\u003eUSB device\\u003c/b\\u003e can \\u003cbr\\u003e\\nhave multiple functionalities, as indicated through the configuration descriptor.\"},{\"page_id\":\"PA240\",\"page_number\":\"240\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\nTable 17.4 Miscellaneous Operations Operation Description \\u003cb\\u003eLinux\\u003c/b\\u003e associates a \\u003cbr\\u003e\\ndriver for each interface of the \\u003cb\\u003eUSB device\\u003c/b\\u003e. This is informative at the user level to\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA243\",\"page_number\":\"243\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nUSB USER MDDE DRIVER USINS UID When \\u003cb\\u003eUSB devices\\u003c/b\\u003e are developed for \\u003cbr\\u003e\\nproducts, you must develop drivers based on the \\u003cb\\u003eLinux\\u003c/b\\u003e-USB framework.\"},{\"page_id\":\"PA256\",\"page_number\":\"256\",\"snippet_text\":\"To \\u003cb\\u003edebug\\u003c/b\\u003e a USB system, \\u003cb\\u003eLinux\\u003c/b\\u003e uses the traditional ASCII text printing method, \\u003cbr\\u003e\\nwhich provides limited user&#8212;readable ... Data Display USB Sniffer \\u003cb\\u003eUSB Device\\u003c/b\\u003e \\u003cbr\\u003e\\nFigure 256 Chapter 18 I \\u003cb\\u003eDebugging\\u003c/b\\u003e Using \\u003cb\\u003eLinux\\u003c/b\\u003e USB USB Monitor: usbmon.\"},{\"page_id\":\"PA257\",\"page_number\":\"257\",\"snippet_text\":\"USB Host USB-Sniffed Data Display USB Sniffer \\u003cb\\u003eUSB Device\\u003c/b\\u003e Figure 18.1 A \\u003cbr\\u003e\\ntypical USB analyzer setup. and subsequently explores how to use it to capture \\u003cbr\\u003e\\nUSB packets for \\u003cb\\u003edebugging\\u003c/b\\u003e any USB system. USB monitor, or usbmon, is the \\u003cbr\\u003e\\n\\u003cb\\u003eLinux\\u003c/b\\u003e\\u0026nbsp;...\"},{\"page_id\":\"PA258\",\"page_number\":\"258\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nLegend: [*1 built in I I excluded \\u0026lt;Ha module c \\u0026gt; \\u003cb\\u003eUSB device\\u003c/b\\u003e class&#8212;devices \\u003cbr\\u003e\\nIDFPRECATED) Dynamic USB minor allocation USB selective suspend/resume \\u003cbr\\u003e\\nand\\u0026nbsp;...\"},{\"page_id\":\"PA273\",\"page_number\":\"273\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\n\\u003cb\\u003edebug\\u003c/b\\u003e messages USB announce new devices *** Miscellaneous USB options *** \\u003cbr\\u003e\\nUSB deuice tilesysten \\u003cb\\u003eUSB device\\u003c/b\\u003e class-devices lDEPRECATED} Dynamic USB\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA275\",\"page_number\":\"275\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy ... \\u003cbr\\u003e\\nTesting a universal serial bus (USB) system involves various stages of evaluation \\u003cbr\\u003e\\nand different characteristics of a \\u003cb\\u003eUSB device\\u003c/b\\u003e. Following are a few recommended\\u003cbr\\u003e\\n\\u0026nbsp;...\"},{\"page_id\":\"PA276\",\"page_number\":\"276\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. \\u003cbr\\u003e\\navailable on \\u003cb\\u003eLinux\\u003c/b\\u003e to evaluate a USB host and a \\u003cb\\u003eUSB device\\u003c/b\\u003e. Subsequently, it \\u003cbr\\u003e\\nexplores how to use the \\u003cb\\u003eLinux\\u003c/b\\u003e USB test module to evaluate a USB system. \\u003cbr\\u003e\\nAnother\\u0026nbsp;...\"},{\"page_id\":\"PA281\",\"page_number\":\"281\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy. I \\u003cbr\\u003e\\nprotocol . To specify ... To specify the \\u003cb\\u003eUSB\\u003c/b\\u003e release number of the storage \\u003cb\\u003edevice\\u003c/b\\u003e \\u003cbr\\u003e\\nthat is stored in the bcdDevi ce field of the \\u003cb\\u003edevice\\u003c/b\\u003e descriptor. I serial. To specify \\u003cbr\\u003e\\nthe\\u0026nbsp;...\"},{\"page_id\":\"PA284\",\"page_number\":\"284\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\nHID (Human Interface \\u003cb\\u003eDevices\\u003c/b\\u003e) \\u003cb\\u003eUSB\\u003c/b\\u003e Gadget The \\u003cb\\u003eUSB\\u003c/b\\u003e-IF defines the \\u003cbr\\u003e\\nrequirements of \\u003cb\\u003eUSB\\u003c/b\\u003e HID \\u003cb\\u003edevices\\u003c/b\\u003e and is available at http://www.\\u003cb\\u003eusb\\u003c/b\\u003e.org/\\u003cbr\\u003e\\ndevelopers/hidpage/,\\u0026nbsp;...\"},{\"page_id\":\"PA290\",\"page_number\":\"290\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded USB Rajaram Regupathy. I int \\u003cbr\\u003e\\nwrite_usb_bulk(int busid,int devid, int ep, char* data, int size, int timeout); This \\u003cbr\\u003e\\nscript function transfers bulk data to the \\u003cb\\u003eUSB device\\u003c/b\\u003e specified by the busid and\\u0026nbsp;...\"},{\"page_id\":\"PA296\",\"page_number\":\"296\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\n226 wakeup, 96 file systems debugfs, 261, 266 \\u003cb\\u003edevices\\u003c/b\\u003e, 71&#8212;84 gadgetfs files, \\u003cbr\\u003e\\n229-231 \\u003cb\\u003eLinux USB\\u003c/b\\u003e host subsystems, 40&#8212;41 s ysf s tree, 224-227 unregistering,\\u003cbr\\u003e\\n\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PA296\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PA298\",\"page_number\":\"298\",\"snippet_text\":\"IRQs (interrupt requests), 130, 150 isochronous transactions, 131 transfers, 25 \\u003cbr\\u003e\\nISP1301 modules, enabling, 211 J&#8212;K Iungo, 9 Kconfig option, 254 kernels \\u003cbr\\u003e\\nconfiguration, 230 \\u003cb\\u003edebugging\\u003c/b\\u003e, 255 \\u003cb\\u003edevice\\u003c/b\\u003e class kernel configuration, 46 \\u003cbr\\u003e\\ndownloading,\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PA298\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PA299\",\"page_number\":\"299\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\n58 handlers, 61 simple \\u003cb\\u003eUSB\\u003c/b\\u003e notificationsubscribers, writing, 65&#8212;69 suspension, \\u003cbr\\u003e\\n168 \\u003cb\\u003eUSB\\u003c/b\\u003e (universal serial bus) \\u003cb\\u003edevices\\u003c/b\\u003e, 57&#8212;69 notifier chains, 58&#8212;61 numdesc\\u003cbr\\u003e\\n\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PA299\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PA301\",\"page_number\":\"301\",\"snippet_text\":\"Design, Develop, \\u003cb\\u003eDebug\\u003c/b\\u003e, and Validate Embedded \\u003cb\\u003eUSB\\u003c/b\\u003e Rajaram Regupathy ... \\u003cbr\\u003e\\n55, 130&#8212;139 hosts, 13&#8212;14, 16-18 drivers, 52&#8212;56 enumeration, 197 verbose \\u003cbr\\u003e\\n\\u003cb\\u003edebugging\\u003c/b\\u003e, 272&#8212;273 hubs, 54, 101&#8212;110 interfaces, 6 \\u003cb\\u003eLinux\\u003c/b\\u003e, 9&#8212;ll logical \\u003cb\\u003edevice\\u003c/b\\u003e\\u003cbr\\u003e\\n,\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=7YALAAAAQBAJ\\u0026pg=PA301\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"}],\"search_query_escaped\":\"linux usb device debug\"},{});var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-18010-1']);_gaq.push(['_trackPageview']);(function() {var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();", "Search:<!--// Initialize search form\nvar f = document.getElementById('searchform');\nf.getElementsByTagName('label')[0].style.display = 'none';\nvar e = document.getElementById('searchinput');\nsearchChange(e);\nsearchBlur(e);\n//-->LoginCaptureSetup/USBFrontPageRecentChangesFindPageHelpContentsCaptureSetup/USBImmutable PageCommentsInfoAttachmentsMore Actions:Raw TextPrint ViewRender as DocbookDelete Cache------------------------Check SpellingLike PagesLocal Site Map------------------------Rename PageDelete Page------------------------Subscribe User------------------------Remove SpamRevert to this revisionPackage PagesSync Pages------------------------LoadSaveSlideShow<!--// Init menu\nactionsMenuInit('More Actions:');\n//-->USB capture setupThis page is about capturing raw USB traffic, e.g. the packets a USB mouse will generate on the Universal Serial Bus.Table of contentsContentsUSB capture setupTable of contentsUSB attached network interfacesLinuxWindowsDiscussionSee AlsoUSB attached network interfacesA special case are network interfaces connected to a host computer through an USB cable. The operating system \"converts\" the raw USB packets into the network traffic (e.g. Ethernet packets) and provides a network interface that looks like an ordinary network interface. So you can capture from:the USB device for raw USB traffic (if supported)the network device for \"normal\" network packetsThe USB bus will add additional overhead, so the raw USB traffic will have higher volume than the network traffic, even if the only active USB devices on the system are network adapters.  (If there are other active USB devices, the raw USB traffic will include traffic to and from those devices, so it will obviously have higher volume than Ethernet traffic.)LinuxTo dump USB traffic on Linux, you need the usbmon module, which has existed since Linux 2.6.11. Information on that module is available in/usr/src/linux/Documentation/usb/usbmon.txtin the Linux source tree.  Depending on the distribution you're using, and the version of that distribution, that module might be built into the kernel, or might be a loadable module; if it's a loadable module, depending on the distribution you're using, and the version of that distribtuion, it might or might not be loaded for you.  If it's a loadable module, and not loaded, you will have to load it with the commandmodprobe&nbsp;usbmonwhich must be run as root.libpcap releases prior to 1.0 do not include USB support, so you will need at least libpcap 1.0.0.For versions of the kernel prior to 2.6.21, the only USB traffic capture mechanism available is a text-based mechanism that limits the total amount of data captured for each raw USB block to about 30 bytes. There is no way to change this without patching the kernel.  If debugfs is not already mounted on/sys/kernel/debug, ensure that it is mounted there by issuing the following command as root:mount&nbsp;-t&nbsp;debugfs&nbsp;/&nbsp;/sys/kernel/debugFor kernel version 2.6.21 and later, there is a binary protocol for tracing USB packets which doesn't have that size limitation.  For that kernel version, you will need libpcap 1.1.0 or newer, because the libpcap 1.0.x USB support uses, but does not correctly handle, the memory-mapped mechanism for USB traffic, which libpcap will use if available - it cannot be made unavailable, so libpcap will always use it.In libpcap 1.0.x, the devices for capturing on USB have the nameusbn, wherenis the number of the bus.  In libpcap 1.1.0 and later, they have the nameusbmonn.You will also need a Wireshark 1.2.x or newer.WindowsYou can capture raw USB traffic on Windows withUSBPcap. TheToolspage lists some other options for Windows USB capture.You can also capture and debug USB traffic on a virtual Windows machine under VirtualBox. In some ways this is more convenient than working with a separate Windows box.In this example, an embedded Linux device running g_ether (RNDIS ethernet gadget) connects to Windows. e.g. an NSLU2 with a USB slave modificationhttp://www.nslu2-linux.org/wiki/HowTo/AddDeviceSideUSBPortbut it should work for almost any USB device.With this method, Linux recognises the USB device (i.e. &gt;lsusb will still show them), but VirtualBox hooks it into Windows but  Wireshark on linux  still gets to snoop on all the packets.Steps:1. Install a VirtualBox Windows guest on your Linux host.  Start up the virtual Windows session.2. Plug-in the embedded slave device via a USB cable, which itself should be either a device Windows already knows about (or in this case it was running a valid  g_ether gadget stack and needed a .inf file)3. Run &gt;lsusb and take a note of which bus the device connects.e.g\"Bus 003 Device 003: ID 0525:a4a2 Netchip Technology, Inc. Linux-USB Ethernet/RNDIS Gadget\"4. On linux side,run  &gt;ifconfig usb0 down          - this prevents both the linux system and the windows system from fighting over the device5. On the Windows virtual machine, on VirtualBox  menus  click the checkbox[Devices]-&gt;Usb devices&gt;[x]Your deviceto let windows see the USB device.6. Now Windows should recognise the device and proceed with the \"plug-and-pray\" session for driver initialisation.I worked from the instructions onhttp://docwiki.gumstix.org/index.php/Windows_XP_usbnetto install the driver.7. In this example, I had to set up the networking options for IP address, Gateway etc on Windows to match the IP network on the gadget but for other USB device types there will be no extra setup.  In any case this is just normal Windows behavior.8. On Linux, startup Wireshark and using the Bus number given earlier from   &gt;lsusb   command to sniff for packets.Hints for developing something like a Windows native \"USBPcap\": akernel mode filter device driverhas to be written. An olderDriver Development Kit (DDK)is available which at least can compile kernel mode binaries. The most important functions to install the filter driver areCreateService()andSetupDiSetDeviceRegistryProperty()function with SPDRP_LOWERFILTERS parameter.DiscussionWhy was the note about inaccurate time stamps removed?!? -UlfLampingThe timestamps should be ok now since libpcap worksaround the issue by explicitly calling gettimeofday()- ronnieWell, the inaccuracies I had in mind was about the \"delta\" involved between the data is received from the USB device and actually timestamped from the kernel. This delta will be substantially lower for e.g. PCI based nic's than for USB ones - and should be mentioned. Or am I just wrong on this topic and this can be ignored - which should be mentioned then too? -UlfLampingThere's \"capturing on USB-attached networking interfaces\" and there's \"capturing USB traffic\"; this page is for the latter, but it sounds as if the time stamp delta is an issue for the former. -Guy HarrisSee AlsoCapturing on Ethernet NetworksCapturing on 802.11 Wireless NetworksCapturing on Token Ring NetworksCapturing on VLAN Protected NetworksCapturing on PPP NetworksCapturing on the Loopback DeviceCapturing on Frame Relay NetworksCapturing DOCSIS TrafficCapturing Bluetooth TrafficCapturing on ATM NetworksCapturing IrDA TrafficCapturing on Cisco HDLC NetworksCapturing SS7 TrafficCategoryHowToCaptureSetup/USB  (last edited 2013-03-21 20:07:39 byGeraldCombs)Immutable PageCommentsInfoAttachmentsMore Actions:Raw TextPrint ViewRender as DocbookDelete Cache------------------------Check SpellingLike PagesLocal Site Map------------------------Rename PageDelete Page------------------------Subscribe User------------------------Remove SpamRevert to this revisionPackage PagesSync Pages------------------------LoadSaveSlideShow<!--// Init menu\nactionsMenuInit('More Actions:');\n//-->Original content on this site is available under the GNU General Public License.See theLicensepage for details.Powered byMoinMoinandPython.Please don't pee in the pool.Google Analyticsvar _gaq = _gaq || [];\n  _gaq.push(['_setAccount', 'UA-605389-3']);\n  _gaq.push(['_trackPageview']);\n\n  (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n  })();/ Google Analytics", "SearchImagesMapsPlayYouTubeGmailDriveCalendarMore&raquo;Sign inwindow._OC_autoDir &&window._OC_autoDir('vheadq', 'tia-vheadq');Advanced Book SearchBooksbooks.google.dk -  Debugging Linux Systems discusses the main tools available today to debug 2.6 Linux Kernels. We start by exploring the seemingly esoteric operations of the Kernel Debugger (KDB), Kernel GNU DeBugger (KGDB), the plain GNU DeBugger (GDB), and JTAG debuggers. We then investigate Kernel Probes, a feature...https://books.google.dk/books/about/Debugging_Linux_Systems_Digital_Short_Cu.html?id=QByBaZUk83AC&amp;utm_source=gb-gplus-shareDebugging Linux Systems (Digital Short Cut)My libraryHelpAdvanced Book SearchBuy eBook - DKK42.44Get this book in printAmazon.co.ukAmazon.comGADG.dkSaxo.comFind in a libraryAll sellers&nbsp;&raquo;0ReviewsWrite reviewhttps://books.google.dk/books/about/Debugging_Linux_Systems_Digital_Short_Cu.html?id=QByBaZUk83ACDebugging Linux Systems (Digital Short Cut)&nbsp;By Sreekrishnan Venkateswaran&nbsp;if (window['_OC_autoDir']) {_OC_autoDir('search_form_input');}About this book_OC_InitNavbar({\"child_node\":[{\"title\":\"My library\",\"url\":\"https://books.google.dk/books?uid=114584440181414684107\\u0026ie=ISO-8859-1\\u0026source=gbs_lp_bookshelf_list\",\"id\":\"my_library\",\"collapsed\":true},{\"title\":\"My History\",\"url\":\"\",\"id\":\"my_history\",\"collapsed\":true},{\"title\":\"Books on Google Play\",\"url\":\"https://play.google.com/store/books\",\"id\":\"ebookstore\",\"collapsed\":true}],\"highlighted_node_id\":\"\"});Terms&nbsp;of&nbsp;ServicePages displayed by permission ofPearson Education.&nbsp;Copyright.&nbsp;Pages&nbsp;&nbsp;.imgg { width:575px;height:766px;background:#eee;padding-bottom:25px}&nbsp;Restricted PageYou have reached your viewing limit for this book (why?)._OC_addFlags({LockSrc:\"/books/javascript/lock_75afaa8363765fa60a618e51852ddd27.js\", Host:\"https://books.google.dk/\", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsGiftingEnabled:0, IsWebReaderUniversalPaginatorEnabled:0, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsIframePageDisplayEnabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsPreOrdersEnabled:0, IsDisabledRandomBookshelves:0, WebstoreDisplayCasePosition:3});_OC_Run({\"page\":[{\"pid\":\"PP1\",\"flags\":32,\"order\":0},{\"pid\":\"PT5\",\"order\":5},{\"pid\":\"PT6\",\"order\":6},{\"pid\":\"PT7\",\"order\":7},{\"pid\":\"PT8\",\"order\":8},{\"pid\":\"PT9\",\"order\":9},{\"pid\":\"PT10\",\"order\":10},{\"pid\":\"PT11\",\"order\":11},{\"pid\":\"PT12\",\"order\":12},{\"pid\":\"PT13\",\"order\":13},{\"pid\":\"PT14\",\"order\":14},{\"pid\":\"PT15\",\"order\":15},{\"pid\":\"PT16\",\"order\":16},{\"pid\":\"PT17\",\"order\":17},{\"pid\":\"PT18\",\"order\":18},{\"pid\":\"PT19\",\"order\":19},{\"pid\":\"PT20\",\"order\":20},{\"pid\":\"PT21\",\"order\":21},{\"pid\":\"PT22\",\"order\":22},{\"pid\":\"PT23\",\"order\":23},{\"pid\":\"PT24\",\"order\":24},{\"pid\":\"PT25\",\"order\":25},{\"pid\":\"PT26\",\"order\":26},{\"pid\":\"PT27\",\"order\":27},{\"pid\":\"PT28\",\"order\":28},{\"pid\":\"PT29\",\"order\":29},{\"pid\":\"PT30\",\"order\":30},{\"pid\":\"PT31\",\"order\":31},{\"pid\":\"PT32\",\"order\":32},{\"pid\":\"PT33\",\"order\":33},{\"pid\":\"PT34\",\"order\":34},{\"pid\":\"PT35\",\"order\":35},{\"pid\":\"PT36\",\"order\":36},{\"pid\":\"PT37\",\"order\":37},{\"pid\":\"PT38\",\"order\":38},{\"pid\":\"PT39\",\"order\":39},{\"pid\":\"PT40\",\"order\":40},{\"pid\":\"PT41\",\"order\":41},{\"pid\":\"PT42\",\"order\":42},{\"pid\":\"PT43\",\"order\":43},{\"pid\":\"PT44\",\"order\":44},{\"pid\":\"PT45\",\"order\":45},{\"pid\":\"PT46\",\"order\":46},{\"pid\":\"PT47\",\"order\":47},{\"pid\":\"PT48\",\"order\":48},{\"pid\":\"PT49\",\"order\":49},{\"pid\":\"PT50\",\"order\":50},{\"pid\":\"PT51\",\"order\":51},{\"pid\":\"PT52\",\"order\":52},{\"pid\":\"PT53\",\"order\":53},{\"pid\":\"PT54\",\"order\":54},{\"pid\":\"PT55\",\"order\":55},{\"pid\":\"PT56\",\"order\":56},{\"pid\":\"PT57\",\"order\":57},{\"pid\":\"PT58\",\"order\":58},{\"pid\":\"PT59\",\"order\":59},{\"pid\":\"PT60\",\"order\":60},{\"pid\":\"PT61\",\"order\":61},{\"pid\":\"PT62\",\"order\":62},{\"pid\":\"PT63\",\"order\":63},{\"pid\":\"PT64\",\"order\":64},{\"pid\":\"PT65\",\"order\":65},{\"pid\":\"PT66\",\"order\":66},{\"pid\":\"PT68\",\"order\":68},{\"pid\":\"PT69\",\"order\":69},{\"pid\":\"PT70\",\"order\":70},{\"pid\":\"PT71\",\"order\":71},{\"pid\":\"PT72\",\"order\":72},{\"pid\":\"PT73\",\"order\":73},{\"pid\":\"PT74\",\"order\":74},{\"pid\":\"PT75\",\"order\":75},{\"pid\":\"PT76\",\"order\":76},{\"pid\":\"PT78\",\"order\":78},{\"pid\":\"PT80\",\"order\":80},{\"pid\":\"PT82\",\"order\":82},{\"pid\":\"PT83\",\"order\":83},{\"pid\":\"PT84\",\"order\":84},{\"pid\":\"PT85\",\"order\":85},{\"pid\":\"PT88\",\"order\":88},{\"pid\":\"PT89\",\"order\":89},{\"pid\":\"PT90\",\"order\":90},{\"pid\":\"PT91\",\"order\":91},{\"pid\":\"PT94\",\"order\":94},{\"pid\":\"PT95\",\"order\":95},{\"pid\":\"PT96\",\"order\":96},{\"pid\":\"PT98\",\"order\":98},{\"pid\":\"PT99\",\"order\":99},{\"pid\":\"PT100\",\"order\":100},{\"pid\":\"PT102\",\"order\":102},{\"pid\":\"PT103\",\"flags\":8,\"order\":103},{\"pid\":\"PT104\",\"flags\":8,\"order\":104},{\"pid\":\"PT108\",\"order\":108},{\"pid\":\"PT109\",\"order\":109},{\"pid\":\"PT110\",\"order\":110},{\"pid\":\"PT111\",\"order\":111},{\"pid\":\"PT114\",\"order\":114},{\"pid\":\"PT115\",\"order\":115},{\"pid\":\"PT117\",\"order\":117},{\"pid\":\"PT119\",\"order\":119},{\"pid\":\"PT121\",\"order\":121},{\"pid\":\"PT122\",\"order\":122},{\"pid\":\"PT123\",\"order\":123},{\"pid\":\"PT125\",\"order\":125},{\"pid\":\"PT126\",\"order\":126},{\"pid\":\"PT127\",\"order\":127},{\"pid\":\"PT128\",\"order\":128},{\"pid\":\"PT129\",\"order\":129},{\"pid\":\"PT130\",\"order\":130}],\"prefix\":\"https://books.google.dk/books?id=QByBaZUk83AC\\u0026lpg=PT104\\u0026ots=r3QRP1GTx2\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"fullview\":false,\"page_width\":575,\"page_height\":766,\"font_height\":17,\"first_content_page\":9,\"disable_twopage\":true,\"initial_zoom_width_override\":685,\"show_print_pages_button\":false,\"title\":\"Debugging Linux Systems (Digital Short Cut)\",\"subtitle\":\"\",\"attribution\":\"By Sreekrishnan Venkateswaran\",\"additional_info\":{\"[JsonBookInfo]\":{\"BuyLinks\":[{\"Seller\":\"Amazon.co.uk\",\"Url\":\"http://www.amazon.co.uk/gp/search?index=books\\u0026linkCode=qs\\u0026keywords=9780131380974\",\"TrackingUrl\":\"/url?client=ca-print-pearson_education_default\\u0026format=googleprint\\u0026num=0\\u0026id=QByBaZUk83AC\\u0026q=http://www.amazon.co.uk/gp/search%3Findex%3Dbooks%26linkCode%3Dqs%26keywords%3D9780131380974\\u0026usg=AFQjCNG-tPo_fY2-YWYm3fEwsu2ret9lTw\"},{\"Seller\":\"Amazon.com\",\"Url\":\"http://www.amazon.com/gp/search?index=books\\u0026linkCode=qs\\u0026keywords=9780131380974\",\"TrackingUrl\":\"/url?client=ca-print-pearson_education_default\\u0026format=googleprint\\u0026num=0\\u0026id=QByBaZUk83AC\\u0026q=http://www.amazon.com/gp/search%3Findex%3Dbooks%26linkCode%3Dqs%26keywords%3D9780131380974\\u0026usg=AFQjCNEveJZEZ6iEjCICnwFmESN6k-R2pw\"},{\"Seller\":\"GAD\",\"Url\":\"http://www.gad.dk/find.asp?find=9780131380974\",\"TrackingUrl\":\"/url?client=ca-print-pearson_education_default\\u0026format=googleprint\\u0026num=0\\u0026id=QByBaZUk83AC\\u0026q=http://www.gad.dk/find.asp%3Ffind%3D9780131380974\\u0026usg=AFQjCNHSguZnDn365UXozXrVPIeEIRAFUQ\"},{\"Seller\":\"G.dk\",\"Url\":\"http://www.g.dk/bog/isbn_9780131380974\",\"TrackingUrl\":\"/url?client=ca-print-pearson_education_default\\u0026format=googleprint\\u0026num=0\\u0026id=QByBaZUk83AC\\u0026q=http://www.g.dk/bog/isbn_9780131380974\\u0026usg=AFQjCNF_ptB7OAlsr8DR31TGs1COJ3J6mA\"},{\"Seller\":\"Saxo.com\",\"Url\":\"http://www.saxo.com/isbn/0131380974\",\"TrackingUrl\":\"/url?client=ca-print-pearson_education_default\\u0026format=googleprint\\u0026num=0\\u0026id=QByBaZUk83AC\\u0026q=http://www.saxo.com/isbn/0131380974\\u0026usg=AFQjCNG-uVaf5a7RukjxkcAoH4X1X9uuTw\"}],\"AboutUrl\":\"https://books.google.dk/books?id=QByBaZUk83AC\\u0026ie=ISO-8859-1\",\"PreviewUrl\":\"https://books.google.dk/books?id=QByBaZUk83AC\",\"allowed_syndication_flags\":{\"allow_disabling_chrome\":true},\"online_access\":{\"url\":\"https://play.google.com/store/books/details?id=QByBaZUk83AC\\u0026rdid=book-QByBaZUk83AC\\u0026rdot=1\",\"price\":\"DKK42.44\",\"list_price\":\"DKK62.41\"},\"TocLine\":[{\"Title\":\"Product Description\",\"Pid\":\"PT9\",\"PgNum\":\"\"},{\"Title\":\"Kernel Version\",\"Pid\":\"PT13\",\"PgNum\":\"\"},{\"Title\":\"Book Website\",\"Pid\":\"PT16\",\"PgNum\":\"\"},{\"Title\":\"Conventions Used\",\"Pid\":\"PT19\",\"PgNum\":\"\"},{\"Title\":\"Dedication\",\"Pid\":\"PT23\",\"PgNum\":\"\"},{\"Title\":\"Section 1 Kernel Debuggers\",\"Pid\":\"PT26\",\"PgNum\":\"\"},{\"Title\":\"Section 2 Kernel Probes\",\"Pid\":\"PT46\",\"PgNum\":\"\"},{\"Title\":\"Section 3 Kexec and Kdump\",\"Pid\":\"PT65\",\"PgNum\":\"\"},{\"Title\":\"Section 4 Profiling\",\"Pid\":\"PT80\",\"PgNum\":\"\"},{\"Title\":\"Section 5 Tracing\",\"Pid\":\"PT88\",\"PgNum\":\"\"},{\"Title\":\"Section 6 Debugging Embedded Linux\",\"Pid\":\"PT96\",\"PgNum\":\"\"},{\"Title\":\"Section 7 Debugging Network Throughput\",\"Pid\":\"PT115\",\"PgNum\":\"\"},{\"Title\":\"Section 8 Linux Test Project\",\"Pid\":\"PT121\",\"PgNum\":\"\"},{\"Title\":\"Section 9 User Mode Linux\",\"Pid\":\"PT124\",\"PgNum\":\"\"},{\"Title\":\"Section 10 Diagnostic Tools\",\"Pid\":\"PT127\",\"PgNum\":\"\"},{\"Title\":\"Section 11 Kernel Hacking Config Options\",\"Pid\":\"PT130\",\"PgNum\":\"\"}]}},\"table_of_contents_page_id\":\"PT6\",\"max_resolution_image_width\":1280,\"max_resolution_image_height\":1705,\"num_toc_pages\":1,\"quality_info\":\"We know this book has good quality.\",\"volume_id\":\"QByBaZUk83AC\",\"permission_info\":\"Pages displayed by permission of \\u003ca class=link_aux href=\\\"https://books.google.dk/url?id=QByBaZUk83AC\\u0026pg=PT104\\u0026q=http://www.mypearsonstore.com/index.asp\\u0026clientid=ca-print-pearson_education_default\\u0026linkid=1\\u0026usg=AFQjCNHVsyHUIsdkhq_yGBLrxZYJkuE4yA\\u0026source=gbs_pub_info_r\\\"\\u003ePearson Education\\u003c/a\\u003e\",\"is_ebook\":true,\"volumeresult\":{\"has_flowing_text\":true,\"has_scanned_text\":true,\"can_download_pdf\":false,\"can_download_epub\":false,\"is_pdf_drm_enabled\":false,\"is_epub_drm_enabled\":false},\"rating\":0,\"num_reviews\":0,\"publisher\":\"Pearson Education\",\"publication_date\":\"2009.11.03\",\"subject\":\"Computers\",\"num_pages\":91,\"sample_url\":\"https://books.google.dk/books/reader?id=QByBaZUk83AC\\u0026ie=ISO-8859-1\\u0026printsec=frontcover\\u0026output=reader\\u0026source=gbs_vpt_hover\",\"synposis\":\" Debugging Linux Systems discusses the main tools available today to debug 2.6 Linux Kernels. We start by exploring the seemingly esoteric operations of the Kernel Debugger (KDB), Kernel GNU DeBugger (KGDB), the plain GNU DeBugger (GDB), and JTAG debuggers. We then investigate Kernel Probes, a feature that lets you intrude into a kernel function and extract debug information or apply a medicated patch. Analyzing a crash dump can yield clues for postmortem analysis of kernel crashes or hangs, so we take a look at Kdump, a serviceability tool that collects a system dump after spawning a new kernel. Profiling points you to code regions that burn more CPU cycles, so we learn to use the OProfile kernel profiler and the gprof application profiler to sense the presence of code bottlenecks. Because tracing provides insight into behavioral problems that manifest during interactions between different code modules, we delve into the Linux Trace Toolkit, a system designed for high-volume trace capture. \u00a0 The section &#8220;Debugging Embedded Linux&#8221; takes a tour of the I/O interfaces commonly found on embedded hardware, such as flash memory, serial port, PCMCIA, Secure Digital media, USB, RTC, audio, video, touch screen, and Bluetooth, and provides pointers to debug the associated device drivers. We also pick up some board-level debugging skills with the help of a case study. The section &#8220;Debugging Network Throughput&#8221; takes you through some device driver design issues and protocol implementation characteristics that can affect the horsepower of your network interface card. We end the shortcut by examining several options available in the kernel configuration menu that can emit valuable debug information.\",\"my_library_url\":\"https://www.google.com/accounts/Login?service=print\\u0026continue=https://books.google.dk/books%3Fop%3Dlibrary%26ie%3DISO-8859-1\\u0026hl=en\",\"is_magazine\":false,\"is_public_domain\":false},{\"enableUserFeedbackUI\":true,\"pseudocontinuous\":true,\"asyncAdsEnabled\":true,\"currentVersion\":\"_75afaa8363765fa60a618e51852ddd27\",\"maxPrintablePages\":20,\"enableEmbedding\":true,\"addVol2CollectionBaseUrl\":\"https://books.google.dk/books?op=add\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U17aNX-jr-ee9AbyX3nuhsiXPj_jg\\u0026id=QByBaZUk83AC\",\"removeVolFromCollectionBaseUrl\":\"https://books.google.dk/books?op=remove\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U2CCLAqs-Gb_7oQj0MHRpqG3ycSBg\\u0026id=QByBaZUk83AC\",\"enableFeedbackQuality\":false,\"enableP13n\":true,\"enablePlusOne\":true,\"purchaseHelpUrl\":\"https://support.google.com/googleplay/answer/179845\",\"show_buy_bubble\":true,\"logged_in\":false,\"p13n_save_user_settings_url\":\"https://books.google.dk/books?op=edit_user_settings\\u0026ie=ISO-8859-1\\u0026sig=ACfU3U05l7GAnuTPZ3RPANOZuztVT0nGCw\",\"is_cobrand\":false,\"sign_in_url\":\"https://www.google.com/accounts/Login?service=print\\u0026continue=https://books.google.dk/books%3Fid%3DQByBaZUk83AC%26pg%3DPT104%26lpg%3DPT104%26dq%3Dlinux%2Busb%2Bdevice%2Bdebug%26source%3Dbl%26ots%3Dr3QRP1GTx2%26sig%3DmjVPBKS06JteK422pJ4Td6Bw4Rw%26hl%3Den%26sa%3DX\\u0026hl=en\"},{\"page\":[{\"pid\":\"PT104\",\"highlights\":[{\"X\":108,\"Y\":38,\"W\":34,\"H\":18},{\"X\":146,\"Y\":38,\"W\":46,\"H\":18},{\"X\":165,\"Y\":60,\"W\":34,\"H\":18},{\"X\":60,\"Y\":113,\"W\":36,\"H\":18},{\"X\":102,\"Y\":113,\"W\":25,\"H\":18},{\"X\":98,\"Y\":135,\"W\":34,\"H\":18},{\"X\":137,\"Y\":135,\"W\":46,\"H\":18},{\"X\":83,\"Y\":157,\"W\":36,\"H\":18},{\"X\":125,\"Y\":157,\"W\":25,\"H\":18},{\"X\":202,\"Y\":179,\"W\":36,\"H\":18},{\"X\":244,\"Y\":179,\"W\":25,\"H\":18},{\"X\":441,\"Y\":179,\"W\":34,\"H\":18},{\"X\":185,\"Y\":232,\"W\":42,\"H\":18},{\"X\":233,\"Y\":232,\"W\":34,\"H\":18},{\"X\":383,\"Y\":232,\"W\":36,\"H\":18},{\"X\":425,\"Y\":232,\"W\":25,\"H\":18},{\"X\":191,\"Y\":254,\"W\":34,\"H\":18},{\"X\":272,\"Y\":276,\"W\":25,\"H\":18},{\"X\":221,\"Y\":649,\"W\":49,\"H\":18},{\"X\":440,\"Y\":671,\"W\":47,\"H\":18},{\"X\":240,\"Y\":693,\"W\":49,\"H\":18}],\"flags\":8,\"order\":104,\"vq\":\"linux usb device debug\"}]},null,{\"number_of_results\":5,\"search_results\":[{\"page_id\":\"PT9\",\"snippet_text\":\"\\u003cb\\u003eDebugging Linux\\u003c/b\\u003e Systems discusses the main tools available today to \\u003cb\\u003edebug\\u003c/b\\u003e 2.6 \\u003cbr\\u003e\\n\\u003cb\\u003eLinux\\u003c/b\\u003e Kernels. ... the I/O interfaces commonly found on embedded hardware, \\u003cbr\\u003e\\nsuch as flash memory, serial port, PCMCIA, Secure Digital media, \\u003cb\\u003eUSB\\u003c/b\\u003e, RTC, \\u003cbr\\u003e\\naudio, video, touch ... The section &#8220;\\u003cb\\u003eDebugging\\u003c/b\\u003e Network Throughput&#8221; takes you \\u003cbr\\u003e\\nthrough some \\u003cb\\u003edevice\\u003c/b\\u003e driver design issues and protocol implementation \\u003cbr\\u003e\\ncharacteristics that\\u0026nbsp;...\",\"page_url\":\"https://books.google.dk/books?id=QByBaZUk83AC\\u0026pg=PT9\\u0026dq=linux+usb+device+debug\\u0026ie=ISO-8859-1\"},{\"page_id\":\"PT96\",\"snippet_text\":\"\\u003cb\\u003eDebugging\\u003c/b\\u003e. Embedded. \\u003cb\\u003eLinux\\u003c/b\\u003e. From a \\u003cb\\u003edevice\\u003c/b\\u003e driver perspective, embedded \\u003cbr\\u003e\\nsoftware developers often face interfaces not ... Universal Serial Bus (\\u003cb\\u003eUSB\\u003c/b\\u003e), \\u003cbr\\u003e\\naudio codec, connectivity, Secure Digital/Multimedia Card (SD/MMC) controller, \\u003cbr\\u003e\\nCompact\\u0026nbsp;...\"},{\"page_id\":\"PT102\",\"snippet_text\":\"It enables you, for example, to connect a \\u003cb\\u003eUSB\\u003c/b\\u003e pen drive to your embedded \\u003cbr\\u003e\\n\\u003cb\\u003edevice\\u003c/b\\u003e. It also enables your embedded \\u003cb\\u003edevice\\u003c/b\\u003e to itself function as a \\u003cb\\u003eUSB\\u003c/b\\u003e pen \\u003cbr\\u003e\\ndrive by exporting part of its local storage for external access. The \\u003cb\\u003eLinux USB\\u003c/b\\u003e \\u003cbr\\u003e\\nsubsystem\\u0026nbsp;...\"},{\"page_id\":\"PT103\",\"snippet_text\":\"The following field has the format URBType:Bus#:\\u003cb\\u003eDeviceAddress\\u003c/b\\u003e:Endpoint# . ... If \\u003cbr\\u003e\\nyou turn on \\u003cb\\u003eDevice\\u003c/b\\u003e Drivers &#8594; \\u003cb\\u003eUSB\\u003c/b\\u003e support &#8594; \\u003cb\\u003eUSB\\u003c/b\\u003e verbose \\u003cb\\u003edebug\\u003c/b\\u003e messages \\u003cbr\\u003e\\nduring kernel configuration, the kernel will emit the contents of all dev_dbg()\\u0026nbsp;...\"},{\"page_id\":\"PT104\",\"snippet_text\":\"Sreekrishnan Venkateswaran. implement \\u003cb\\u003eUSB device\\u003c/b\\u003e drivers in user space. \\u003cbr\\u003e\\nEven when the final destination of your USB driver is inside the kernel, starting \\u003cbr\\u003e\\nwith a user space driver can ease \\u003cb\\u003edebugging\\u003c/b\\u003e and testing. The \\u003cb\\u003elinux\\u003c/b\\u003e-usb-devel \\u003cbr\\u003e\\nmailing\\u0026nbsp;...\"}],\"search_query_escaped\":\"linux usb device debug\"},{});var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-18010-1']);_gaq.push(['_trackPageview']);(function() {var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();", "Toggle navigationJanos GyerikBlogAppsWebsitesWritingToolsGo<div class=\"alert alert-block alert-warning\">\nI'm in the process of migrating from <a href=\"http://blog.janosgyerik.com/\">my old WordPress blog</a> hosted on <a href=\"http://www.dreamhost.com/r.cgi?455568\">DreamHost</a> to this shiny new <a href=\"http://jekyllbootstrap.com/\">Jekyll</a> site <a href=\"http://github.com/janosgyerik/homepage\">hosted on GitHub</a>.\n</div>Adding udev rules for USB debugging Android devices&mdash;10 November 2013USB debugging of my Google Nexus 4 phone used to work just fine from my Debian desktop. Until someday it just stopped working. The symptoms looked like this:$ adb logcat\n- waiting for device -\n^C\n$ adb devices\nList of devices attached\u00c2\u00a0\n???????????? no permissionsThat is,adb logcatwas just waiting forever even though my phone was connected, andadb deviceswas giving permission errors. There was no easy answer on stackoverflow, but lots of clumsy ones, suggesting to make theadbbinary setuid, or adding udev rules with0666permissions. I had to properly debug to understand and resolve the issue.Find the bus and device id assigned by the kernel:$ lsusb \nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\nBus 003 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\nBus 004 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\nBus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\nBus 004 Device 002: ID 045e:0053 Microsoft Corp. Optical Mouse\nBus 004 Device 003: ID 0566:3002 Monterey International Corp. \nBus 001 Device 008: ID 18d1:d002 Google Inc.I bought my device from Google, so it&rsquo;s probably the last one.Check the permissions of the device file$ ls -l /dev/bus/usb/001/008\ncrw-rw-r-T 1 root root 189, 8 Nov 10 18:34 /dev/bus/usb/001/008The path comes from the output oflsusb:001is theBus, and008is theDevice.The problem is clear: the file is owned by user root and group root, which I am neither. The elegant solution is to add a udev rule so that the device will belong to a reasonable group, likeplugdev, of which I&rsquo;m a member.Create a udev rules file, let&rsquo;s say:\u00c2/etc/udev/rules.d/51-android.rulesSUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;d002&quot;, MODE=&quot;0660&quot;, \nGROUP=&quot;plugdev&quot;, SYMLINK+=&quot;android%n&quot;Here,idVendorandidProductcome from the output oflsusb:18d1:d002. Do similarly for your own device. The rule specifies that a matching USB device should be created with permissions0660, with groupplugdev, and a symlink conveniently pointing to it.Now that everything is ready, simply plug the device out and back in to confirm the result:$ lsusb | grep oogle\nBus 001 Device 010: ID 18d1:d002 Google Inc. \n$ ls -l /dev/bus/usb/001/010\ncrw-rw-r-T 1 root plugdev 189, 9 Nov 10 18:37 /dev/bus/usb/001/010\n$ ls -l /dev/android7\nlrwxrwxrwx 1 root root 15 Nov 10 18:37 /dev/android7 -&gt; bus/usb/001/010\n$ adb devices\nList of devices attached \n01d1e2510d9c6d28 deviceBy the way,\nyou don&rsquo;t need to restartudev;\nthe changed rule should be picked up automatically.hacks (195)software (140)&larr; PreviousArchiveNext &rarr;var disqus_shortname = 'janosgyerikcom'; // required: replace example with your forum shortname\n    \n    /* * * DON'T EDIT BELOW THIS LINE * * */\n    (function() {\n        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n    })();Please enable JavaScript to view thecomments powered by Disqus.blog comments powered byDisqus&copy; 2015 Janos Gyerik\n          with help fromJekyll BootstrapandTwitter Bootstrapvar _gaq = _gaq || [];\n  _gaq.push(['_setAccount', 'UA-40473074-1']);\n  _gaq.push(['_trackPageview']);\n\n  (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n  })();", "Google Analytics(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-16236406-1', 'auto');\r\n  ga('send', 'pageview');End Google AnalyticsEsau SilvaLinux, Android, Programming, and moreAboutMy Instagram FeedMy LinkedIn ProfileSetting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu)Posted onMay 13, 2010byjgezau197 commentsTweetter0savesSave<!-- \r\n\t\t\tfunction displayURL(data) { var urlinfo = data[0]; if (!urlinfo.total_posts) return;document.getElementById('95').innerHTML = urlinfo.total_posts;}\r\n\t\t\t//-->EmailPrintIf you are like me and like developing in Linux, then you will find this guide useful. When I was setting up everything for my Android development, I ran into the problem that Linux was not recognizing my Android phone, and took me some time figuring out how to make Linux recognize my phone. Finally, after some research I was able to put this little guide together and decided to share it with the rest of the world.ADB (Android Debug Bridge) is a handy tool that comes with Android SDK that allows you to control and interface with your Android device.--------Top Ads--------Google<!--\ngoogle_ad_client = \"ca-pub-3789509522037412\";\n/* Leaderboard 1 - Top Post */\ngoogle_ad_slot = \"9163995085\";\ngoogle_ad_width = 728;\ngoogle_ad_height = 90;\n//-->Content.ad(function() {\n        var params =\n        {\n            id: \"83abcbb0-ff2f-4474-ae95-118c280f072c\",\n            d:  \"ZXNhdXNpbHZhLmNvbQ==\",\n            wid: \"47011\",\n            cb: (new Date()).getTime()\n        };</p>\n<p>        var qs=\"\";\n        for(var key in params){qs+=key+\"=\"+params[key]+\"&#038;\"}\n        qs=qs.substring(0,qs.length-1);\n        var s = document.createElement(\"script\");\n        s.type= 'text/javascript';\n        s.src = \"http://api.content.ad/Scripts/widget.aspx?\" + qs;\n        s.async = true;\n        document.getElementById(\"contentad47011\").appendChild(s);\n    })();---------------Update:07/29/13 &#8211; In step 4, Android 4.2.x and up has Developer Options hidden. Added steps to make it visibleUpdate:05/27/13 &#8211; Updated platform-tools (ADB) to latest version (Revision 17)Update:02/04/11 &#8211; HTC changed its Vendor ID, older phones have different ID than newer phones. Refer toUSB Vendor IDstable at the bottom of this tutorial to see the change.Update:01/02/11 &#8211; By mistake I had linked the ADB tool for OSX in step 3.1. Now it should be the correct one for Linux.IMPORTANT Update12/11/10 &#8211; There has been a change to the new Android SDK. ADB Tool has been moved to /android-sdk-linux_x86/plataform-tools,  so if you have the old SDK, please download the new one and update your path (Step 9.2 of this tutorial). If this is your first time doing this, then disregard the update and continue with the tutorial.Update:09/21/10 &#8211; Working code with Ubuntu Lucid Lynx and added more USB vendor IDs.Download the latest Android SDK from Google:Android SDKExtract the TGZ file to yourhome/YOUR-USERNAMEdirectoryTo get ADB, you need to install the SDK:Installing the SDKIf you are not a developer and not planning to develop, then just download the following zip file containing only the ADB tool and proceed with the tutorial:ADBOn your phone, clickSettings &gt; Applications &gt; Developmentand make sure USB Debugging is on.In Android 4.2.x and upDeveloper Optionsis hidden, to make it visible, do the followingTap seven times inBuild Number:Settings &gt; About Phone &gt; Build NumberYou will get a message saying you have enabledDeveloper Optionsor something like that, go back toSettingsand you will seeDeveloper Optionsin there.Login as root and create this file:/etc/udev/rules.d/##-android.rulesNOTE:In the above file replace ## with the number 50 if you are running Gusty/Hardy/Dapper (50-android.rules) or with the number 70 if you are running Karmic Koala/Lucid Lynx/Maverick Meerkat(70-android.rules)Or simply type in terminalsudo gedit /etc/udev/rules.d/##-android.rulesthen enter your passwordThe file should read:For Gusty/Hardy: SUBSYSTEM==&#8221;usb&#8221;, SYSFS{idVendor}==&#8221;0bb4&#8243;, MODE=&#8221;0666&#8243;For Dapper: SUBSYSTEM==&#8221;usb_device&#8221;, SYSFS{idVendor}==&#8221;0bb4&#8243;, MODE=&#8221;0666&#8243;For Karmic Koala: SUBSYSTEM==&#8221;usb&#8221;, SYSFS{idVendor}==&#8221;0bb4&#8243;, MODE=&#8221;0666&#8243;For Lucid Lynx: SUBSYSTEM==&#8221;usb&#8221;, SYSFS{idVendor}==&#8221;0bb4&#8243;, MODE=&#8221;0666&#8243;For Maverick Meerkat: SUBSYSTEM==&#8221;usb&#8221;, ATTR{idVendor}==&#8221;0bb4&#8243;, MODE=&#8221;0666&#8243;NOTE:In the above lines the code \u201d0bb4&#8243; refers to a HTC device. If your phone is from a different manufacturer, replace the code with the appropriate from the table below.NOTE:If you copy one of the lines mentioned above, make sure you replace the quotation marks with the ones in your keyboard, as these have different display code and it might give you a &#8220;no permissions&#8221; error.Execute:sudo chmod a+rx /etc/udev/rules.d/70-android.rulesRebootTo run ADB you need to add an environment variable to yourbashrcfile:Open a terminal window and type:sudo gedit .bashrcAdd the following line at the end:export PATH=${PATH}:/home/YOUR-USERNAME/android-sdk-linux_x86/platform-toolsSave and closeYou should be ready to go, typeadb devicesin a terminal window with your phone plugged in.If you see a serial number pop up that means you are done. Should look something like this:List of devices attachedHT99PHF02521   \tdeviceIf for some reasons when runningadb devicesgives you a &#8220;no permissions&#8221; error, try typing the following in terminaldb kill-serveradb start-serverUSB Vendor IDsManufacturerUSB Vendor IDAcer0502Dell413cFoxconn0489Garmin-Asus091EHTC (Older Phones)0bb4HTC (Newer phones)18d1Huawei12d1Kyocera0482LG1004Motorola22b8Nexus One/S18d1Nvidia0955Pantech10A9Samsung04e8Sharp04ddSony Ericsson0fceZTE19D2Common ADB Commands&#8211; Lists which devices are currently attached to your computeradb devices&#8211; Drops you into a basic linux command shell on your phone with no parameters, or lets you run commands directlyadb shell&#8211; Lets you install an Android application on your phoneadb install&#8211; Remounts your system in write mode \u2013 this lets you alter system files on your phone using ADBadb remount&#8211; Rets you upload files to your phones filesystemadb push&#8211; Lets you download files off your phones filesystemadb pull&#8211; Starts dumping debugging information from your handset to the console \u2013 useful for debugging your appsadb logcatNow, as for the credits, I tookTheUnlockr&#8220;How To&#8221; for Windows as a base for this guide.If you liked this tutorial, please retweet and/or share--------Bottom Ads--------Google<!--\ngoogle_ad_client = \"ca-pub-3789509522037412\";\n/* Leaderboard 2 - Bottom Post */\ngoogle_ad_slot = \"6598978286\";\ngoogle_ad_width = 728;\ngoogle_ad_height = 90;\n//-->---------------Esau SilvaSoftware Engineer at Region One ESCShareIf you enjoyed this post, please considerleaving a commentorsubscribing to theRSSfeed.<!--\nwpa2a.script_load();\n//--><rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\t\t\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\t\t\txmlns:trackback=\"http://madskills.com/public/xml/rss/module/trackback/\">\n\t\t<rdf:Description rdf:about=\"http://esausilva.com/2010/05/13/setting-up-adbusb-drivers-for-android-devices-in-linux-ubuntu/\"\n    dc:identifier=\"http://esausilva.com/2010/05/13/setting-up-adbusb-drivers-for-android-devices-in-linux-ubuntu/\"\n    dc:title=\"Setting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu)\"\n    trackback:ping=\"http://esausilva.com/2010/05/13/setting-up-adbusb-drivers-for-android-devices-in-linux-ubuntu/trackback/\"  />\n</rdf:RDF>tagged withadb,adbdriver,Android,linux,Lucid,LucidLynx,ubuntuAndroidLinuxTips &amp; TricksLogging In...ProfilecancelSign in with TwitterSign in with FacebookorNameEmailNot publishedWebsiteComment#respond197 Replies158 Comments0 Tweets0 Facebook18 Pingbackspanel itemsLast reply was 1 month agokcstrom.comment-author .vcardViewAugust 25, 2012Thank you!Reply.reply#comment-10751#comment-##Lutz.comment-author .vcardViewAugust 29, 2012Thanks! This gave me the nessessary hints to get it running. However, in debian squeeze (and possibly others) they changed the directory, so the file has to be/lib/udev/rules.d/50-android.rulesand the content for a motorola defy should beSUBSYSTEM==&#8221;usb&#8221;, ATTR{idVendor}==&#8221;22b8&#8243;, ATTR{idProduct}==&#8221;41db&#8221;,  MODE:=&#8221;0666&#8243;Reply.reply#comment-10844jgezaureplied:.comment-author .vcardViewSeptember 17, 2012thanks for the contributionReply.reply#comment-11077#comment-###comment-##michelangelog.comment-author .vcardViewAugust 29, 2012someone know id for alcatel devices?Reply.reply#comment-10850jgezaureplied:.comment-author .vcardViewSeptember 17, 2012did a quick search&#8230;try the one listed herehttp://stackoverflow.com/questions/8729678/adding-vendor-id-on-linux-for-device-debugging-error-no-permissionsReply.reply#comment-11076#comment-##Wahyureplied:.comment-author .vcardViewMarch 18, 2013For linux, you have to do:chmod 755 *and you might have to use sudo or just do:sudo -iso you can run everything as root.Hope that helps.Reply.reply#comment-16814#comment-###comment-##Iwan Kurniawan.comment-author .vcardViewAugust 31, 2012Setting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu)http://t.co/XEDpywf8Reply.reply#comment-10878Kassireplied:.comment-author .vcardViewMarch 17, 2013This aritcle went ahead and made my day.Reply.reply#comment-16775#comment-###comment-##JustDeyz.comment-author .vcardViewAugust 31, 2012Gw pke &quot;Usus Buntu&quot; msh ga bs boss RT @surobledug: Setting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu)http://t.co/2PMMBk6tReply.reply#comment-10883#comment-##Nikola ?uri? Nid\u017eo.comment-author .vcardViewSeptember 3, 2012Setting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu) \u00ab Esau Silva &#8211;http://t.co/kzwX05HSReply.reply#comment-10913#comment-##Kulakesh.comment-author .vcardViewOctober 6, 2012I created the file as 70-android.rules and all of my usb devices got disabled. As a solution i came up with 70-xdroid.rules so that it takes the last position alphabetically for execution as there was couple of other &#8220;rules&#8221; files tooking place. Guss what, its works. Thanks.Reply.reply#comment-11299#comment-##thas.comment-author .vcardViewOctober 12, 2012huawei phone u8800 not conet pllesReply.reply#comment-11462#comment-##Successful Root Method for the Pantech Flex P8010 &#187; SamaaNetwork.comment-author .vcardViewNovember 23, 2012[&#8230;] Thanks to Esau Silva for this post that helped get the drivers working for us.http://esausilva.com/2010/05/13/sett&#8230;-linux-ubuntu/[&#8230;]Reply.reply#comment-12626#comment-##Ipapkov.comment-author .vcardViewDecember 3, 2012what means number in 70-android.rules and 50-android.rules?Reply.reply#comment-12841Caydenreplied:.comment-author .vcardViewMarch 17, 2013I might be beating a dead horse, but thank you for potisng this!Reply.reply#comment-16786#comment-###comment-##HatCatcher.comment-author .vcardViewJanuary 11, 2013I found this link that helps if using Debian and Samsung Galaxy Prevail.http://unforgivendevelopment.com/2011/05/20/udev-headaches-on-debian-testing-wheezy/Reply.reply#comment-14507#comment-##Swapna.comment-author .vcardViewJanuary 15, 2013Does anyone know the product id and vendor id for milagrow?Reply.reply#comment-14707Raghunathanreplied:.comment-author .vcardViewJanuary 30, 2013Vendor id for milagrow :18D1Reply.reply#comment-15357#comment-##Raghunathanreplied:.comment-author .vcardViewJanuary 30, 2013what is the milagrow product ur using??Reply.reply#comment-15358#comment-###comment-##novaradix.comment-author .vcardViewJanuary 18, 2013Please go through the below solutions. it will solve your problem definitely.http://androiddeveloperspot.blogspot.in/2013/01/usb-debugging-in-android-ubuntu.htmlReply.reply#comment-14843#comment-##Richard M\u00fcller.comment-author .vcardViewJanuary 29, 2013Hi, thanks for your tutorial. I have a Samsung GT-S7562 (Galaxy S Duos), which is not recognized by my computer running Linux (Ubuntu12). Unfortunately I had no success. I downloaded only the ADB stuff. I used the code for Maverick Meerkat and the Samsung ID: SUBSYSTEM==&#8221;usb&#8221;, ATTR{idVendor}==&#8221;04e8&#8243;, MODE=&#8221;0666&#8243;. I then edited the .bashrc as described, which resultetd in &#8220;PATH: unknown command&#8221;, and I could not sudo any more, so that I had to include the sudo directory to make changes back later. The device list was empty. Later, when the PATH was undone again, I changed to the platform-tools directory und used the ./adb command instead of adb. Device list empty again. What have I done wrong? I assume, the code for my version of ubuntu was not correct. What shall I do?Reply.reply#comment-15322#comment-##nevyn.comment-author .vcardViewFebruary 26, 2013Thank you&#8230;.Reply.reply#comment-16084#comment-##Luiz Alfredo Galiza.comment-author .vcardViewMarch 15, 2013Thanks a lot. I was searching for this tutorial for months!Reply.reply#comment-16703#comment-##johnny.comment-author .vcardViewMarch 25, 2013This post is great. I realy love it!Reply.reply#comment-17006#comment-##Nikhil Thakkar.comment-author .vcardViewMay 13, 2013Just a note:Please use lower case for Vendor Id while copying it to android rules file.for example: if vendor id is -&gt; 18D1use 18d1ThanksReply.reply#comment-17263michaelreplied:.comment-author .vcardViewMay 30, 2013Okay so I went through all this and at first I ended up with the NO permissions answers with ????????????? as my device serial. And then after following the link in the comments to:http://androiddeveloperspot.blogspot.in/2013/01/usb-debugging-in-android-ubuntu.htmland tweaking the permissions based on that. Now i just get nothing in the device list&#8230; any idea what i&#8217;ve done wrong?Reply.reply#comment-17616Carl Hagereplied:.comment-author .vcardViewJune 13, 2014I had the same problem&#8211; finally figured it out. I copied the rules code from above, but the web page creation changed the double quote &#8221; into funny UTF quotes, so the rules file didn&#8217;t get set. Use &#8220;sudo service udev restart&#8221; to save reboots.Reply.reply#comment-31964#comment-###comment-###comment-##HTC One X(endeavoru) ??(cid:htccn701) ? ROM &#8211; Tom Sawyer.comment-author .vcardViewJune 13, 2013[&#8230;] For Linux : Just a Guide [&#8230;]Reply.reply#comment-17930#comment-##JessieSANTOS28.comment-author .vcardViewJuly 25, 2013Make your life more simple get thebusiness loansand everything you want.Reply.reply#comment-18548#comment-##joe.zhong.comment-author .vcardViewJuly 25, 2013Very nice, very thank you.If you want to find the vendor id.you can use  &#8220;lsusb&#8221; before plug android phone.it like:$ lsusbBus 001 Device 002: ID 80ee:0021Bus 001 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hubAnd plug in the android phone and use &#8220;lsusb&#8221; againBus 001 Device 005: ID 0bb4:0c03 High Tech Computer Corp.Bus 001 Device 002: ID 80ee:0021Bus 001 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hubAnd will find the vendor id.Reply.reply#comment-18559#comment-##Masroor Hussain.comment-author .vcardViewJuly 27, 2013thanks for this simple and up to the mark guideI&#8217;m a little confused at step 5, what does it mean to login as root? where to create that file? I&#8217;m totally new to ubuntu I&#8217;ve installed it only in order to run the Controlbear S-off software to S-off my htc amaze cell phone. i hope to get a respnse from youThanks for the guide and also thanks in advance for further helpReply.reply#comment-18591jgezaureplied:.comment-author .vcardViewJuly 29, 20131. In command line type the below and press enter, then type your password. This will log you in as super user (root privileges) and create the stated file.$ su2. You create the file here/etc/udev/Reply.reply#comment-18601#comment-###comment-##&raquo; Setting Up ADB/USB Drivers for Android Devices in Linux (Fedora) - Esau Silva.comment-author .vcardViewAugust 15, 2013[&#8230;] was time to set it up for Android. I was expecting it to be something like what I did for Ubuntu (Setting Up ADB/USB Drivers for Android Devices in Linux Ubuntu), but it was much easier in Fedora. Just had to install two utilities and that was it. This was [&#8230;]Reply.reply#comment-18929#comment-##chrisfargen.comment-author .vcardViewSeptember 26, 2013I got stuck on step 10: &#8220;You should be ready to go, type adb devices in a terminal window&#8221;. I was getting this error message: &#8220;No such file or directory&#8221;. I&#8217;m running Ubuntu 13.04 64-bit. I found the solution here: (http://askubuntu.com/a/73497).Reply.reply#comment-19453#comment-##Arsenio.comment-author .vcardViewOctober 18, 2013Goo job man, and plus: A) OEM (n0n-brand) Vendor ID (4-digit VID) HAVE TO (sometimes MUST TO) be put (manually) into ~/.android/adb_usb.ini (same and especcially for Windows, where ~ stands for $HOME in Linux and some /Documents and Settings/Admin in Windows &#8211; not My Documents!). For example 2207 refers to many RockChip 2918 China-made units etc.  B) And little snoozing: 1. nobody have to sudo to break into own .bashrc (sudo gedit .bashrc =&gt; nano ~/.bashrc). 2. typo: (a)db kill-server) 3. while not strictly related, but $ADT/tools aslo good thing to PATH along with platform-toolsReply.reply#comment-19910#comment-##Arsenio.comment-author .vcardViewOctober 18, 2013And well: some people ask for USB IDs. Just run lsusb and see into output. XXXX:YYYY means VID:UID (Vendor and Unit) IDsReply.reply#comment-19911#comment-##Dmitriy.comment-author .vcardViewNovember 27, 2013Hi,Now it&#8217;s good idea to use apt for adb installation. As for it&#8217;s a bit easier way for adb installation:)sudo apt-get install android-tools-adbReply.reply#comment-24374jgezaureplied:.comment-author .vcardViewDecember 11, 2013Thanks for the tip. I do not use Ubuntu anymore, so I am not up to date with the newer methods, I will add this to the guideReply.reply#comment-26305#comment-###comment-##blah.comment-author .vcardViewDecember 15, 2013On Ubuntu 13.04, the filename is 51-android.rulesSUBSYSTEM=&#8221;usb&#8221;this fromhttp://forum.xda-developers.com/showthread.php?t=2302780Reply.reply#comment-26498#comment-##Todd.comment-author .vcardViewJanuary 8, 2014Awesome, worked perfectlyReply.reply#comment-27843#comment-##vedi0boy.comment-author .vcardViewFebruary 14, 2014Thank you so much!! Exactly what I was looking for.Reply.reply#comment-28781#comment-##UzumakiUchiha.comment-author .vcardViewFebruary 15, 2014Now, how would I do this, the code for 12.04 Precise Palogin isnt listed.Reply.reply#comment-28798jgezaureplied:.comment-author .vcardViewFebruary 16, 2014Are you referring to step 5 or 6? I would say just try one, if it doesn&#8217;t work, try the other one. I haven&#8217;t used Ubuntu in years nowReply.reply#comment-28833#comment-###comment-##vowindows.comment-author .vcardViewApril 12, 2014I tried a lot of advices to be my Android device visible by &#8220;adb devices&#8221; command but none worked. And finally I found. Just add your Android device vendor ID (like 0x1f3a) to~/.android/adb_usb.iniand then try other advices.Reply.reply#comment-29575#comment-##&raquo; Root Your Nexus 5 Under Linux [Guide] - Esau Silva.comment-author .vcardViewApril 12, 2014[&#8230;] you are using Ubuntu or Fedora, you need to set up some things for ADB to work. You can follow my Ubuntu or my Fedora guide to set up ADB. With Linux Mint you just plug and play, that is the beauty of [&#8230;]Reply.reply#comment-29580#comment-##Android 4.2+ Screen Capture with DDMS via USB in Linux | Amigo&#039;s Technical Notes.comment-author .vcardViewApril 30, 2014[&#8230;] first, I cannot see Developer Options in Settings. According to Setting Up ADB/USB Drivers for Android Devices in Linux (Ubuntu) by Esau Silva, you have to open Settings?About phone then click on Build number 7 times to make it [&#8230;]Reply.reply#comment-30164#comment-##Willian Martins.comment-author .vcardViewMay 26, 2014Fine!Reply.reply#comment-31168#comment-##danjuma.comment-author .vcardViewJune 29, 2014hello&#8230;great tutorial..planning to compile rom from source&#8230;may need your assistance when hooked&#8230;can i chat u on hangouts?kolodanjuma@gmail.comReply.reply#comment-32484#comment-##Nate.comment-author .vcardView11 months agoThank you so much for this, I had to redo this idk how many times for different systems and worked like a charm each time!Reply.reply#comment-34596#comment-##Josh.comment-author .vcardView1 month ago14.04 Trusty Tahr isn&#8217;t listed.Reply.reply#comment-38872jgezaureplied:.comment-author .vcardView1 month agoAt the time this article was written, Ubuntu 14.04 was not around. Have you tried the tutorial in 14.04? did it work?Reply.reply#comment-38995#comment-###comment-##Comment navigation&larr; Older Comments#Comments TabsSearch The WebPopular QueriesCategoriesAndroid(10)ASP.NET(8)Cars(1)Christianity(11)Devotionals(4)Guides(1)Linux(11)NW Arkansas(5)OS X(5)Programming(9)Scripting(4)Scripts(1)Ruby on Rails(1)Tips &amp; Tricks(14)Unix(1)Web Development(4)YouTube(3)<!--\r\ngoogle_ad_client = \"ca-pub-3789509522037412\";\r\n/* Right Banner */\r\ngoogle_ad_slot = \"5261845888\";\r\ngoogle_ad_width = 160;\r\ngoogle_ad_height = 600;\r\n//-->Tag CloudadbadbdriverAndroidAndroid StudioArkansasasp.netAsusBaptistbashBentonvilleBibleC#ChristianChristianityChristian Musiccommand lineConservative Christian Musicconstant contactDevotionalsf18FedoraFedora 19Galaxy SGospel songiTextSharpJavajava_homekernelKing James BibleKJVlinuxLinux MintMacNW ArkansasOld-Fashioned Christian MusicOSXPDFProverbsshellsnippetThe EpleysubuntuunixVB.NETWeb DevelopmentCluster MapsCounter since May 2013End Cluster MapszeeDynamic Themeend #wrapperngg_resource_manager_marker/* <![CDATA[ */\nvar sb_instagram_js_options = {\"sb_instagram_at\":\"31278991.97584da.2633fcd481284a4183ba4ceba94f8260\"};\n/* ]]> *//* <![CDATA[ */\nvar Sociali18n = {\"commentReplyTitle\":\"Post a Reply\"};\n/* ]]> */var ajaxurl = 'http://esausilva.com/wp-admin/admin-ajax.php?action=put_bible_passage&&requested_date=';\n\t\t\t\t\n\t\t\t\t// Load Scriptures initially\n\t\t\t\tvar ebp_date_obj = new Date();\n\t\t\t\tjQuery('#scriptures').load(ajaxurl + encodeURI(ebp_date_obj.toDateString()));<!--\nwpa2a.targets=[\n{title:\"Setting Up ADB\\/USB Drivers for Android Devices in Linux (Ubuntu)\",url:\"http://esausilva.com/2010/05/13/setting-up-adbusb-drivers-for-android-devices-in-linux-ubuntu/\"}];\nwpa2a.html_done=true;if(wpa2a.script_ready&&!wpa2a.done)wpa2a.init();wpa2a.script_load();\n//-->(function() {\r\n            var li = document.createElement('script'); li.type = 'text/javascript'; li.async = true;\r\n            li.src = 'https://platform.stumbleupon.com/1/widgets.js';\r\n            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(li, s);\r\n          })();(function(){\n\t\tvar corecss = document.createElement('link');\n\t\tvar themecss = document.createElement('link');\n\t\tvar corecssurl = \"http://esausilva.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shCore.css?ver=2.1.364\";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( \"rel\", \"stylesheet\" );\r\n\t\t\t\tcorecss.setAttribute( \"type\", \"text/css\" );\r\n\t\t\t\tcorecss.setAttribute( \"href\", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = \"stylesheet\";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName(\"head\")[0].insertBefore( corecss, document.getElementById(\"syntaxhighlighteranchor\") );\r\n\t\tvar themecssurl = \"http://esausilva.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shThemeDefault.css?ver=2.1.364\";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( \"rel\", \"stylesheet\" );\r\n\t\t\t\tthemecss.setAttribute( \"type\", \"text/css\" );\r\n\t\t\t\tthemecss.setAttribute( \"href\", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = \"stylesheet\";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById(\"syntaxhighlighteranchor\").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName(\"head\")[0].insertBefore( themecss, document.getElementById(\"syntaxhighlighteranchor\") );\r\n\t})();\n\tSyntaxHighlighter.config.clipboardSwf = 'http://esausilva.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/clipboard.swf';\n\tSyntaxHighlighter.config.strings.expandSource = 'show source';\n\tSyntaxHighlighter.config.strings.viewSource = 'view source';\n\tSyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';\n\tSyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';\n\tSyntaxHighlighter.config.strings.print = 'print';\n\tSyntaxHighlighter.config.strings.help = '?';\n\tSyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\\n\\n';\n\tSyntaxHighlighter.config.strings.noBrush = 'Can\\'t find brush for: ';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\\'t configured for html-script option: ';\n\tSyntaxHighlighter.defaults['pad-line-numbers'] = true;\n\tSyntaxHighlighter.defaults['toolbar'] = false;\n\tSyntaxHighlighter.all();", "Google Tag Manager(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0];var j=d.createElement(s);var dl=l!='dataLayer'?'&l='+l:'';j.src='//www.googletagmanager.com/gtm.js?id='+i+dl;j.type='text/javascript';j.async=true;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-PZRG3F');End Google Tag ManagerJump to navigationDeveloper ZoneJoin todayLog inDevelopmentOSAndroid*Chrome*HTML5Windows*Device2-in-1 & Ultrabook\u2122Business ClientEmbedded SystemsIoTServer, Workstation, HPCTechnologyBig DataIntel\u00ae Modern CodeDual ScreenGame DevIntel\u00ae RealSense\u2122ISA ExtensionsNetworkingOpen SourceStorageToolsDeveloper TypeEmbedded SystemsGame DevMediaTechnical, Enterprise, HPCWebOSAll ToolsAndroid*HTML5Linux*OS X*Windows*ResourcesContact SupportDocumentationFree Software & Code SamplesIntel Registration CenterProduct ForumsSDKsResourcesPartner with IntelAcademic ProgramBecome a PartnerBlack Belt DeveloperInnovator ProgramSuccess StoriesLearnBlogEventsUser ExperienceVideosSupportContact SupportDeveloper EvangelistsFAQsForumsSite to search:Intel\u00ae DZIntel.comSearchIntel\u00ae XDK DocumentationLegal InformationIntroductionProjects TabDevelop TabDebugging and TestingDebug and Test OverviewEmulate Tab TutorialIntel App Preview IntroductionTest TabTest Tab VideoDebug TabConfiguring Your Android* USB Debug ConnectionCPU and Memory Profiling - Profile TabDevice Emulator LimitationsBuild TabWeb ServicesCrosswalk*HTML5 Game DevelopmentIntel XDK IoT EditionIntel\u00ae XDK Early AccessAdditional ResourcesDocumentation FeedbackSupport ForumsConfiguring Your Android* USB Debug ConnectionSubmitted byPaul F. (Intel)onTue, 08/04/2015 - 18:07If you are having difficulties setting up your device for use with the Debug tab, Profile tab or the \u201cRun My App\u201d tool on the Develop tab pleasefirst confirm that you have a good USB cable!Some USB cables function only as \"charging\" cables, meaning they will not transmit data. Be sure to use a cable that you know works for USB data transfers with other devices.The first part of this document (Enabling your Android Device for Remote Debug over USB) applies to Microsoft* Windows*, Linux* and Apple* OS X* machines and can be used to diagnose Android USB debug connection issues on any of those systems.If you have enabled the Debug feature on your device (by following the instructions in this document) and can successfully \"debug\" a small sample app with the Debug tab, but are having trouble either getting your app to start when using the Debug tab or having trouble getting the debug console to start: 1) stop the debug session, 2) select the Test tab, 3) push the sync button on the Test tab and 4) return to the Debug tab. This sometimes resolves debug startup issues. When using low performance Android devices it sometimes helps to start App Preview on your device before you start using the Debug tab. If these workarounds do not resolve the issue, you may have an Android USB debug driver problem. In that case, please follow the instructions provided in the second-half of this document.Dealing with missing Android USB debug drivers on Windows is detailed in the second half of this article (Installing the Android Debug Bridge (ADB) USB Driver on a Windows Computer). Linux and OS&nbsp;X have the appropriate Android USB debug drivers already built-in and should not encounter this problem, so the second half of this article applies exclusively to Windows systems.If you are having trouble with adb on Linux, especially on a 64-bit Linux install, you may need to install the 32-bit Linux shared libraries. You can either install the entire 32-bit support libraries or just thelibc6-i386andlib32stdc++6modules. On an Ubuntu/Debian system use thesudo apt-get install libc6-i386 lib32stdc++6command to install the required libraries.Enabling your Android Device for Remote Debug over USBIf you see either of the following two messages in the Intel&reg; XDK, when trying to use the Debug tab, Profile tab or the Run My App feature on the Develop tab, it means that your Android device is not being recognized over the USB connection by your workstation.Confirm that your Android device is running Android 4.0 or higher:Remote debug can only be used with Android 4.0 and higher version devices. Sorry, but Android 2.x and 3.x devices do not support this feature.Find theSettings &gt; About devicescreen on your device.UnderAndroid versionyou will find the version of Android OS running on your device.Confirm that your device is running Android 4.0 or higher.Make sure you have installed the latest version of Intel App Preview on your Android test device:Scan this QR code with your Android device or search forIntel App Previewin the Google Play Store.Verify that USB debugging is enabled on your test device:Find theSettings &gt; Developer optionsconfiguration screen on your Android device.IfDeveloper optionsis not visible, selectSettings &gt; About deviceand tap theBuild numberitem seven times. Return to theSettingsscreen andDeveloper optionsshould now be visible.Enable theUSB Debuggingoption from withinSettings &gt; Developer options. Enabling this function automatically launches remote debug mode on your Android device when a USB connection is made with your development system.For reference, detailed instructions regarding setting up USB debugging can be found under the section titledSetting up your deviceon theRemote Debugging Chrome on Androidpage.Disconnect and reconnect the USB connection to your test device:Disconnect the USB cable from your Android test device and your workstation.Unlock your Android device\u2019s home screen.Reconnect the USB cable to your device and your workstation.If you see an alert on your Android device requesting permission to \u201cAllow USB debugging,\u201d click OK.On some slower Android devices there may be a delay of five or more seconds before you see an \u201cAllow USB debugging?\u201d alert.Check the \u201cAlways allow from this computer\u201d box to avoid having to watch for this alert the next time you attach your Android device for remote USB debugging.If you see the following message in the Intel XDK on the Debug or Profile tab it is an indication that you may have missed the \u201cAllow USB debugging?\u201d message on your Android device when you attached your Android device to your workstation\u2019s USB port (select the blue pull-down triangle to see the entire message):If you do see the message above repeat the instructions in this section.Confirm that you can see your Android device using Chrome desktop browser:You can confirm that your workstation recognizes and can communicate with the Android debug bridge (adb) over USB by performing the following test:Confirm that USB debugging is enabled on your Android device (see the prior instructions).Close the Intel XDK and kill any adb processes that are running on your workstation (search for &quot;kill a process&quot; if you need help).Attach your Android device to a USB port on your workstation and answer \u201cOK\u201d to any USB debug alert message that appears when you attach your device (see the prior instructions).Open the Chrome browser on your workstation and type \u201cchrome://inspect\u201d into your Chrome browser\u2019s URL bar.If your device is recognized by Chrome it willshow you the name of your deviceand it may also show you a list of debuggable browser tabs that are open on your connected Android device (as shown in the image above, debuggable tabs will only be listed if you have an instance of Chrome mobile browser running on your Android device). You may also see a list of apps containing debuggable WebViews in this list (none are shown in this example screenshot).Something similar to the following screen will be seen if this test fails:Important:If the above test failed, try changing the USB connection mode of your device from aMedia Device (MTP)connection to aCamera Device (PTP)connection and try it again. This is especially important to try if you are running on Windows; the Windows USB debug driver does not always work properly when your device is configured in MTP mode. See thisHow-To Geek articlefor more information regarding Android MTP and PTP connection modes. Some devices do not explicitly give you an \"MTP\" or \"PTP\" connection option, instead they will give you the option to \"enable access to files\" on your Android device; enabling \"access to files\" on your device is equivalent to enabling MTP mode.Installing the Android Debug Bridge (ADB) USB Driver on a Windows ComputerIf you are using Windows and the instructions above did not fix your Android USB connection issue you probably need to install an Android Debug Bridge USB driver for your Android device. If your workstation is running Linux* or Apple* OS X* you already have the necessary USB driver installed to communicate with your Android device.Official instructions regarding how to install the Android USB debug driver are available on theOEM USB Driverspage of the Android Developers site. However, you may find that thoseofficialinstructions still leave you with an unusable Android debug connection!Instead of using the official instruction, we recommend that you read on\u2026Note:if you saw a message similar to the following (after you attached your Android device to your Windows workstation) indicating that USB drivers have been installed, you do not yet have the ADB driver for debug installed for your device! This message was letting you know that the appropriate MTP and/or PTP drivers were installed. If you are unsure, perform the Chrome desktop browser test in the prior section to determine if you have the Android USB debug driver installed.The driver installation that generated the message above was a Media (MTP) or Camera (PTP) device driver that provides access to your Android device\u2019s files and photos. Itdoes notprovide debug services. See thisHow-To Geek articlefor more information regarding MTP and PTP connection modes.To install the Android USB debug driver on Windows 7, 8 or 10:Disconnect your Android device from your Windows workstation (remove the USB cable).Download and install theKoush Universal ADB driveron your Windows workstation.There is, in fact, only one Android USB debug driver (provided by Google). The only thing that changes between Android device manufacturers are the device IDs in the driver INF file that indicate to Windows that \u201cthis driver belongs to that device.\u201dConnect your Android device to a USB port on your Windows workstation.Right-clickComputeron your desktop or in Windows Explorer, and selectProperties.SelectDevice Manageron the left side of thePropertiespane. (Alternatively, you can start theDevice Managerby typingmmc devmgmt.mscat a Windows command prompt.)Locate and expandOther devicesin theDevice Manager.If you don\u2019t seeOther devicesin the Device Manager one of the preconfigured Koush universal driver IDs may have matched that of your Android device; in which case you can go back to the Chrome desktop browser test in the previous section to see if your device is now recognized.Right-click the device name (such asNexus 5orAndroid TabletorADB Interface, etc.) and selectUpdate Driver Software\u2026This will launch the Update Driver Software wizard.SelectBrowse my computer for driver softwareat the bottomof the dialog box.ClickLet me pick from a list of device drivers on my computerat the bottomof the dialog box (remember, we installed the Koush universal ADB driver that we can use):SelectAndroid Device(orADB InterfaceorAndroid Phoneor simplyAndroid) from the \"Common hardware types\" list. If you have only installed the Koush universal driver you will probably only seeAndroid Device, if you have previously installed another manufacturer\u2019s ADB driver you may also seeADB Interfacein the list. Either driver will work, they use the same binary driver files.Note:if you see none of the above you may have to selectShow All Devicesand then click theNextbutton to get a complete list of devices.Select aModelfrom the list of available drivers. If you selected the Koush universal driver the list will be quite long and may take ~15 seconds to appear. If you selected a standard manufacturer\u2019s driver the list will be shorter (e.g., the Samsung* driver is shown below). In the case of the Koush universal driver, selecting any device will work, the genericAndroid Composite ADB Interfaceoption is recommended, as shown below.When you select one of these \u201cnon-matching\u201d ADB drivers you will get a warning message, because the ID of the driver does not match that of your connected Android device. You can ignore the warning and clickYesto confirm that you intend to use this driver with your Android device.ClickNextto install the driver.Now, go back and try the Chrome desktop browser test to confirm that your Windows workstation can communicate with your Android device. You may have to confirm an \u201cAllow USB debugging?\u201d message on your Android device after the device is recognized by your workstation.If none of this worked, see thefirst two instructionsof this article titledAndroid Won\u2019t Connect To Windows Over ADB? Fix It In Three Easy Stepsfor instructions on how to remove any problem Android USB drivers from your system. Do not follow the third step in that article, use the process outlined above to finish the process.There is only one Windows USB driver for ADB connections, it is the same driver for all Android devices; only the device IDs vary. By using the procedure described above you are overriding the Windows device driver ID rules and using the driver files for an Android device with a different device ID. In the end, there is only one USB driver binary that is used withallof your Android devices for debugging.You may need to do this again when you connect another Android device (from a different manufacturer), especially if it has IDs that were not part of the Koush driver\u2019s INF file that you installed. Likewise, if you had previously installed the Google or Samsung or some other Android USB debug driver, you can select that driver from the available list of drivers and it will work with your new device.For more complete information about compiler optimizations, see ourOptimization Notice.PrevDebug TabNextCPU and Memory Profiling - Profile Tab&nbsp;Terms of Use*TrademarksPrivacyCookiesPublicationsIntel\u00ae Developer Zone NewsletterIntel\u00ae Parallel Universe MagazineLook for us on:FacebookTwitterGoogle+LinkedInYouTubeEnglish\u7b80\u4f53\u4e2d\u6587Fran\u00e7ais\u0420\u0443\u0441\u0441\u043a\u0438\u0439Espa\u00f1olPortugu\u00easDeutschItalianoQualtrics metrics. Required by intel_metrics moduleRate Uswindow.NREUM||(NREUM={});NREUM.info={\"beacon\":\"bam.nr-data.net\",\"licenseKey\":\"aca265f578\",\"applicationID\":\"3491450\",\"transactionName\":\"ZlADZEtYCxJQBU0KC18aIFNNUAoPHghWBwFuRQBXXGYTCFQR\",\"queueTime\":0,\"applicationTime\":533,\"atts\":\"ShcAEgNCGBw=\",\"errorBeacon\":\"bam.nr-data.net\",\"agent\":\"js-agent.newrelic.com\\/nr-686.min.js\"}"]
